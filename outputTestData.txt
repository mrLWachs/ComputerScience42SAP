1:	Mr. Wachs' Computer Science Classes........................................................
2:	Computer Science 42SAP Prerequisite Content:...............................................
3:	Computer Science 20S Course:...............................................................
4:	~~~ SIMULATED {GUI Frame} DIALOG: unit2Introduction ~~~ 
5:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables1 ~~~ 
6:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables2 ~~~ 
7:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals1 ~~~ 
8:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals2 ~~~ 
9:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping1 ~~~ 
10:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping2 ~~~ 
11:	Computer Science 30S Course:...............................................................
12:	Hello World
13:	I'm in the world
14:	Good-bye world!
15:	Make a quote " 
16:	Make a slash \ 
17:	Make a 	 tab 
18:	Make a new line 
 break 
19:	~~~ SIMULATED {Message} DIALOG: Hi ~~~ 
20:	~~~ SIMULATED {Message} DIALOG: Information icon is i ~~~ { title: Information title },
21:	~~~ SIMULATED {Message} DIALOG: Question icon is i ~~~ { title: Question title },
22:	~~~ SIMULATED {Message} DIALOG: Warning icon is i ~~~ { title: Warning title },
23:	~~~ SIMULATED {Message} DIALOG: Plain icon is i ~~~ { title: Plain title },
24:	~~~ SIMULATED {Input} DIALOG: Enter Something ~~~ 
25:	~~~ SIMULATED {Input} DIALOG: Information icon is i ~~~ 
26:	~~~ SIMULATED {Input} DIALOG: Question icon is i ~~~ 
27:	~~~ SIMULATED {Input} DIALOG: Warning icon is i ~~~ 
28:	~~~ SIMULATED {Input} DIALOG: Plain icon is i ~~~ 
29:	~~~ SIMULATED {Confirm} DIALOG: Confirm ~~~ 
30:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 2 ~~~ { title: Information },{ messageType: 1 },
31:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 3 ~~~ { title: Question },{ optionType: -1 },{ messageType: 3 },
32:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 4 ~~~ { title: Warning },{ optionType: 2 },{ messageType: 2 },
33:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 5 ~~~ { title: Plain },{ optionType: 1 },{ messageType: -1 },
34:	a = false
35:	b = 1
36:	c = 1.2
37:	d = A
38:	e = apple
39:	x = 10
40:	x = 20
41:	y = 30
42:	y = 30
43:	x = 28
44:	y = 5
45:	z = 3
46:	3.141592658389, 99, Y, true, Wachs
47:	f = 25
48:	g = 25.0
49:	g = 25.999999999999
50:	h = 25
51:	k = 2.99999999
52:	l = 2
53:	m = 2.0
54:	n = A
55:	o = 65
56:	p = F
57:	~~~ SIMULATED {Input} DIALOG: Enter ~~~ 
58:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
59:	~~~ SIMULATED {Input} DIALOG: Enter int ~~~ 
60:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
61:	~~~ SIMULATED {Input} DIALOG: Enter double ~~~ 
62:	~~~ SIMULATED {Message} DIALOG: -1.0 ~~~ 
63:	~~~ SIMULATED {Input} DIALOG: Enter char ~~~ 
64:	~~~ SIMULATED {Message} DIALOG: - ~~~ 
65:	Word hippopotomonsprosesquippedaiophobia is length 35
66:	Word hippopotomonsprosesquippedaiophobia in upper case is HIPPOPOTOMONSPROSESQUIPPEDAIOPHOBIA
67:	answer1 = 3.141592653589793
68:	answer2 = 0.8775825618903728
69:	answer3 = 1.0
70:	answer4 = 125.0
71:	answer5 = 3.0
72:	answer6 = -0.6931471805599453
73:	seed = 0.7133965848070752
74:	low    = 1.0
75:	high   = 10.0
76:	number = 8.133965848070751
77:	value = 8
78:	card is 31
79:	equal
80:	The example is less than
81:	!=
82:	W1 kind of == W2
83:	Keep trying
84:	counter = 0
85:	counter = 1
86:	counter = 2
87:	counter = 3
88:	counter = 4
89:	counter = 5
90:	counter = 6
91:	counter = 7
92:	counter = 8
93:	counter = 9
94:	~~~ SIMULATED {Input} DIALOG: Create a password ~~~ 
95:	~~~ SIMULATED {Message} DIALOG: Ok, continue... ~~~ 
96:	~~~ SIMULATED {Input} DIALOG: Enter password ~~~ 
97:	~~~ SIMULATED {Message} DIALOG: You got it ~~~ 
98:	i = 0
99:	i = 1
100:	i = 2
101:	i = 3
102:	i = 4
103:	i = 5
104:	i = 6
105:	i = 7
106:	i = 8
107:	i = 9
108:	counting = 100
109:	counting = 90
110:	counting = 80
111:	counting = 70
112:	counting = 60
113:	counting = 50
114:	counting = 40
115:	counting = 30
116:	counting = 20
117:	counting = 10
118:	counting = 0
119:	i = 99.789
120:	i = 19.007428571428573
121:	~~~ SIMULATED {Message} DIALOG: You are an intern at radio station, C-RAP, The 
disk jockeys announce the current temperature 
in both Fahrenheit and Celsius every half-hour.
They would like an easy w ... (line shortened) ...
122:	~~~ SIMULATED {Input} DIALOG: Enter temperature in Celcius ~~~ 
123:	~~~ SIMULATED {Message} DIALOG: Your temperature in Fahrenheit is 30.2 ~~~ 
124:	~~~ SIMULATED {Message} DIALOG: Thank you! ~~~ 
125:	Starting to Learn methods...
126:	*
127:	*
128:	Phenakistoscope
129:	Volleywood
130:	pancakes
131:	Spider-man
132:	Batman
133:	Dalmations
134:	Dalmations
135:	Dalmations
136:	Dalmations
137:	Dalmations
138:	Dalmations
139:	Dalmations
140:	Dalmations
141:	Dalmations
142:	Dalmations
143:	Dalmations
144:	Dalmations
145:	Dalmations
146:	Dalmations
147:	Dalmations
148:	Dalmations
149:	Dalmations
150:	Dalmations
151:	Dalmations
152:	Dalmations
153:	Dalmations
154:	Dalmations
155:	Dalmations
156:	Dalmations
157:	Dalmations
158:	Dalmations
159:	Dalmations
160:	Dalmations
161:	Dalmations
162:	Dalmations
163:	Dalmations
164:	Dalmations
165:	Dalmations
166:	Dalmations
167:	Dalmations
168:	Dalmations
169:	Dalmations
170:	Dalmations
171:	Dalmations
172:	Dalmations
173:	Dalmations
174:	Dalmations
175:	Dalmations
176:	Dalmations
177:	Dalmations
178:	Dalmations
179:	Dalmations
180:	Dalmations
181:	Dalmations
182:	Dalmations
183:	Dalmations
184:	Dalmations
185:	Dalmations
186:	Dalmations
187:	Dalmations
188:	Dalmations
189:	Dalmations
190:	Dalmations
191:	Dalmations
192:	Dalmations
193:	Dalmations
194:	Dalmations
195:	Dalmations
196:	Dalmations
197:	Dalmations
198:	Dalmations
199:	Dalmations
200:	Dalmations
201:	Dalmations
202:	Dalmations
203:	Dalmations
204:	Dalmations
205:	Dalmations
206:	Dalmations
207:	Dalmations
208:	Dalmations
209:	Dalmations
210:	Dalmations
211:	Dalmations
212:	Dalmations
213:	Dalmations
214:	Dalmations
215:	Dalmations
216:	Dalmations
217:	Dalmations
218:	Dalmations
219:	Dalmations
220:	Dalmations
221:	Dalmations
222:	Dalmations
223:	Dalmations
224:	Dalmations
225:	Dalmations
226:	Dalmations
227:	Dalmations
228:	Dalmations
229:	Dalmations
230:	Dalmations
231:	Dalmations
232:	Dalmations
233:	Dalmations
234:	Problems
235:	Problems
236:	Problems
237:	Problems
238:	Problems
239:	Problems
240:	Problems
241:	Problems
242:	Problems
243:	Problems
244:	Problems
245:	Problems
246:	Problems
247:	Problems
248:	Problems
249:	Problems
250:	Problems
251:	Problems
252:	Problems
253:	Problems
254:	Problems
255:	Problems
256:	Problems
257:	Problems
258:	Problems
259:	Problems
260:	Problems
261:	Problems
262:	Problems
263:	Problems
264:	Problems
265:	Problems
266:	Problems
267:	Problems
268:	Problems
269:	Problems
270:	Problems
271:	Problems
272:	Problems
273:	Problems
274:	Problems
275:	Problems
276:	Problems
277:	Problems
278:	Problems
279:	Problems
280:	Problems
281:	Problems
282:	Problems
283:	Problems
284:	Problems
285:	Problems
286:	Problems
287:	Problems
288:	Problems
289:	Problems
290:	Problems
291:	Problems
292:	Problems
293:	Problems
294:	Problems
295:	Problems
296:	Problems
297:	Problems
298:	Problems
299:	Problems
300:	Problems
301:	Problems
302:	Problems
303:	Problems
304:	Problems
305:	Problems
306:	Problems
307:	Problems
308:	Problems
309:	Problems
310:	Problems
311:	Problems
312:	Problems
313:	Problems
314:	Problems
315:	Problems
316:	Problems
317:	Problems
318:	Problems
319:	Problems
320:	Problems
321:	Problems
322:	Problems
323:	Problems
324:	Problems
325:	Problems
326:	Problems
327:	Problems
328:	Problems
329:	Problems
330:	Problems
331:	Problems
332:	Problems
333:	Number is 2
334:	~~~ SIMULATED {Message} DIALOG: Hello ~~~ 
335:	~~~ SIMULATED {Message} DIALOG: Good-bye ~~~ { title: Learning Methods },
336:	Completed Learning Methods!
337:	Start learning arrays...
338:	333
339:	666
340:	666
341:	0
342:	0
343:	0
344:	0
345:	0
346:	0
347:	0
348:	0
349:	0
350:	0
351:	0
352:	0
353:	0
354:	0
355:	0
356:	0
357:	0
358:	0
359:	0
360:	0
361:	0
362:	0
363:	0
364:	0
365:	0
366:	0
367:	0
368:	0
369:	0
370:	0
371:	0
372:	0
373:	0
374:	0
375:	0
376:	0
377:	0
378:	0
379:	0
380:	0
381:	0
382:	0
383:	0
384:	0
385:	0
386:	0
387:	0
388:	0
389:	0
390:	0
391:	0
392:	0
393:	0
394:	0
395:	0
396:	0
397:	0
398:	0
399:	0
400:	0
401:	0
402:	0
403:	0
404:	0
405:	0
406:	0
407:	0
408:	0
409:	0
410:	0
411:	0
412:	0
413:	0
414:	0
415:	0
416:	0
417:	0
418:	0
419:	0
420:	0
421:	0
422:	0
423:	0
424:	0
425:	0
426:	0
427:	0
428:	0
429:	0
430:	0
431:	0
432:	0
433:	0
434:	0
435:	0
436:	0
437:	0
438:	0
439:	333
440:	0 = 666
441:	1 = 0
442:	2 = 0
443:	3 = 0
444:	4 = 0
445:	5 = 0
446:	6 = 0
447:	7 = 0
448:	8 = 0
449:	9 = 0
450:	10 = 0
451:	11 = 0
452:	12 = 0
453:	13 = 0
454:	14 = 0
455:	15 = 0
456:	16 = 0
457:	17 = 0
458:	18 = 0
459:	19 = 0
460:	20 = 0
461:	21 = 0
462:	22 = 0
463:	23 = 0
464:	24 = 0
465:	25 = 0
466:	26 = 0
467:	27 = 0
468:	28 = 0
469:	29 = 0
470:	30 = 0
471:	31 = 0
472:	32 = 0
473:	33 = 0
474:	34 = 0
475:	35 = 0
476:	36 = 0
477:	37 = 0
478:	38 = 0
479:	39 = 0
480:	40 = 0
481:	41 = 0
482:	42 = 0
483:	43 = 0
484:	44 = 0
485:	45 = 0
486:	46 = 0
487:	47 = 0
488:	48 = 0
489:	49 = 0
490:	50 = 0
491:	51 = 0
492:	52 = 0
493:	53 = 0
494:	54 = 0
495:	55 = 0
496:	56 = 0
497:	57 = 0
498:	58 = 0
499:	59 = 0
500:	60 = 0
501:	61 = 0
502:	62 = 0
503:	63 = 0
504:	64 = 0
505:	65 = 0
506:	66 = 0
507:	67 = 0
508:	68 = 0
509:	69 = 0
510:	70 = 0
511:	71 = 0
512:	72 = 0
513:	73 = 0
514:	74 = 0
515:	75 = 0
516:	76 = 0
517:	77 = 0
518:	78 = 0
519:	79 = 0
520:	80 = 0
521:	81 = 0
522:	82 = 0
523:	83 = 0
524:	84 = 0
525:	85 = 0
526:	86 = 0
527:	87 = 0
528:	88 = 0
529:	89 = 0
530:	90 = 0
531:	91 = 0
532:	92 = 0
533:	93 = 0
534:	94 = 0
535:	95 = 0
536:	96 = 0
537:	97 = 0
538:	98 = 0
539:	99 = 333
540:	~~~ SIMULATED {Message} DIALOG: [25,250,2,-25,0,] ~~~ 
541:	~~~ SIMULATED {Message} DIALOG: [666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ... (line shortened) ...
542:	~~~ SIMULATED {Message} DIALOG: [0,0,0,1,2,] ~~~ 
543:	~~~ SIMULATED {Message} DIALOG: [9,9,8,4,10,6,10,7,3,5,7,2,6,4,3,8,6,2,8,3,4,1,5,4,3,8,5,10,10,3,7,4,4,7,7,2,6,2,5,7,1,5,1,10,1,9,6,7,5,1,] ~~~ 
544:	Random character was w
545:	z p # p : x ! W / G > F ^ < O g Z _ 8 9 w H m ^ ( G [ ~ w j 
1 < { L e @ 2 V C G E e E K % r ? < d _ c L q P ~ 4 ~ Y n n 
i , g s ` R + / o C * + K , Z e j L ) t T < $ X j & y A b : 
: S b q r " z E 4 ... (line shortened) ...
546:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
547:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
548:	X O X 
O X O 
X O X 

549:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
550:	Completed learning arrays!
551:	Start Learning classes...
552:	Complete Learning classes
553:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics1 ~~~ 
554:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics2 ~~~ 
555:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics3 ~~~ 
556:	Computer Science 40S Course:...............................................................
557:	Recursion test started...
558:	Recursive factorials............................
559:	-1 factorial = 1
560:	0 factorial = 1
561:	1 factorial = 1
562:	2 factorial = 2
563:	3 factorial = 6
564:	4 factorial = 24
565:	5 factorial = 120
566:	6 factorial = 720
567:	7 factorial = 5040
568:	8 factorial = 40320
569:	9 factorial = 362880
570:	10 factorial = 3628800
571:	11 factorial = 39916800
572:	12 factorial = 479001600
573:	13 factorial = 6227020800
574:	14 factorial = 87178291200
575:	15 factorial = 1307674368000
576:	16 factorial = 20922789888000
577:	17 factorial = 355687428096000
578:	18 factorial = 6402373705728000
579:	19 factorial = 121645100408832000
580:	20 factorial = 2432902008176640000
581:	Recursive powers................................
582:	-5 to the exponent -5 = -3.2E-4
583:	-4 to the exponent -5 = -9.765625E-4
584:	-3 to the exponent -5 = -0.00411522633744856
585:	-2 to the exponent -5 = -0.03125
586:	-1 to the exponent -5 = -1.0
587:	0 to the exponent -5 = 4.9E-324
588:	1 to the exponent -5 = 1.0
589:	2 to the exponent -5 = 0.03125
590:	3 to the exponent -5 = 0.00411522633744856
591:	4 to the exponent -5 = 9.765625E-4
592:	5 to the exponent -5 = 3.2E-4
593:	6 to the exponent -5 = 1.286008230452675E-4
594:	7 to the exponent -5 = 5.9499018266198606E-5
595:	8 to the exponent -5 = 3.0517578125E-5
596:	9 to the exponent -5 = 1.6935087808430286E-5
597:	10 to the exponent -5 = 1.0E-5
598:	-5 to the exponent -4 = 0.0016
599:	-4 to the exponent -4 = 0.00390625
600:	-3 to the exponent -4 = 0.012345679012345678
601:	-2 to the exponent -4 = 0.0625
602:	-1 to the exponent -4 = 1.0
603:	0 to the exponent -4 = 4.9E-324
604:	1 to the exponent -4 = 1.0
605:	2 to the exponent -4 = 0.0625
606:	3 to the exponent -4 = 0.012345679012345678
607:	4 to the exponent -4 = 0.00390625
608:	5 to the exponent -4 = 0.0016
609:	6 to the exponent -4 = 7.716049382716049E-4
610:	7 to the exponent -4 = 4.1649312786339027E-4
611:	8 to the exponent -4 = 2.44140625E-4
612:	9 to the exponent -4 = 1.5241579027587258E-4
613:	10 to the exponent -4 = 1.0E-4
614:	-5 to the exponent -3 = -0.008
615:	-4 to the exponent -3 = -0.015625
616:	-3 to the exponent -3 = -0.037037037037037035
617:	-2 to the exponent -3 = -0.125
618:	-1 to the exponent -3 = -1.0
619:	0 to the exponent -3 = 4.9E-324
620:	1 to the exponent -3 = 1.0
621:	2 to the exponent -3 = 0.125
622:	3 to the exponent -3 = 0.037037037037037035
623:	4 to the exponent -3 = 0.015625
624:	5 to the exponent -3 = 0.008
625:	6 to the exponent -3 = 0.004629629629629629
626:	7 to the exponent -3 = 0.0029154518950437317
627:	8 to the exponent -3 = 0.001953125
628:	9 to the exponent -3 = 0.0013717421124828531
629:	10 to the exponent -3 = 0.001
630:	-5 to the exponent -2 = 0.04
631:	-4 to the exponent -2 = 0.0625
632:	-3 to the exponent -2 = 0.1111111111111111
633:	-2 to the exponent -2 = 0.25
634:	-1 to the exponent -2 = 1.0
635:	0 to the exponent -2 = 4.9E-324
636:	1 to the exponent -2 = 1.0
637:	2 to the exponent -2 = 0.25
638:	3 to the exponent -2 = 0.1111111111111111
639:	4 to the exponent -2 = 0.0625
640:	5 to the exponent -2 = 0.04
641:	6 to the exponent -2 = 0.027777777777777776
642:	7 to the exponent -2 = 0.02040816326530612
643:	8 to the exponent -2 = 0.015625
644:	9 to the exponent -2 = 0.012345679012345678
645:	10 to the exponent -2 = 0.01
646:	-5 to the exponent -1 = -0.2
647:	-4 to the exponent -1 = -0.25
648:	-3 to the exponent -1 = -0.3333333333333333
649:	-2 to the exponent -1 = -0.5
650:	-1 to the exponent -1 = -1.0
651:	0 to the exponent -1 = 4.9E-324
652:	1 to the exponent -1 = 1.0
653:	2 to the exponent -1 = 0.5
654:	3 to the exponent -1 = 0.3333333333333333
655:	4 to the exponent -1 = 0.25
656:	5 to the exponent -1 = 0.2
657:	6 to the exponent -1 = 0.16666666666666666
658:	7 to the exponent -1 = 0.14285714285714285
659:	8 to the exponent -1 = 0.125
660:	9 to the exponent -1 = 0.1111111111111111
661:	10 to the exponent -1 = 0.1
662:	-5 to the exponent 0 = 1.0
663:	-4 to the exponent 0 = 1.0
664:	-3 to the exponent 0 = 1.0
665:	-2 to the exponent 0 = 1.0
666:	-1 to the exponent 0 = 1.0
667:	0 to the exponent 0 = 1.0
668:	1 to the exponent 0 = 1.0
669:	2 to the exponent 0 = 1.0
670:	3 to the exponent 0 = 1.0
671:	4 to the exponent 0 = 1.0
672:	5 to the exponent 0 = 1.0
673:	6 to the exponent 0 = 1.0
674:	7 to the exponent 0 = 1.0
675:	8 to the exponent 0 = 1.0
676:	9 to the exponent 0 = 1.0
677:	10 to the exponent 0 = 1.0
678:	-5 to the exponent 1 = -5.0
679:	-4 to the exponent 1 = -4.0
680:	-3 to the exponent 1 = -3.0
681:	-2 to the exponent 1 = -2.0
682:	-1 to the exponent 1 = -1.0
683:	0 to the exponent 1 = 0.0
684:	1 to the exponent 1 = 1.0
685:	2 to the exponent 1 = 2.0
686:	3 to the exponent 1 = 3.0
687:	4 to the exponent 1 = 4.0
688:	5 to the exponent 1 = 5.0
689:	6 to the exponent 1 = 6.0
690:	7 to the exponent 1 = 7.0
691:	8 to the exponent 1 = 8.0
692:	9 to the exponent 1 = 9.0
693:	10 to the exponent 1 = 10.0
694:	-5 to the exponent 2 = 25.0
695:	-4 to the exponent 2 = 16.0
696:	-3 to the exponent 2 = 9.0
697:	-2 to the exponent 2 = 4.0
698:	-1 to the exponent 2 = 1.0
699:	0 to the exponent 2 = 0.0
700:	1 to the exponent 2 = 1.0
701:	2 to the exponent 2 = 4.0
702:	3 to the exponent 2 = 9.0
703:	4 to the exponent 2 = 16.0
704:	5 to the exponent 2 = 25.0
705:	6 to the exponent 2 = 36.0
706:	7 to the exponent 2 = 49.0
707:	8 to the exponent 2 = 64.0
708:	9 to the exponent 2 = 81.0
709:	10 to the exponent 2 = 100.0
710:	-5 to the exponent 3 = -125.0
711:	-4 to the exponent 3 = -64.0
712:	-3 to the exponent 3 = -27.0
713:	-2 to the exponent 3 = -8.0
714:	-1 to the exponent 3 = -1.0
715:	0 to the exponent 3 = 0.0
716:	1 to the exponent 3 = 1.0
717:	2 to the exponent 3 = 8.0
718:	3 to the exponent 3 = 27.0
719:	4 to the exponent 3 = 64.0
720:	5 to the exponent 3 = 125.0
721:	6 to the exponent 3 = 216.0
722:	7 to the exponent 3 = 343.0
723:	8 to the exponent 3 = 512.0
724:	9 to the exponent 3 = 729.0
725:	10 to the exponent 3 = 1000.0
726:	-5 to the exponent 4 = 625.0
727:	-4 to the exponent 4 = 256.0
728:	-3 to the exponent 4 = 81.0
729:	-2 to the exponent 4 = 16.0
730:	-1 to the exponent 4 = 1.0
731:	0 to the exponent 4 = 0.0
732:	1 to the exponent 4 = 1.0
733:	2 to the exponent 4 = 16.0
734:	3 to the exponent 4 = 81.0
735:	4 to the exponent 4 = 256.0
736:	5 to the exponent 4 = 625.0
737:	6 to the exponent 4 = 1296.0
738:	7 to the exponent 4 = 2401.0
739:	8 to the exponent 4 = 4096.0
740:	9 to the exponent 4 = 6561.0
741:	10 to the exponent 4 = 10000.0
742:	-5 to the exponent 5 = -3125.0
743:	-4 to the exponent 5 = -1024.0
744:	-3 to the exponent 5 = -243.0
745:	-2 to the exponent 5 = -32.0
746:	-1 to the exponent 5 = -1.0
747:	0 to the exponent 5 = 0.0
748:	1 to the exponent 5 = 1.0
749:	2 to the exponent 5 = 32.0
750:	3 to the exponent 5 = 243.0
751:	4 to the exponent 5 = 1024.0
752:	5 to the exponent 5 = 3125.0
753:	6 to the exponent 5 = 7776.0
754:	7 to the exponent 5 = 16807.0
755:	8 to the exponent 5 = 32768.0
756:	9 to the exponent 5 = 59049.0
757:	10 to the exponent 5 = 100000.0
758:	-5 to the exponent 6 = 15625.0
759:	-4 to the exponent 6 = 4096.0
760:	-3 to the exponent 6 = 729.0
761:	-2 to the exponent 6 = 64.0
762:	-1 to the exponent 6 = 1.0
763:	0 to the exponent 6 = 0.0
764:	1 to the exponent 6 = 1.0
765:	2 to the exponent 6 = 64.0
766:	3 to the exponent 6 = 729.0
767:	4 to the exponent 6 = 4096.0
768:	5 to the exponent 6 = 15625.0
769:	6 to the exponent 6 = 46656.0
770:	7 to the exponent 6 = 117649.0
771:	8 to the exponent 6 = 262144.0
772:	9 to the exponent 6 = 531441.0
773:	10 to the exponent 6 = 1000000.0
774:	-5 to the exponent 7 = -78125.0
775:	-4 to the exponent 7 = -16384.0
776:	-3 to the exponent 7 = -2187.0
777:	-2 to the exponent 7 = -128.0
778:	-1 to the exponent 7 = -1.0
779:	0 to the exponent 7 = 0.0
780:	1 to the exponent 7 = 1.0
781:	2 to the exponent 7 = 128.0
782:	3 to the exponent 7 = 2187.0
783:	4 to the exponent 7 = 16384.0
784:	5 to the exponent 7 = 78125.0
785:	6 to the exponent 7 = 279936.0
786:	7 to the exponent 7 = 823543.0
787:	8 to the exponent 7 = 2097152.0
788:	9 to the exponent 7 = 4782969.0
789:	10 to the exponent 7 = 1.0E7
790:	-5 to the exponent 8 = 390625.0
791:	-4 to the exponent 8 = 65536.0
792:	-3 to the exponent 8 = 6561.0
793:	-2 to the exponent 8 = 256.0
794:	-1 to the exponent 8 = 1.0
795:	0 to the exponent 8 = 0.0
796:	1 to the exponent 8 = 1.0
797:	2 to the exponent 8 = 256.0
798:	3 to the exponent 8 = 6561.0
799:	4 to the exponent 8 = 65536.0
800:	5 to the exponent 8 = 390625.0
801:	6 to the exponent 8 = 1679616.0
802:	7 to the exponent 8 = 5764801.0
803:	8 to the exponent 8 = 1.6777216E7
804:	9 to the exponent 8 = 4.3046721E7
805:	10 to the exponent 8 = 1.0E8
806:	-5 to the exponent 9 = -1953125.0
807:	-4 to the exponent 9 = -262144.0
808:	-3 to the exponent 9 = -19683.0
809:	-2 to the exponent 9 = -512.0
810:	-1 to the exponent 9 = -1.0
811:	0 to the exponent 9 = 0.0
812:	1 to the exponent 9 = 1.0
813:	2 to the exponent 9 = 512.0
814:	3 to the exponent 9 = 19683.0
815:	4 to the exponent 9 = 262144.0
816:	5 to the exponent 9 = 1953125.0
817:	6 to the exponent 9 = 1.0077696E7
818:	7 to the exponent 9 = 4.0353607E7
819:	8 to the exponent 9 = 1.34217728E8
820:	9 to the exponent 9 = 3.87420489E8
821:	10 to the exponent 9 = 1.0E9
822:	-5 to the exponent 10 = 9765625.0
823:	-4 to the exponent 10 = 1048576.0
824:	-3 to the exponent 10 = 59049.0
825:	-2 to the exponent 10 = 1024.0
826:	-1 to the exponent 10 = 1.0
827:	0 to the exponent 10 = 0.0
828:	1 to the exponent 10 = 1.0
829:	2 to the exponent 10 = 1024.0
830:	3 to the exponent 10 = 59049.0
831:	4 to the exponent 10 = 1048576.0
832:	5 to the exponent 10 = 9765625.0
833:	6 to the exponent 10 = 6.0466176E7
834:	7 to the exponent 10 = 2.82475249E8
835:	8 to the exponent 10 = 1.073741824E9
836:	9 to the exponent 10 = 3.486784401E9
837:	10 to the exponent 10 = 1.0E10
838:	Recursion complete!
839:	Advanced Classes Test started...
840:	unidentified is 0 identifies as unidentified
841:	Per Soney is 0 identifies as unidentified
842:	Per Soney is 1 identifies as unidentified
843:	Booooo!
844:	unidentified is 0 identifies as unidentified
845:	I am a student
846:		 Number: 	1
847:		 GPA:    	0.0
848:	Stu Denty is 0 identifies as unidentified
849:	I am a student
850:		 Number: 	1
851:		 GPA:    	0.0
852:	Stu Denty is 0 identifies as unidentified
853:	I am a student
854:		 Number: 	1
855:		 GPA:    	0.3
856:	Stu Denty is 0 identifies as unidentified
857:	I am a student
858:		 Number: 	1
859:		 GPA:    	0.0
860:	Stu Denty is 0 identifies as unidentified
861:	I am a student
862:		 Number: 	1
863:		 GPA:    	3.0002999999999993
864:	Booooo!
865:	I am a student
866:		 Number: 	1
867:		 GPA:    	3.0002999999999993
868:	Stewie Griffin is 2 identifies as cat
869:	I am a student
870:		 Number: 	1
871:		 GPA:    	0.0
872:	Mr. Teachery is 45 identifies as teacher
873:	Mr. Teachery is 45 identifies as teacher
874:	Mr. Teachery is 45 identifies as teacher
875:	Booooo!
876:	I am a student
877:		 Number: 	1
878:		 GPA:    	3.300299999999999
879:	Stewie Griffin is 2 identifies as cat
880:	I am a student
881:		 Number: 	1
882:		 GPA:    	0.3
883:	O1 = java.lang.Object@7fad8c79
884:	O2 = java.lang.Object@71a794e5
885:	O3 = java.lang.Object@71a794e5
886:	Person  as string = Person
887:	Student as string = Student: Person
888:	Teacher as string = Teacher: Person
889:	String  as string = squirrel
890:	JOptionPane as string = utility.io.JOptionPane@76329302
891:	O2==O3
892:	P1==P2
893:	P2==P3
894:	P1==P3
895:	P2==P3
896:	Person is Person
897:	Clone  is Person
898:	Clone is ==
899:	S1 total = 2
900:	S2 total = 2
901:	S3 total = 4
902:	S4 total = 4
903:	S3 total = 9
904:	S4 total = 9
905:	Boom!!!
906:	Boom!!!
907:	Boom!!!
908:	Boom!!!
909:	Boom!!!
910:	Boom!!!
911:	Doctor: Person
912:	DiskJockey: Person
913:	MrWachs: Teacher: Person
914:	Piper: HighSchool: Student: Person
915:	Husky: HighSchool: Student: Person
916:	Athlete: Husky: HighSchool: Student: Person
917:	Meeting is about to begin...
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	 Student ->	Student: Person
	 Person ->	 Student ->	Student: Per ... (line shortened) ...
918:	Grill on the BBQ
919:	Mr. Lawrence Wachs is eating Protein it was Savory
920:	unidentified is eating Apple from Do not eat!
921:	Round 1...
922:	Jock has signed the form!
923:	Round 2...
924:	Jock has scored
925:	Jock has scored
926:	St. Pauls has scored
927:	End of period 2 and the score is 2 for the Jock and 1 for the St. Pauls
928:	Jock SLAPS St. Pauls
929:	Round 3...
930:	Jock has scored
931:	Jock has scored
932:	St. Pauls has scored
933:	End of period 3 and the score is 4 for the Jock and 2 for the St. Pauls
934:	Round 4...
935:	Jock has scored
936:	Jock has scored
937:	St. Pauls has scored
938:	End of period 4 and the score is 6 for the Jock and 3 for the St. Pauls
939:	Hard core ironing of clothes!
940:	Jock wins!
941:	Grill on the BBQ
942:	Jock is eating Protein it was Savory
943:	Class name: Boolean, Hash Code: 1231, To String: true
944:	Class name: Integer, Hash Code: 0, To String: 0
945:	Class name: Double, Hash Code: 300063655, To String: 3.14
946:	Class name: Character, Hash Code: 97, To String: a
947:	Class name: String, Hash Code: 3556498, To String: test
948:	Class name: Athlete, Hash Code: 928466577, To String: Athlete: Husky: HighSchool: Student: Person
949:	Class name: JOptionPane, Hash Code: 624271064, To String: utility.io.JOptionPane@25359ed8
950:	Class name: Object, Hash Code: 564742142, To String: java.lang.Object@21a947fe
951:	true
952:	0
953:	3.14
954:	a
955:	test
956:	Athlete: Husky: HighSchool: Student: Person
957:	Class name: Boolean, Hash Code: 1231, To String: true
958:	Class name: Integer, Hash Code: 0, To String: 0
959:	Class name: Double, Hash Code: 300063655, To String: 3.14
960:	Class name: Character, Hash Code: 97, To String: a
961:	Class name: String, Hash Code: 3556498, To String: test
962:	Class name: Athlete, Hash Code: 928466577, To String: Athlete: Husky: HighSchool: Student: Person
963:	Home Owner:
964:	Mr. Lawrence Wachs
965:	And the contents...
966:	testing.prerequisite.cs40s.advancedclasses.Meeting@1445d7f
967:	Mr. Lawrence Wachs is eating Apple from Do not eat!
968:	Grill on the BBQ
969:	Mr. Lawrence Wachs is eating Protein it was Savory
970:	Advanced Classes Test complete!
971:	Collections testing begins...
972:	Testing Node constructors....................
973:	Testing Node toString()......................
974:	Node a = null
975:	Node b = Sass
976:	Node c = Pros
977:	Node d = Joes
978:	Testing Node clone().........................
979:	Node e = null
980:	Node f = Sass
981:	Node g = Pros
982:	Node h = Joes
983:	Testing Node equal().........................
984:	Node a == b? -> false
985:	Node b == c? -> false
986:	Node c == d? -> false
987:	Node d == d? -> true
988:	Node e == a? -> false
989:	Node f == b? -> true
990:	Node g == c? -> true
991:	Node h == d? -> true
992:	Testing Node finalize()......................
993:	Node a = null
994:	Node b = Sass
995:	Node c = Pros
996:	Node d = Joes
997:	Node e = null
998:	Node f = Sass
999:	Node g = Pros
1000:	Node h = Joes
1001:	Node a = null
1002:	Node b = null
1003:	Node c = null
1004:	Node d = null
1005:	Node e = null
1006:	Node f = null
1007:	Node g = null
1008:	Node h = null
1009:	Testing default LinkedList constructor.......
1010:	Testing toString, empty, size methods........
1011:	L1 toString -> Empty LinkedList
1012:	L2 toString -> Empty LinkedList
1013:	L1 empty? -> true
1014:	L2 empty? -> true
1015:	L1 size -> 0
1016:	L2 size -> 0
1017:	Test add (first to the back) of the list.....
1018:	addBack -> true	Linked List 	[51]
1019:	addBack -> true	Linked List 	[51,50]
1020:	addBack -> true	Linked List 	[51,50,-50]
1021:	addBack -> true	Linked List 	[51,50,-50,55]
1022:	addBack -> false	Linked List 	[51,50,-50,55]
1023:	Test add (second to the front) of the list...
1024:	addFront -> true	Linked List 	[80,51,50,-50,55]
1025:	addFront -> true	Linked List 	[81,80,51,50,-50,55]
1026:	addFront -> true	Linked List 	[-80,81,80,51,50,-50,55]
1027:	addFront -> true	Linked List 	[88,-80,81,80,51,50,-50,55]
1028:	addFront -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1029:	Re-testing empty, size methods...............
1030:	L1 empty? -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1031:	L2 empty? -> true	Empty LinkedList
1032:	L1 size -> 8	Linked List 	[88,-80,81,80,51,50,-50,55]
1033:	L2 size -> 0	Empty LinkedList
1034:	Test get method..............................
1035:	Getting -1 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1036:	Getting 0 = 88	Linked List 	[88,-80,81,80,51,50,-50,55]
1037:	Getting 1 = -80	Linked List 	[88,-80,81,80,51,50,-50,55]
1038:	Getting 2 = 81	Linked List 	[88,-80,81,80,51,50,-50,55]
1039:	Getting 3 = 80	Linked List 	[88,-80,81,80,51,50,-50,55]
1040:	Getting 4 = 51	Linked List 	[88,-80,81,80,51,50,-50,55]
1041:	Getting 5 = 50	Linked List 	[88,-80,81,80,51,50,-50,55]
1042:	Getting 6 = -50	Linked List 	[88,-80,81,80,51,50,-50,55]
1043:	Getting 7 = 55	Linked List 	[88,-80,81,80,51,50,-50,55]
1044:	Getting 8 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1045:	Test set method..............................
1046:	Setting -1 to 9 -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1047:	Setting 0 to 10 -> true	Linked List 	[10,-80,81,80,51,50,-50,55]
1048:	Setting 1 to 11 -> true	Linked List 	[10,11,81,80,51,50,-50,55]
1049:	Setting 2 to 12 -> true	Linked List 	[10,11,12,80,51,50,-50,55]
1050:	Setting 3 to 13 -> true	Linked List 	[10,11,12,13,51,50,-50,55]
1051:	Setting 4 to 14 -> true	Linked List 	[10,11,12,13,14,50,-50,55]
1052:	Setting 5 to 15 -> true	Linked List 	[10,11,12,13,14,15,-50,55]
1053:	Setting 6 to 16 -> true	Linked List 	[10,11,12,13,14,15,16,55]
1054:	Setting 7 to 17 -> true	Linked List 	[10,11,12,13,14,15,16,17]
1055:	Setting 8 to 18 -> false	Linked List 	[10,11,12,13,14,15,16,17]
1056:	Setting 0 to null -> false	Linked List 	[10,11,12,13,14,15,16,17]
1057:	Test equals method...........................
1058:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1059:	List 2 = Empty LinkedList
1060:	List1 == List2 -> false
1061:	Test clone method............................
1062:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1063:	List 2 = Linked List 	[10,11,12,13,14,15,16,17]
1064:	Re-testing equals...
1065:	List1 == List2 -> true
1066:	Test addAfter method.........................
1067:	Adding value 	99	 after index 	-1	 result 	false	Linked List 	[10,11,12,13,14,15,16,17]
1068:	Adding value 	100	 after index 	0	 result 	true	Linked List 	[10,100,11,12,13,14,15,16,17]
1069:	Adding value 	101	 after index 	1	 result 	true	Linked List 	[10,100,101,11,12,13,14,15,16,17]
1070:	Adding value 	102	 after index 	2	 result 	true	Linked List 	[10,100,101,102,11,12,13,14,15,16,17]
1071:	Adding value 	103	 after index 	3	 result 	true	Linked List 	[10,100,101,102,103,11,12,13,14,15,16,17]
1072:	Adding value 	104	 after index 	4	 result 	true	Linked List 	[10,100,101,102,103,104,11,12,13,14,15,16,17]
1073:	Adding value 	105	 after index 	5	 result 	true	Linked List 	[10,100,101,102,103,104,105,11,12,13,14,15,16,17]
1074:	Adding value 	106	 after index 	6	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,11,12,13,14,15,16,17]
1075:	Adding value 	107	 after index 	7	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1076:	Test other edge case
1077:	Adding value 	10	 after index 	17	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1078:	Test addBefore method.........................
1079:	Adding value 	99	 before index 	-1	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1080:	Adding value 	100	 before index 	0	 result 	true	Linked List 	[100,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1081:	Adding value 	101	 before index 	1	 result 	true	Linked List 	[100,101,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1082:	Adding value 	102	 before index 	2	 result 	true	Linked List 	[100,101,102,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1083:	Adding value 	103	 before index 	3	 result 	true	Linked List 	[100,101,102,103,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1084:	Adding value 	104	 before index 	4	 result 	true	Linked List 	[100,101,102,103,104,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1085:	Adding value 	105	 before index 	5	 result 	true	Linked List 	[100,101,102,103,104,105,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1086:	Adding value 	106	 before index 	6	 result 	true	Linked List 	[100,101,102,103,104,105,106,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1087:	Adding value 	107	 before index 	7	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1088:	Adding value 	108	 before index 	8	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1089:	Adding value 	109	 before index 	9	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1090:	Adding value 	110	 before index 	10	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1091:	Adding value 	111	 before index 	11	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1092:	Adding value 	112	 before index 	12	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1093:	Adding value 	113	 before index 	13	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1094:	Adding value 	114	 before index 	14	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1095:	Adding value 	115	 before index 	15	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1096:	Test other edge case
1097:	Adding value 	10	 before index 	33	 result 	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1098:	Test front and back methods..................
1099:	Front of list 1 = 100	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1100:	Front of list 2 = 10	Linked List 	[10,11,12,13,14,15,16,17]
1101:	Back of list 1 = 17	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1102:	Back of list 2 = 17	Linked List 	[10,11,12,13,14,15,16,17]
1103:	Clear out list 2
1104:	Front of list 2 = null	Empty LinkedList
1105:	Back of list 2 = null	Empty LinkedList
1106:	Cloning list 2 from list 1
1107:	Test removeFront method......................
1108:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1109:	Linked List 	[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1110:	Linked List 	[102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1111:	Linked List 	[103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1112:	Linked List 	[104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1113:	Linked List 	[105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1114:	Linked List 	[106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1115:	Linked List 	[107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1116:	Linked List 	[108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	108
1117:	Linked List 	[109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	109
1118:	Linked List 	[110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	110
1119:	Linked List 	[111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	111
1120:	Linked List 	[112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	112
1121:	Linked List 	[113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	113
1122:	Linked List 	[114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	114
1123:	Linked List 	[115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	115
1124:	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	10
1125:	Linked List 	[100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1126:	Linked List 	[101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1127:	Linked List 	[102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1128:	Linked List 	[103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1129:	Linked List 	[104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1130:	Linked List 	[105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1131:	Linked List 	[106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1132:	Linked List 	[107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1133:	Linked List 	[11,12,13,14,15,16,17]	Removing list 1 front = 	11
1134:	Linked List 	[12,13,14,15,16,17]	Removing list 1 front = 	12
1135:	Linked List 	[13,14,15,16,17]	Removing list 1 front = 	13
1136:	Linked List 	[14,15,16,17]	Removing list 1 front = 	14
1137:	Linked List 	[15,16,17]	Removing list 1 front = 	15
1138:	Linked List 	[16,17]	Removing list 1 front = 	16
1139:	Linked List 	[17]	Removing list 1 front = 	17
1140:	Empty LinkedList	Removing list 1 front = 	null
1141:	Cloning list 1 from list 2
1142:	Test removeBack method.......................
1143:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 2 back = 	17
1144:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing list 2 back = 	16
1145:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing list 2 back = 	15
1146:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing list 2 back = 	14
1147:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing list 2 back = 	13
1148:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing list 2 back = 	12
1149:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing list 2 back = 	11
1150:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1151:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing list 2 back = 	106
1152:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing list 2 back = 	105
1153:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing list 2 back = 	104
1154:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing list 2 back = 	103
1155:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing list 2 back = 	102
1156:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing list 2 back = 	101
1157:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing list 2 back = 	100
1158:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing list 2 back = 	10
1159:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing list 2 back = 	115
1160:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing list 2 back = 	114
1161:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing list 2 back = 	113
1162:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing list 2 back = 	112
1163:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing list 2 back = 	111
1164:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing list 2 back = 	110
1165:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing list 2 back = 	109
1166:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing list 2 back = 	108
1167:	Linked List 	[100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1168:	Linked List 	[100,101,102,103,104,105,106]	Removing list 2 back = 	106
1169:	Linked List 	[100,101,102,103,104,105]	Removing list 2 back = 	105
1170:	Linked List 	[100,101,102,103,104]	Removing list 2 back = 	104
1171:	Linked List 	[100,101,102,103]	Removing list 2 back = 	103
1172:	Linked List 	[100,101,102]	Removing list 2 back = 	102
1173:	Linked List 	[100,101]	Removing list 2 back = 	101
1174:	Linked List 	[100]	Removing list 2 back = 	100
1175:	Empty LinkedList	Removing list 2 back = 	null
1176:	Cloning list 2 from list 1
1177:	Test remove method...........................
1178:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	33	 removed: 	null
1179:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	32	 removed: 	null
1180:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	31	 removed: 	17
1181:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing from list 1 from index: 	30	 removed: 	16
1182:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing from list 1 from index: 	29	 removed: 	15
1183:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing from list 1 from index: 	28	 removed: 	14
1184:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing from list 1 from index: 	27	 removed: 	13
1185:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing from list 1 from index: 	26	 removed: 	12
1186:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing from list 1 from index: 	25	 removed: 	11
1187:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	24	 removed: 	107
1188:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing from list 1 from index: 	23	 removed: 	106
1189:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing from list 1 from index: 	22	 removed: 	105
1190:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing from list 1 from index: 	21	 removed: 	104
1191:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing from list 1 from index: 	20	 removed: 	103
1192:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing from list 1 from index: 	19	 removed: 	102
1193:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing from list 1 from index: 	18	 removed: 	101
1194:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing from list 1 from index: 	17	 removed: 	100
1195:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing from list 1 from index: 	16	 removed: 	10
1196:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing from list 1 from index: 	15	 removed: 	115
1197:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing from list 1 from index: 	14	 removed: 	114
1198:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing from list 1 from index: 	13	 removed: 	113
1199:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing from list 1 from index: 	12	 removed: 	112
1200:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing from list 1 from index: 	11	 removed: 	111
1201:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing from list 1 from index: 	10	 removed: 	110
1202:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing from list 1 from index: 	9	 removed: 	109
1203:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing from list 1 from index: 	8	 removed: 	108
1204:	Linked List 	[100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	7	 removed: 	107
1205:	Linked List 	[100,101,102,103,104,105,106]	Removing from list 1 from index: 	6	 removed: 	106
1206:	Linked List 	[100,101,102,103,104,105]	Removing from list 1 from index: 	5	 removed: 	105
1207:	Linked List 	[100,101,102,103,104]	Removing from list 1 from index: 	4	 removed: 	104
1208:	Linked List 	[100,101,102,103]	Removing from list 1 from index: 	3	 removed: 	103
1209:	Linked List 	[100,101,102]	Removing from list 1 from index: 	2	 removed: 	102
1210:	Linked List 	[100,101]	Removing from list 1 from index: 	1	 removed: 	101
1211:	Linked List 	[100]	Removing from list 1 from index: 	0	 removed: 	100
1212:	Empty LinkedList	Removing from list 1 from index: 	-1	 removed: 	null
1213:	Test contains method.........................
1214:	List 1 (empty) contains 10 = false	Empty LinkedList
1215:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1216:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1217:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1218:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1219:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1220:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1221:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1222:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1223:	List 2 contains 	108	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1224:	List 2 contains 	109	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1225:	List 2 contains 	110	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1226:	List 2 contains 	111	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1227:	List 2 contains 	112	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1228:	List 2 contains 	113	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1229:	List 2 contains 	114	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1230:	List 2 contains 	115	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1231:	List 2 contains 	10	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1232:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1233:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1234:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1235:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1236:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1237:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1238:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1239:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1240:	List 2 contains 	11	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1241:	List 2 contains 	12	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1242:	List 2 contains 	13	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1243:	List 2 contains 	14	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1244:	List 2 contains 	15	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1245:	List 2 contains 	16	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1246:	List 2 contains 	17	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1247:	List 2 contains 	1000	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1248:	Resetting list 1 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1249:	Test firstIndexOf and lastIndexOf methods....
1250:	First index of 5: 	0
1251:	Last  index of 5: 	7
1252:	First index of 7: 	2
1253:	Last  index of 7: 	9
1254:	First index of 8: 	3
1255:	Last  index of 8: 	3
1256:	First index of 9: 	-1
1257:	Last  index of 9: 	-1
1258:	Test numberOf method.........................
1259:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1260:	Number of 5: 	3
1261:	Number of 8: 	1
1262:	Number of 9: 	0
1263:	Test allIndices method.......................
1264:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1265:	Array -> indices 5: 	[0, 4, 7]
1266:	Array -> indices 8: 	[3]
1267:	Array -> indices 9: 	null
1268:	Cloning list 2 from list 1
1269:	Test remove method...........................
1270:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1271:	Removing 5: 	true	Linked List 	[6,7,8,5,6,7,5,6,7]
1272:	Removing 8: 	true	Linked List 	[6,7,5,6,7,5,6,7]
1273:	Removing 9: 	false	Linked List 	[6,7,5,6,7,5,6,7]
1274:	Test removeLast method.......................
1275:	Linked List 	[6,7,5,6,7,5,6,7]
1276:	Removing 5: 	true	Linked List 	[6,7,5,6,7,6,7]
1277:	Removing 8: 	false	Linked List 	[6,7,5,6,7,6,7]
1278:	Removing 9: 	false	Linked List 	[6,7,5,6,7,6,7]
1279:	Test removeAll method........................
1280:	Linked List 	[6,7,5,6,7,6,7]
1281:	Removing all 5: 	true	Linked List 	[6,7,6,7,6,7]
1282:	Removing all 6: 	true	Linked List 	[7,7,7]
1283:	Removing all 9: 	false	Linked List 	[7,7,7]
1284:	Cloning list 1 from list 2
1285:	Test removeAll array method..................
1286:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1287:	Array: 	[5, 6, 9]
1288:	Removing all from array: Linked List 	[7,8,7,7]
1289:	Test removeAll list method..................
1290:	List 1 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1291:	List 2 	Linked List 	[7,8,7,7]
1292:	Removing all list 2 from list 1...
1293:	List 1 	Linked List 	[5,6,5,6,5,6]
1294:	List 2 	Linked List 	[7,8,7,7]
1295:	Resetting list 1 and 2 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1296:	Test containsAll array method................
1297:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 9]	 is false
1298:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 7, 8]	 is true
1299:	Test containsAll list method.................
1300:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 is true
1301:	Alter list 2...
1302:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[6,7,8,6,7,5,6,45]	 is false
1303:	Test addAll array method.....................
1304:	Linked List 	[6,7,8,6,7,5,6,45]
1305:	Adding array: 	[5, 6, 7, 8]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1306:	Test addAll list method......................
1307:	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1308:	Adding list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8,5,6,7,8,5,6,7,5,6,7]
1309:	Test subList method..........................
1310:	List 1 = 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1311:	Pulling out sub-list from 3 to 6: 	Linked List 	[8,5,6,7]
1312:	Pulling out sub-list from 1 to 1: 	Linked List 	[6]
1313:	Pulling out sub-list from 2 to 10: 	null
1314:	Pulling out sub-list from 0 to 9: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1315:	Test fromArray method........................
1316:	Array is 	[5, 6, 7, 8]
1317:	List is 	Linked List 	[5,6,7,8]
1318:	Test fromLinkedList method...................
1319:	1st List is 	Linked List 	[5,6,7,8]
1320:	2nd List is 	Linked List 	[5,6,7,8]
1321:	Test toArray method..........................
1322:	List 	Linked List 	[5,6,7,8]	 into array 	[5, 6, 7, 8]
1323:	Testing the imported util LinkedList.........
1324:	Imported constructor...
1325:	Imported add:	[0.0]
1326:	Imported add:	[0.0, 1.23]
1327:	Imported addFirst:	[4.56, 0.0, 1.23]
1328:	Imported addLast:	[4.56, 0.0, 1.23, 7.89]
1329:	Imported size:	4
1330:	Imported isEmpty:	false
1331:	Imported get:	0.0
1332:	Imported set:	4.56
1333:	Imported clone:	[0.01, 0.0, 1.23, 7.89]
1334:	Imported equals:	true
1335:	Imported getFirst:	0.01
1336:	Imported getLast:	7.89
1337:	Imported contains:	true
1338:	Imported removeFirst:	0.01
1339:	Imported removeLast:	7.89
1340:	Imported remove:	1.23
1341:	Imported remove:	false
1342:	Testing the imported util ArrayList.........
1343:	Imported ArrayList:	[a, b, c, d, e]
1344:	Using the enhanced for loop with this object...
1345:	a b c d e Using an iterator object...
1346:	a b c d e Collections testing complete!
1347:	Computer Science 42SAP Course:.............................................................
1348:	Computer Science 42SAP curriculum content..................................................
1349:	AP curriculum - Part 1.....................................................................
1350:	Unit 1 - Primitive Types ..................................................................
1351:	1.1 - Why Programming? Why Java?...........................................................
1352:	   1.1.1 - Call System class methods to generate output to the console
1353:	      1.1.1.1 - System.out.print and System.out.println display information on the computer monitor 
1354:	      1.1.1.2 - System.out.println moves the cursor to a new line after  the information has been displayed, while System.out.print does not     
1355:	   1.1.2 - Create string literals
1356:	      1.1.2.1 - A string literal is enclosed in double quotes     
1357:	Add your own example(s) here...
1358:	1.2 - Variables and Data Types.............................................................
1359:	   1.2.1 - Identify the most appropriate data type category for a particular specification
1360:	      1.2.1.1 - A type is a set of values (a domain) and a set of operations on them 
1361:	      1.2.1.2 - Data types can be categorized as either primitive or reference 
1362:	      1.2.1.3 - The primitive data types used in this course define the set of operations for numbers and Boolean values 
1363:	   1.2.1 - Declare variables of the correct types to represent primitive data
1364:	      1.2.1.1 - The three primitive data types used in this course are int, double, and boolean 
1365:	      1.2.1.2 - Each variable has associated memory that is used to hold its value 
1366:	      1.2.1.3 - The memory associated with a variable of a primitive type holds an actual primitive value 
1367:	      1.2.1.4 - When a variable is declared final, its value cannot be changed once it is initialized 
1368:	Add your own example(s) here...
1369:	1.3 - Expressions and Assignment Statements................................................
1370:	   1.3.1 - Evaluate arithmetic expressions in a program code
1371:	      1.3.1.1 - A literal is the source code representation of a fixed value
1372:	      1.3.1.2 - Arithmetic expressions include expressions of type int and double 
1373:	      1.3.1.3 - The arithmetic operators consist of +, −, *, /, and % 
1374:	      1.3.1.4 - An arithmetic operation that uses two int values will evaluate to an int value 
1375:	      1.3.1.5 - An arithmetic operation that uses a double value will evaluate to a double value 
1376:	      1.3.1.6 - Operators can be used to construct compound expressions 
1377:	      1.3.1.7 - During evaluation, operands are associated with operators according to operator precedence to determine how they are grouped 
1378:	      1.3.1.8 - An attempt to divide an integer by zero will result in an ArithmeticException to occur 
1379:	   1.3.2 - Evaluate what is stored in a variable as a result of an expression with an assignment statement
1380:	      1.3.2.1 - The assignment operator (=) allows a program to initialize or change the value stored in a variable. The value of the expression on the right is stored in the variable on the left 
1381:	      1.3.2.2 - During execution, expressions are evaluated to produce a single value 
1382:	      1.3.2.3 - The value of an expression has a type based on the evaluation of the expression 
1383:	Add your own example(s) here...
1384:	1.4 - Compound Assignment Operators........................................................
1385:	   1.4.1 - Evaluate what is stored in a variable as a result of an expression with an assignment statement
1386:	      1.4.1.1 - Compound assignment operators (+=, −=, *=, /=, %=) can be used in place of the assignment operator 
1387:	      1.4.1.2 - The increment operator (++) and decrement operator (−−) are used to add 1 or subtract 1 from the stored value of a variable or an array element. The new value is assigned to the variab ... (line shortened) ...
1388:	Add your own example(s) here...
1389:	1.5 - Casting and Ranges of Variables......................................................
1390:	   1.5.1 - Evaluate arithmetic expressions that use casting
1391:	      1.5.1.1 - The casting operators (int) and (double) can be used to create a temporary value converted to a different data type
1392:	      1.5.1.2 - Casting a double value to an int causes the digits to the right of the decimal point to be truncated
1393:	      1.5.1.3 - Some programming code causes int values to be automatically cast (widened) to double values
1394:	      1.5.1.4 - Values of type double can be rounded to the nearest integer by (int)(x + 0.5) or (int)(x – 0.5) for negative numbers 
1395:	      1.5.1.5 - Integer values in Java are represented by values of type int, which are stored using a finite amount (4 bytes) of memory. Therefore, an int value must be in the range from Integer.MIN_ ... (line shortened) ...
1396:	      1.5.1.6 - If an expression would evaluate to an int value outside of the allowed range, an integer overflow occurs. This could result in an incorrect value within the allowed range 
1397:	Add your own example(s) here...
1398:	Unit 3 - Boolean Expressions And If Statements            .................................
1399:	3.1 - Boolean Expressions  ................................................................
1400:	   3.1.1 - Evaluate Boolean expressions that use relational operators in program code
1401:	      3.1.1.1 - Primitive values and reference values can be compared using relational operators (i.e., == and !=) 
1402:	      3.1.1.2 - Arithmetic expression values can be compared using relational operators (i.e., <, >, <=, >=) 
1403:	      3.1.1.3 - An expression involving relational operators evaluates to a Boolean value 
1404:	Add your own example(s) here...
1405:	3.2 - if Statements and Control Flow  .....................................................
1406:	   3.2.1 - Represent branching logical processes by using conditional Statements
1407:	      3.2.1.1 -  Conditional statements interrupt the sequential execution of statements 
1408:	      3.2.1.2 -  if statements affect the flow of control by executing different statements based on the value of a Boolean Expression 
1409:	      3.2.1.3 -  A one-way selection (if statement) is written when there is a set of statements to execute under a certain condition. In this case, the body is executed only when the Boolean conditio ... (line shortened) ...
1410:	Add your own example(s) here...
1411:	3.3 - if-else Statements  .................................................................
1412:	   3.3.1 -  Represent branching logical processes by using conditional Statements
1413:	      3.3.1.1 -  A two-way selection is written when there are two sets of statements— one to be executed when the Boolean condition is true, and another set for when the Boolean condition is false. I ... (line shortened) ...
1414:	Add your own example(s) here...
1415:	3.4 - else if Statements  .................................................................
1416:	   3.4.1 -  Represent branching logical processes by using conditional Statements
1417:	      3.4.1.1 -  A multi-way selection is written when there are a series of conditions with different statements for each condition. Multi-way selection is performed using if-else-if statements such  ... (line shortened) ...
1418:	Add your own example(s) here...
1419:	3.5 - Compound Boolean Expressions  .......................................................
1420:	   3.5.1 -  Represent branching logical processes by using nested conditional statements
1421:	      3.5.1.1 -  Nested if statements consist of if statements within if statements 
1422:	   3.5.2 -  Evaluate compound Boolean expressions in program code
1423:	      3.5.2.1 -  Logical operators !(not), &&(and), and ||(or) are used with Boolean values. This represents the order these operators will be evaluated 
1424:	      3.5.2.2 -  An expression involving logical operators evaluates to a Boolean value 
1425:	      3.5.2.3 -  When the result of a logical expression using && or || can be determined by evaluating only the first Boolean operand, the second is not evaluated. This is known as short-circuited ev ... (line shortened) ...
1426:	Add your own example(s) here...
1427:	3.6 - Equivalent Boolean Expressions  .....................................................
1428:	   3.6.1 -  Compare and contrast equivalent Boolean expressions
1429:	      3.6.1.1 - De Morgan’s Laws can be applied to Boolean expressions 
1430:	      3.6.1.2 - Truth tables can be used to prove Boolean identities 
1431:	      3.6.1.3 -  Equivalent Boolean expressions will evaluate to the same value in all cases 
1432:	Add your own example(s) here...
1433:	3.7 - Comparing Objects  ..................................................................
1434:	   3.7.1 -  Compare object references using Boolean expressions in program code
1435:	      3.7.1.1 -  Two object references are considered aliases when they both reference the same object 
1436:	      3.7.1.2 -  Object reference values can be compared, using == and !=, to identify aliases 
1437:	      3.7.1.3 -  A reference value can be compared with null, using == or !=, to determine if the reference actually references an object 
1438:	      3.7.1.4 -  Often classes have their own equals method, which can be used to determine whether two objects of the class are equivalent 
1439:	Add your own example(s) here...
1440:	Unit 4 - Iteration.........................................................................
1441:	4.1 - while Loops  ........................................................................
1442:	   4.1.1 - Represent iterative processes using a while loop
1443:	      4.1.1.1 - Iteration statements change the flow of control by repeating a set of statements zero or more times until a condition is met 
1444:	      4.1.1.2 - In loops, the Boolean expression is evaluated before each iteration of the loop body, including the first. When the expression evaluates to true, the loop body is executed. This contin ... (line shortened) ...
1445:	      4.1.1.4 - If the Boolean expression evaluates to false initially, the loop body is not executed at all
1446:	      4.1.1.5 - Executing a return statement inside an iteration statement will halt the loop and exit the method or constructor
1447:	   4.1.2 - For algorithms in the context of a particular specification that does not require the use of traversals: (A) Identify standard algorithms, (B) Modify standard algorithms, (C) Develop an alg ... (line shortened) ...
1448:	      4.1.2.1 - There are standard algorithms to: (A) Identify if an integer is or is not evenly divisible by another integer, (B) Identify the individual digits in an integer, (C) Determine the frequ ... (line shortened) ...
1449:	      4.1.2.2 - There are standard algorithms to: (A) Determine a minimum or maximum value, (B) Compute a sum, average, or mode
1450:	Add your own example(s) here...
1451:	4.2 - for Loops  ..........................................................................
1452:	   4.2.1 - Represent iterative processes using a for loop
1453:	      4.2.1.1 - There are three parts in a for loop header: the initialization, the Boolean expression, and the increment. The increment statement can also be a decrement statement 
1454:	      4.2.1.2 - In a for loop, the initialization statement is only executed once before the first Boolean expression evaluation. The variable being initialized is referred to as a loop control variab ... (line shortened) ...
1455:	      4.2.1.3 - In each iteration of a for loop, the increment statement is executed after the entire loop body is executed and before the Boolean expression is evaluated again 
1456:	      4.2.1.4 - A for loop can be rewritten into an equivalent while loop and vice versa 
1457:	      4.2.1.5 - “Off by one” errors occur when the iteration statement loops one time too many or one time too few 
1458:	Add your own example(s) here...
1459:	4.3 - Developing Algorithms Using Strings  ................................................
1460:	   4.3.1 - For algorithms in the context of a particular specification that involves String objects: (A) Identify standard algorithms, (B) Modify standard algorithms, (C) Develop an Algorithm
1461:	      4.3.1.1 - There are standard algorithms that utilize String traversals to: (A) Find if one or more substrings has a particular property, (B) Determine the number of substrings that meet specific ... (line shortened) ...
1462:	Add your own example(s) here...
1463:	4.4 - Nested Iteration  ...................................................................
1464:	   4.4.1 - Represent nested iterative processes
1465:	      4.4.1.1 - Nested iteration statements are iteration statements that appear in the body of another iteration statement 
1466:	      4.4.1.2 - When a loop is nested inside another loop, the inner loop must complete all its iterations before the outer loop can continue 
1467:	Add your own example(s) here...
1468:	4.5 - Informal Code Analysis  .............................................................
1469:	   4.5.1 - Compute statement execution counts and informal run-time comparison of iterative statements
1470:	      4.5.1.1 - A statement execution count indicates the number of times a statement is executed by the program 
1471:	Add your own example(s) here...
1472:	AP curriculum - Part 2.....................................................................
1473:	Unit 2 - Using Objects.....................................................................
1474:	2.1 - Objects: Instances of Classes........................................................
1475:	   2.1.1 - Explain the relationship between a class and an object
1476:	      2.1.1.1 - An object is a specific instance of a class with defined attributes 
1477:	      2.1.1.2 - A class is the formal implementation, or blueprint, of the attributes and behaviors of an object 
1478:	Add your own example(s) here...
1479:	2.2 - Creating and Storing Objects (Instantiation).........................................
1480:	   2.2.1 - Identify, using its signature, the correct constructor being called
1481:	      2.2.1.1 - A signature consists of the constructor name and the parameter list 
1482:	      2.2.1.2 - The parameter list, in the header of a constructor, lists the types of the values that are passed and their variable names. These are often referred to as formal parameters 
1483:	      2.2.1.3 - A parameter is a value that is passed into a constructor. These are often referred to as actual parameters 
1484:	      2.2.1.4 - Constructors are said to be overloaded when there are multiple constructors with the same name but a different signature 
1485:	      2.2.1.5 - The actual parameters passed to a constructor must be compatible with the types identified in the formal parameter list 
1486:	      2.2.1.6 - Parameters are passed using call by value. Call by  value initializes the formal parameters with copies of the actual parameters 
1487:	   2.2.2 - For creating objects: a. Create objects by calling constructors without parameters. b. Create objects by calling constructors with parameters
1488:	      2.2.2.1 - Every object is created using the keyword new followed by a call to one of the class’s constructors 
1489:	      2.2.2.2 - A class contains constructors that are invoked to create objects. They have the same name as the class 
1490:	      2.2.2.3 - Existing classes and class libraries can be utilized as appropriate to create objects 
1491:	      2.2.2.4 - Parameters allow values to be passed to the constructor to establish the initial state of the object 
1492:	   2.2.3 - Define variables of the correct types to represent reference data
1493:	      2.2.3.1 - The keyword null is a special value used to indicate that a reference is not associated with any object 
1494:	      2.2.3.2 - The memory associated with a variable of a reference type holds an object reference value or, if there is no object, null. This value is the memory address of the referenced object     ... (line shortened) ...
1495:	Add your own example(s) here...
1496:	2.3 - Calling a Void Method................................................................
1497:	   2.3.1 - Call non-static void methods without parameters
1498:	      2.3.1.1 - An object’s behavior refers to what the object can do (or what can be done to it) and is defined by methods 
1499:	      2.3.1.2 -  Procedural abstraction allows a programmer to use a method by knowing what the method does even if they do not know how the method was written 
1500:	      2.3.1.3 -  A method signature for a method without parameters consists of the method name and an empty parameter list
1501:	      2.3.1.4 -  A method or constructor call interrupts the sequential execution of statements, causing the program to first execute the statements in the method or constructor before continuing. Onc ... (line shortened) ...
1502:	      2.3.1.5 -  Non-static methods are called through objects of the Class 
1503:	      2.3.1.6 -  The dot operator is used along with the object name to call non-static methods 
1504:	      2.3.1.7 -  Void methods do not have return values and are therefore not called as part of an expression 
1505:	      2.3.1.8 -  Using a null reference to call a method or access an instance variable causes a NullPointerException to be thrown 
1506:	Add your own example(s) here...
1507:	2.4 - Calling a Void Method with Parameters ...............................................
1508:	   2.4.1 -  Call non-static void methods with parameters
1509:	      2.4.1.1 -  A method signature for a method with parameters consists of the method name and the ordered list of parameter types 
1510:	      2.4.1.2 -  Values provided in the parameter list need to correspond to the order and type in the method Signature 
1511:	      2.4.1.3 -  Methods are said to be overloaded when there are multiple methods with the same name but a different Signature 
1512:	Add your own example(s) here...
1513:	2.5 - Calling a Non-void Method  ..........................................................
1514:	   2.5.1 -  Call non-static non-void methods with or without parameters
1515:	      2.5.1.1 -  Non-void methods return a value that is the same type as the return type in the signature. To use the return value when calling a non-void method, it must be stored in a variable or u ... (line shortened) ...
1516:	Add your own example(s) here...
1517:	2.6 - String Objects: Concatenation, Literals, and More  ..................................
1518:	   2.6.1 -  For String class: a. Create String objects. b. Call String Methods
1519:	      2.6.1.1 -  String objects can be created by using string literals or by calling the String class constructor 
1520:	      2.6.1.2 -  String objects are immutable, meaning that String methods do not change the String object 
1521:	      2.6.1.3 -  String objects can be concatenated using the + or += operator, resulting in a new String object 
1522:	      2.6.1.4 -  Primitive values can be concatenated with a String object. This causes implicit conversion of the values to String objects 
1523:	      2.6.1.5 -  Escape sequences start with a \ and have a special meaning in Java. Escape sequences used in this course include \", \\, and \n 
1524:	Add your own example(s) here...
1525:	2.7 - String Methods.......................................................................
1526:	   2.7.1 -  For String class: a. Create String objects. b. Call String methods
1527:	      2.7.1.1 -  Application program interfaces (APIs) and libraries simplify complex programming tasks 
1528:	      2.7.1.2 -  Documentation for APIs and libraries are essential to understanding the attributes and behaviors of an object of a class 
1529:	      2.7.1.3 -  Classes in the APIs and libraries are grouped into Packages 
1530:	      2.7.1.4 -  The String class is part of the java.lang package. Classes in the java.lang package are available by Default 
1531:	      2.7.1.5 -  A String object has index values from 0 to length – 1. Attempting to access indices outside this range will result in an IndexOutOfBoundsException 
1532:	      2.7.1.6 -  A String object can be concatenated with an object reference, which implicitly calls the referenced object's toString method 
1533:	      2.7.1.7 -  The following String methods and constructors—including what they do and when they are used—are part of the Java Quick Reference: (A) String(String str) — Constructs a new String obje ... (line shortened) ...
1534:	      2.7.1.8 -  A string identical to the single element substring at position index can be created by calling substring(index, index + 1) 
1535:	Add your own example(s) here...
1536:	2.8 - Wrapper Classes: Integer and Double  ................................................
1537:	   2.8.1 -  For wrapper classes: a. Create Integer objects, b. Call Integer methods, c. Create Double objects, d. Call Double Methods
1538:	      2.8.1.1 -  The Integer class and Double class are part of the java.lang package 
1539:	      2.8.1.2 -  The following Integer methods and constructors — including what they do and when they are used—are part of the Java Quick Reference: (A) Integer(int value) — Constructs a new Integer  ... (line shortened) ...
1540:	      2.8.1.3 -  The following Double methods and constructors— including what they do and when they are used—are part of the Java Quick Reference: (A) double doubleValue() — Returns the value of this ... (line shortened) ...
1541:	      2.8.1.4 -  Autoboxing is the automatic conversion that the Java compiler makes between primitive types and their corresponding object wrapper classes. This includes converting an int to an Integ ... (line shortened) ...
1542:	      2.8.1.5 -  The Java compiler applies autoboxing when a primitive value is: (A) Passed as a parameter to a method that expects an object of the corresponding wrapper class. (B) Assigned to a vari ... (line shortened) ...
1543:	      2.8.1.6 -  Unboxing is the automatic conversion that the Java compiler makes from the wrapper class to the primitive type. This includes converting an Integer to an int and a Double to a double 
1544:	      2.8.1.7 -  The Java compiler applies unboxing when a wrapper class object is: (A) Passed as a parameter to a method that expects a value of the corresponding primitive type (B) Assigned to a var ... (line shortened) ...
1545:	Add your own example(s) here...
1546:	2.9 - Using the Math Class  ...............................................................
1547:	   2.9.1 -  Call static methods
1548:	      2.9.1.1 - Static methods are called using the dot operator along with the class name unless they are defined in the enclosing class 
1549:	   2.9.2 -  Evaluate expressions that use the Math class methods
1550:	      2.9.2.1 -  The Math class is part of the java.lang package 
1551:	      2.9.2.2 -  The Math class contains only static methods 
1552:	      2.9.2.3 -  The following static Math methods—including what they do and when they are used—are part of the Java Quick Reference: (A) int abs(int x) — Returns the absolute value of an int value ( ... (line shortened) ...
1553:	      2.9.2.4 -  The values returned from Math.random can be manipulated to produce a random int or double in a defined range 
1554:	Add your own example(s) here...
1555:	Unit 5 - Writing Classes...................................................................
1556:	5.1 - Anatomy of a Class  .................................................................
1557:	   5.1.1 - Designate access and visibility constraints to classes, data, constructors, and methods
1558:	      5.1.1.1 - The keywords public and private affect the access of  classes, data,  constructors, and methods 
1559:	      5.1.1.2 - The keyword private restricts access to the declaring class, while the keyword public allows access from classes outside the declaring class 
1560:	      5.1.1.3 - Classes are designated public 
1561:	      5.1.1.4 - Access to attributes should be kept internal to the class. Therefore, instance variables are designated  as private 
1562:	      5.1.1.5 - Constructors are designated public 
1563:	      5.1.1.6 - Access to behaviors can be internal or external to the class. Therefore, methods can be designated as either public or private 
1564:	   5.1.2 - Designate private visibility of instance variables to encapsulate the attributes of an object
1565:	      5.1.2.1 - Data encapsulation is a technique in which the implementation details of a class are kept hidden from the user 
1566:	      5.1.2.2 - When designing a class, programmers make decisions about what data to make accessible and modifiable from an external class. Data can be either accessible or modifiable, or it can be b ... (line shortened) ...
1567:	      5.1.2.3 - Instance variables are encapsulated by using the private access modifier 
1568:	      5.1.2.4 - The provided accessor and mutator methods in a class allow client code to use and modify data 
1569:	Add your own example(s) here...
1570:	5.2 - Constructors  .......................................................................
1571:	   5.2.1 - Define instance variables for the attributes to be initialized through the constructors of a class
1572:	      5.2.1.1 - An object’s state refers to its attributes and their values at a given time and is defined by instance variables belonging to the object. This creates a  "has-a" relationship between t ... (line shortened) ...
1573:	      5.2.1.2 - Constructors are used to set the initial state of an object, which should include initial values for all instance variables 
1574:	      5.2.1.3 - Constructor parameters are local variables to the constructor and provide data to initialize instance variables 
1575:	      5.2.1.4 - When a mutable object is a constructor parameter, the instance variable should be initialized with a copy of the referenced object. In this way, the instance variable is not an alias o ... (line shortened) ...
1576:	      5.2.1.5 - When no constructor is written, Java provides a no-argument constructor, and the instance variables are set to default values 
1577:	Add your own example(s) here...
1578:	5.3 - Documentation with Comments  ........................................................
1579:	   5.3.1 - Describe the functionality and use of program code through comments
1580:	      5.3.1.1 - Comments are ignored by the compiler and are not executed when the program is run 
1581:	      5.3.1.2 - Three types of comments in Java include /* */, which generates a block of comments, //, which generates a comment on one line, and /** */, which are Javadoc comments and are used to cr ... (line shortened) ...
1582:	      5.3.1.3 - A precondition is a condition that must be true just prior to the execution of a section of program code in order for the method to behave as expected. There is no expectation that the ... (line shortened) ...
1583:	      5.3.1.4 - A postcondition is a condition that must always be true after the execution of a section of program code. Postconditions describe the outcome of the execution in terms of what is being ... (line shortened) ...
1584:	      5.3.1.5 - Programmers write method code to satisfy the postconditions when preconditions are met 
1585:	Add your own example(s) here...
1586:	5.4 - Accessor Methods  ...................................................................
1587:	   5.4.1 - Define behaviors of an object through non-void methods without parameters written in a class
1588:	      5.4.1.1 - An accessor method allows other objects to obtain the  value of instance variables or static variables 
1589:	      5.4.1.2 - A non-void method returns a single value. Its header includes the return type in place of the keyword void 
1590:	      5.4.1.3 - In non-void methods, a return expression compatible with the return type is evaluated, and a copy of that value is returned. This is referred to as "return by  value."  
1591:	      5.4.1.4 - When the return expression is a reference to an object, a copy of that reference is returned, not a copy of the object 
1592:	      5.4.1.5 - The return keyword is used to return the flow of control to the point immediately following where the method or constructor was called 
1593:	      5.4.1.6 - The toString method is an overridden method that is included in classes to provide a description of a specific object. It generally includes what values are stored in the instance data ... (line shortened) ...
1594:	      5.4.1.7 - If System.out.print or System.out.println is passed an object, that object’s toString method is called, and the returned string is printed 
1595:	Add your own example(s) here...
1596:	5.5 - Mutator Methods  ....................................................................
1597:	   5.5.1 - Define behaviors of an object through void methods with or without parameters written in a class
1598:	      5.5.1.1 - A void method does not return a value. Its header contains the keyword void before the method name 
1599:	      5.5.1.2 - A mutator (modifier) method is often a void method that changes the values of instance variables or static variables 
1600:	Add your own example(s) here...
1601:	5.6 - Writing Methods  ....................................................................
1602:	   5.6.1 - Define behaviors of an object through non-void methods with parameters written in a class
1603:	      5.6.1.1 - Methods can only access the private data and methods of a parameter that is a reference to an object when the parameter is the same type as the method’s enclosing class 
1604:	      5.6.1.2 - Non-void methods with parameters receive values through parameters, use those values, and return a computed value of the specified type 
1605:	      5.6.1.3 - It is good programming practice to not modify mutable objects that are passed as parameters unless required in the specification 
1606:	      5.6.1.4 - When an actual parameter is a primitive value, the formal parameter is initialized with a copy of that value. Changes to the formal parameter have no effect on the corresponding actual ... (line shortened) ...
1607:	      5.6.1.5 - When an actual parameter is a reference to an object, the formal parameter is initialized with a copy of that reference, not a copy of the object. If the reference is to a mutable obje ... (line shortened) ...
1608:	      5.6.1.6 - Passing a reference parameter results in the formal parameter and the actual parameter being aliases. They both refer to the same object 
1609:	Add your own example(s) here...
1610:	5.7 - Static Variables and Methods  .......................................................
1611:	   5.7.1 - Define behaviors of a class through static methods
1612:	      5.7.1.1 - Static methods are associated with the class, not objects of the class 
1613:	      5.7.1.2 - Static methods include the keyword static in the header before the method name 
1614:	      5.7.1.3 - Static methods cannot access or change the values of instance variables 
1615:	      5.7.1.4 - Static methods can access or change the values of static variables 
1616:	      5.7.1.5 - Static methods do not have a this reference and are unable to use the class’s instance variables or call non-static methods 
1617:	   5.7.2 - Define the static variables that belong to the class 
1618:	      5.7.2.1 - Static variables belong to the class, with all objects of a class sharing a single static variable 
1619:	      5.7.2.2 - Static variables can be designated as either public or private and are designated with the static keyword before the variable type 
1620:	      5.7.2.3 - Static variables are used with the class name and the dot operator, since they are associated with a class, not objects of a class 
1621:	Add your own example(s) here...
1622:	5.8 - Scope and Access  ...................................................................
1623:	   5.8.1 - Explain where variables can be used in the program code
1624:	      5.8.1.1 - Local variables can be declared in the body of constructors and methods. These variables may only be used within the constructor or method and cannot be declared to be public or privat ... (line shortened) ...
1625:	      5.8.1.2 - When there is a local variable with the same name as an instance variable, the variable name will refer to the local variable instead of the instance variable 
1626:	      5.8.1.3 - Formal parameters and variables declared in a method or constructor can only be used within that method or constructor 
1627:	      5.8.1.4 - Through method decomposition, a programmer breaks down a large problem into smaller subproblems by creating methods to solve each individual subproblem 
1628:	Add your own example(s) here...
1629:	5.9 - this Keyword  .......................................................................
1630:	   5.9.1 - Evaluate object reference expressions that use the keyword this
1631:	      5.9.1.1 - Within a non-static method or a constructor, the keyword this is a reference to the current object the object whose method or constructor is being called 
1632:	      5.9.1.2 - The keyword this can be used to pass the current object as an actual parameter in a method call 
1633:	Add your own example(s) here...
1634:	5.10 - Ethical and Social Implications of Computing Systems  ..............................
1635:	   5.10.1 - Explain the ethical and social implications of computing systems
1636:	      5.10.1.1 - System reliability is limited. Programmers should make an effort to maximize system reliability 
1637:	      5.10.1.2 - Legal issues and intellectual property concerns arise when creating programs 
1638:	      5.10.1.3 - The creation of programs has impacts on society, economies, and culture. These impacts can be beneficial and/or harmful 
1639:	Add your own example(s) here...
1640:	Unit 9 - Inheritance           ............................................................
1641:	9.1 - Creating Superclasses and Subclasses  ...............................................
1642:	   9.1.1 -  Create an inheritance relationship from a subclass to the superclass
1643:	      9.1.1.1 - A class hierarchy can be developed by putting common attributes and behaviors of related classes into a single class called a superclass 
1644:	      9.1.1.2 - Classes that extend a superclass, called subclasses, can draw upon the existing attributes and behaviors  of the superclass without repeating these in the code 
1645:	      9.1.1.3 - Extending a subclass from a superclass creates an "is-a" relationship from the subclass to the superclass 
1646:	      9.1.1.4 - The keyword extends is used to establish an inheritance relationship between a subclass and a superclass. A class can extend only one superclass 
1647:	Add your own example(s) here...
1648:	9.2 - Writing Constructors for Subclasses..................................................
1649:	   9.2.1- Create an inheritance relationship from a subclass to the Superclass
1650:	      9.2.1.1 - Constructors are not inherited 
1651:	      9.2.1.2 - The superclass constructor can be called from the first line of a subclass constructor by using the keyword super and passing appropriate parameters 
1652:	      9.2.1.3 - The actual parameters passed in the call to the superclass constructor provide values that the constructor can use to initialize the object’s instance variables 
1653:	      9.2.1.4 - When a subclass’s constructor does not explicitly call a superclass’s constructor using super, Java inserts a call to the superclass’s no-argument constructor
1654:	      9.2.1.5 - Regardless of whether the superclass constructor is called implicitly or explicitly, the process of calling superclass constructors continues until the Object constructor is called. At ... (line shortened) ...
1655:	Add your own example(s) here...
1656:	9.3 - Overriding Methods  .................................................................
1657:	   9.3.1 - Create an inheritance relationship from a subclass to the Superclass
1658:	      9.3.1.1 - Method overriding occurs when a public method in a subclass has the same method signature as a public method in the superclass 
1659:	      9.3.1.2 - Any method that is called must be defined within its own class or its superclass 
1660:	      9.3.1.3 - A subclass is usually designed to have modified (overridden) or additional methods or instance Variables 
1661:	      9.3.1.4 - A subclass will inherit all public methods from the superclass; these methods remain public in the subclass 
1662:	Add your own example(s) here...
1663:	9.4 - super Keyword  ......................................................................
1664:	   9.4.1 - Create an inheritance relationship from a subclass to the superclass
1665:	      9.4.1.1 - The keyword super can be used to call a superclass's constructors and methods 
1666:	      9.4.1.2 - The superclass method can be called in a subclass by using the keyword super with the method name and passing appropriate parameters 
1667:	Add your own example(s) here...
1668:	9.5 - Creating References Using Inheritance Hierarchies  ..................................
1669:	   9.5.1 - Define reference variables of a superclass to be assigned to an object of a subclass in the same hierarchy
1670:	      9.5.1.1 - When a class S “is-a” class T, T is referred to as a superclass, and S is referred to as a subclass 
1671:	      9.5.1.2 - If S is a subclass of T, then assigning an object of type S to a reference of type T facilitates Polymorphism 
1672:	      9.5.1.3 - If S is a subclass of T, then a reference of type T can be used to refer to an object of type T or S 
1673:	      9.5.1.4 - Declaring references of type T, when S is a subclass of T, is useful in the following declarations: (a) Formal method parameters, (b) arrays — T[] var ArrayList<T> var 
1674:	Add your own example(s) here...
1675:	9.6 - Polymorphism  .......................................................................
1676:	   9.6.1 - Call methods in an inheritance relationship
1677:	      9.6.1.1 - Utilize the Object class through inheritance
1678:	      9.6.1.2 - At compile time, methods in or inherited by the declared type determine the correctness of a non-static method call 
1679:	      9.6.1.3 - At run-time, the method in the actual object type is executed for a non-static method call 
1680:	Add your own example(s) here...
1681:	9.7 - Object Superclass  ..................................................................
1682:	   9.7.1 - Call Object class methods through inheritance
1683:	      9.7.1.1 - The Object class is the superclass of all other classes in Java 
1684:	      9.7.1.2 - The Object class is part of the java.lang package 
1685:	      9.7.1.3 - The following Object class methods and constructors—including what they do and when they are used—are part of the Java Quick Reference: (a) boolean equals(Object other), (b) String toS ... (line shortened) ...
1686:	      9.7.1.4 - Subclasses of Object often override the equals and toString methods with class specific implementations 
1687:	Add your own example(s) here...
1688:	AP curriculum - Part 3.....................................................................
1689:	Unit 6 - Arrays............................................................................
1690:	6.1 - Array Creation and Access  ..........................................................
1691:	   6.1.1 - Represent collections of related primitive or object reference data using one dimensional (1D - array objects)
1692:	      6.1.1.1 - The use of array objects allows multiple related items to be represented using a single variable 
1693:	      6.1.1.2 - The size of an array is established at the time of creation and cannot be changed 
1694:	      6.1.1.3 - Arrays can store either primitive data or object reference data 
1695:	      6.1.1.4 - When an array is created using the keyword new, all of its elements are initialized with a specific value based on the type of  elements: (a) Elements of type int are initialized to 0, ... (line shortened) ...
1696:	      6.1.1.5 - Initializer lists can be used to create and initialize arrays 
1697:	      6.1.1.6 - Square brackets [ ] are used to access and modify an element in a 1D array using an index 
1698:	      6.1.1.7 - The valid index values for an array are 0 through one less than the number of elements in the array, inclusive. Using an index value outside of this range will result in an ArrayIndexO ... (line shortened) ...
1699:	Add your own example(s) here...
1700:	6.2 - Traversing Arrays  ..................................................................
1701:	   6.2.1 - Traverse the elements in a 1D array
1702:	      6.2.1.1 - Iteration statements can be used to access all the elements in an array. This is called traversing the array 
1703:	      6.2.1.2 - Traversing an array with an indexed for loop or while loop requires elements to be accessed using their indices 
1704:	      6.2.1.3 - Since the indices for an array start at 0 and end at the number of elements − 1, “off by one” errors are easy to make when traversing an array, resulting in an ArrayIndexOutOfBoundsExc ... (line shortened) ...
1705:	Add your own example(s) here...
1706:	6.3 - Enhanced for Loop for Arrays  .......................................................
1707:	   6.3.1 - Traverse the elements in a 1D array object using an enhanced for loop
1708:	      6.3.1.1 - An enhanced for loop header includes a variable, referred to as the enhanced for loop variable 
1709:	      6.3.1.2 - For each iteration of the enhanced for loop, the enhanced for loop variable is assigned a copy of an element without using its index 
1710:	      6.3.1.3 - Assigning a new value to the enhanced for loop variable does not change the value stored in the array 
1711:	      6.3.1.4 - Program code written using an enhanced for loop to traverse and access elements in an array can be rewritten using an indexed for loop or a while loop 
1712:	Add your own example(s) here...
1713:	6.4 - Developing Algorithms Using Arrays  .................................................
1714:	   6.4.1 - For algorithms in the context of a particular specification that requires the use of array traversals: (a) Identify standard algorithms, (b) Modify standard algorithms, (c) Develop an algor ... (line shortened) ...
1715:	      6.4.1.1 - There are standard algorithms that utilize array traversals to: (a) Determine a minimum or maximum value, (b) Compute a sum, average, or mode, (c) Determine if at least one element has ... (line shortened) ...
1716:	      6.4.1.2 - There are standard array algorithms that utilize traversals to: (a) Shift or rotate elements left or right, (b) Reverse the order of the elements 
1717:	Add your own example(s) here...
1718:	Unit 8 - 2D Arrays       ..................................................................
1719:	8.1 - 2D Arrays  ..........................................................................
1720:	   8.1.1 - Represent collections of related primitive or object reference data using two-dimensional (2D) array objects
1721:	      8.1.1.1 - 2D arrays are stored as arrays of arrays. Therefore, the way 2D arrays are created and indexed is similar to 1D array objects 
1722:	      8.1.1.2 - For the purposes of the exam, when accessing the element at arr[first][second], the first index is used for rows, the second index is used for columns 
1723:	      8.1.1.3 - The initializer list used to create and initialize a 2D array consists of initializer lists that represent 1D arrays 
1724:	      8.1.1.4 - The square brackets [row][col] are used to access and modify an element in a 2D array 
1725:	      8.1.1.5 - “Row-major order” refers to an ordering of 2D array elements where traversal occurs across each row, while “column-major order” traversal occurs down each column 
1726:	Add your own example(s) here...
1727:	8.2 - Traversing 2D Arrays  ...............................................................
1728:	   8.2.1 - For 2D array objects: (a) Traverse using nested for loops, (b) Traverse using nested enhanced for loops
1729:	      8.2.1.1 - Nested iteration statements can be written to traverse the 2D array in “row-major order” or “column-major Order.” 
1730:	      8.2.1.2 - The outer loop of a nested enhanced for loop used to traverse a 2D array traverses the rows. Therefore, the enhanced for loop variable must be the type of each row, which is a 1D array ... (line shortened) ...
1731:	Add your own example(s) here...
1732:	AP curriculum - Part 4.....................................................................
1733:	Unit 7 - Array List........................................................................
1734:	7.1 - Introduction to ArrayList  ..........................................................
1735:	   7.1.1 - Represent collections of related object reference data using ArrayList objects
1736:	      7.1.1.1 - An ArrayList object is mutable and contains object references
1737:	      7.1.1.2 - The ArrayList constructor ArrayList() constructs an empty list 
1738:	      7.1.1.3 - Java allows the generic type ArrayList<E>, where the generic type E specifies the type of the elements 
1739:	      7.1.1.4 - When ArrayList<E> is specified, the types of the reference parameters and return type when using the methods are type E 
1740:	      7.1.1.5 - ArrayList<E> is preferred over ArrayList because it allows the compiler to find errors that would otherwise be found at run-time 
1741:	Add your own example(s) here...
1742:	7.2 - ArrayList Methods  ..................................................................
1743:	   7.2.1 - Represent collections of related object reference data using ArrayList objects
1744:	      7.2.1.1 - The ArrayList class is part of the java.util package.  An import statement can be used to make this class available for use in the program 
1745:	      7.2.1.2 - The following ArrayList methods—including what they do and when they are used—are part of the Java Quick Reference: (a) int size() - Returns the number of elements in the list, (b) boo ... (line shortened) ...
1746:	Add your own example(s) here...
1747:	7.3 - Traversing ArrayLists  ..............................................................
1748:	   7.3.1 - For ArrayList objects: (a) Traverse using a for or while loop, (b) Traverse using an enhanced for loop
1749:	      7.3.1.1 - Iteration statements can be used to access all the elements in an ArrayList. This is called traversing the ArrayList 
1750:	      7.3.1.2 - Deleting elements during a traversal of an ArrayList requires using special techniques to avoid skipping elements 
1751:	      7.3.1.3 - Since the indices for an ArrayList start at 0 and end at the number of elements − 1, accessing an index value outside of this range will result in an ArrayIndexOutOfBoundsException bei ... (line shortened) ...
1752:	      7.3.1.4 - Changing the size of an ArrayList while traversing it using an enhanced for loop can result in a ConcurrentModificationException being thrown. Therefore, when using an enhanced for loo ... (line shortened) ...
1753:	Add your own example(s) here...
1754:	7.4 - Developing Algorithms Using ArrayLists  .............................................
1755:	   7.4.1 - For algorithms in the context of a particular specification that requires the use of ArrayList traversals: (a) Identify standard algorithms, (b) Modify standard algorithms, (c) Develop an a ... (line shortened) ...
1756:	      7.4.1.1 - There are standard ArrayList algorithms that utilize traversals to: (a) Insert elements, (b) Delete elements, (c) Apply the same standard algorithms that are used with 1D arrays 
1757:	      7.4.1.2 - Some algorithms require multiple String, array, or ArrayList objects to be traversed simultaneously
1758:	Add your own example(s) here...
1759:	7.5 - Searching  ..........................................................................
1760:	   7.5.1 - Apply sequential/linear search algorithms to search for specific information in array or ArrayList objects
1761:	      7.5.1.1 - There are standard algorithms for searching 
1762:	      7.5.1.2 - Sequential/linear search algorithms check each element in order until the desired value is found or all elements in the array or ArrayList have been checked 
1763:	Add your own example(s) here...
1764:	7.6 - Sorting  ............................................................................
1765:	   7.6.1 - Apply selection sort and insertion sort algorithms to sort the elements of array or ArrayList objects
1766:	      7.6.1.1 - Selection sort and insertion sort are iterative sorting algorithms that can be used to sort elements in an array or ArrayList 
1767:	   7.6.2 - Compute statement execution counts and informal run-time comparison of sorting algorithms
1768:	      7.6.2.1 - Informal run-time comparisons of program code segments  can be made using statement execution counts 
1769:	Add your own example(s) here...
1770:	7.7 - Ethical Issues Around Data Collection  ..............................................
1771:	   7.7.1 - Explain the risks to privacy from collecting and storing personal data on computer systems
1772:	      7.7.1.1 - When using the computer, personal privacy is at risk.  Programmers should attempt to safeguard personal privacy 
1773:	      7.7.1.2 - Computer use and the creation of programs have an impact on personal security. These impacts can be beneficial and/or harmful 
1774:	Add your own example(s) here...
1775:	Unit 10 - Recursion........................................................................
1776:	10.1 - Recursion  .........................................................................
1777:	   10.1.1 - Determine the result of executing recursive methods
1778:	      10.1.1.1 - A recursive method is a method that calls itself 
1779:	      10.1.1.2 - Recursive methods contain at least one base case, which halts the recursion, and at least one recursive call 
1780:	      10.1.1.3 - Each recursive call has its own set of local variables, including the formal parameters 
1781:	      10.1.1.4 - Parameter values capture the progress of a recursive process, much like loop control variable values capture the progress of a loop 
1782:	      10.1.1.5 - Any recursive solution can be replicated through the use of an iterative approach 
1783:	      10.1.1.6 - Recursion can be used to traverse String, array, and ArrayList objects 
1784:	Add your own example(s) here...
1785:	10.2 - Recursive Searching and Sorting  ...................................................
1786:	   10.2.1 - Apply recursive search algorithms to information in String, 1D array, or ArrayList objects
1787:	      10.2.1.1 - Data must be in sorted order to use the binary search algorithm 
1788:	      10.2.1.2 - The binary search algorithm starts at the middle of a sorted array or ArrayList and eliminates half of the array or ArrayList in each iteration until the desired value is found or all ... (line shortened) ...
1789:	      10.2.1.3 - Binary search can be more efficient than sequential/linear search 
1790:	      10.2.1.4 - The binary search algorithm can be written either iteratively or recursively 
1791:	   10.2.2 - Apply recursive algorithms to sort elements of array or ArrayList objects
1792:	      10.2.2.1 - Merge sort is a recursive sorting algorithm that can be used to sort elements in an array or ArrayList  
1793:	Add your own example(s) here...
1794:	Computer Science 42SAP practice tests......................................................
1795:	AP Practice Test 1.........................................................................
1796:	// Question 1...
1797:	Consider the following code segment.
1798:	int a = 5;
1799:	int b = 2;
1800:	double c = 3.0;
1801:	System.out.println(5 + a / b * c - 1);
1802:	What is printed when the code segment is executed?
1803:	(A) 0.666666666666667
1804:	(B) 9.0
1805:	(C) 10.0
1806:	(D) 11.5
1807:	(E) 14.0
1808:	// Answer 1...
1809:	C
1810:	// Question 2...
1811:	Which of the following statements assigns a random
1812:	integer between 25 and 60, inclusive to rn?
1813:	(A) int rnA = (int)(Math.random() * 25) + 36;
1814:	(B) int rnB = (int)(Math.random() * 25) + 60;
1815:	(C) int rnC = (int)(Math.random() * 26) + 60;
1816:	(D) int rnD = (int)(Math.random() * 36) + 25;
1817:	(E) int rnE = (int)(Math.random() * 60) + 25;
1818:	// Answer 2...
1819:	A
1820:	D
1821:	// Question 3...
1822:	Which of the following best describes the value
1823:	of the Boolean expression shown below?
1824:	a && !(b || a)
1825:	(A) The value is always true
1826:	(B) The value is always false
1827:	(C) The value is true when a has the value 
    false, and is false otherwise
1828:	(D) The value is true when b has the value 
    false, and is false otherwise
1829:	(E) The value is true when either a or b has 
    the value true, and is false otherwise
1830:	// Answer 3...
1831:	B
1832:	// Question 4...
1833:	Consider the following code segment
1834:	int val = 48;
1835:	int div = 6;
1836:	while((val % 2 == 0) && div > 0) {
1837:	    if (val % div == 0) {
1838:	        System.out.print(val + " ");
1839:	    }
1840:	    val /= 2;
1841:	    div--;
1842:	}
1843:	What is printed when the code segment is executed?
1844:	(A) 48 12 6
1845:	(B) 48 12 6 3
1846:	(C) 48 12 6 3 1
1847:	(D) 48 24 12 6
1848:	(E) 48 24 12 6 3
1849:	// Answer 4...
1850:	A
1851:	// Question 5...
1852:	Which of the following code segments is equivalent to the code below
1853:	if (x >= 1) x = x * 3;
1854:	if (x > 3) x = 0;
1855:	(A) x = 0
1856:	(B) if (x > 1) x = 0;
1857:	(C) if (x > 3) x = 0;
1858:	(D) if (x >= 1) x = 0;
1859:	(E) none of the above
1860:	// Answer 5...
1861:	B
1862:	// Question 6...
1863:	When is the following Boolean expression true
1864:	(a and b are integers)?
1865:	(a < b) && !(b > a)
1866:	(A) Always true
1867:	(B) Never true
1868:	(C) a = b
1869:	(D) a < b
1870:	(E) a > b
1871:	// Answer 6...
1872:	B
1873:	// Question 7...
1874:	Consider the following code segment
1875:	int i = a random number such that 1 <= i <= n;
1876:	for (int a = 2; a <= i; a++)
1877:	    for (int b = 1; b < i; b++)
1878:	        System.out.println("*");
1879:	(A) 0
1880:	(B) 1
1881:	(C) 2
1882:	(D) n - 1
1883:	(E) n - 2
1884:	// Answer 7...
1885:	B
1886:	// Question 8...
1887:	Consider the following code segment
1888:	int p = 5;
1889:	int q = 2;
1890:	int sum = 0;
1891:	while (p <= 8) {
1892:	    sum += p % q;
1893:	    p++;
1894:	    q++;
1895:	}
1896:	(A) 1
1897:	(B) 0
1898:	(C) 13
1899:	(D) 7
1900:	(E) 4
1901:	// Answer 8...
1902:	D
1903:	// Question 9...
1904:	Consider the following code segment
1905:	for (int i = 0; i <= 3; i++) {
1906:	    for (int j = 1; j <= 5; j+=2) {
1907:	        System.out.println("*");
1908:	    }
1909:	}
1910:	(A) 3
1911:	(B) 6
1912:	(C) 9
1913:	(D) 12
1914:	(E) 15
1915:	// Answer 9...
1916:	D
1917:	// Question 10...
1918:	What are the values of a and b after the for loop
1919:	finishes?
1920:	int a = 10;
1921:	int b = 3;
1922:	int t = 0;
1923:	for (int i = 1; i < 4; i++) {
1924:	    t = a;
1925:	    a = i + b;
1926:	    b = t - i;
1927:	}
1928:	(A) a = 5 and b = -2
1929:	(B) a = 6 and b = 7
1930:	(C) a = 6 and b = 3
1931:	(D) a = 12 and b = 1
1932:	(E) a = 5 and b = 8
1933:	// Answer 10...
1934:	E
1935:	AP Practice Test 2.........................................................................
1936:	// Question 1...
1937:	Consider the following class definition
1938:	public class Example
1939:	{
1940:	     private int x;
1941:	     // constructor not shown
1942:	}
1943:	Which of the following is a correct header for a
1944:	method that would return the value of the private
1945:	instance variable x so that it can be used in a
1946:	class other than Example?
1947:	(A) private int getX()
1948:	(B) private void getX()
1949:	(C) public int getX()
1950:	(D) public void getX()
1951:	(E) public void getX(int x)
1952:	// Answer 1...
1953:	C
1954:	// Question 2...
1955:	Consider the following class definitions
1956:	public class Thing1 {
1957:	     public void calc(int n) {
1958:	          n *= 3;
1959:	          System.out.print(n);
1960:	     }
1961:	}
1962:	public class Thing2 extends Thing1 {
1963:	     public void calc(int n) {
1964:	          n += 2;
1965:	          super.calc(n);
1966:	          System.out.print(n);
1967:	     }
1968:	}
1969:	The following code seqment appears in a class
1970:	other than Thing1 or Thing2
1971:	Thing1 t = new Thing2();
1972:	t.calc(2);
1973:	What is printed as a result of executing the
1974:	code segment?
1975:	(A) 4
1976:	(B) 6
1977:	(C) 68
1978:	(D) 124
1979:	(E) 1212
1980:	// Answer 2...
1981:	D
1982:	// Question 3...
1983:	Consider the following class definitions.
1984:	public class Student {
1985:	    public String getFood() {
1986:	        return "Pizza";
1987:	    }
1988:	    public String getInfo() {
1989:	        return "Studying";
1990:	    }
1991:	}
1992:	public class GradStudent extends Student {
1993:	    public String getFood() {
1994:	        return "Taco";
1995:	    }
1996:	    public String getInfo() {
1997:	        super.getInfo();
1998:	        return "Eating";
1999:	    }
2000:	}
2001:	What is printed when the following code is
2002:	executed?
2003:	Student s = new GradStudent();
2004:	System.out.println(s.getInfo());
2005:	(A) Pizza
2006:	(B) Taco
2007:	(C) Studying
2008:	(D) Eating
2009:	(E) Studying
2010:	    Eating
2011:	// Answer 3...
2012:	D
2013:	// Question 4...
2014:	Given the following class declarations:
2015:	public class Car {
2016:	    private String make;
2017:	    public Car(String theMake) {
2018:	        make = theMake;
2019:	    }
2020:	    public String getMake() {
2021:	        return make;
2022:	    }
2023:	}
2024:	public class ElectricCar extends Car {
2025:	    public ElectricCar() {
2026:	        super("Ford");
2027:	    }
2028:	    public ElectricCar(String theMake) {
2029:	        super(theMake);
2030:	    } 
2031:	}
2032:	Which of the following will cause a compile
2033:	time error?
2034:	(A) Car myCar = new Car();
2035:	(B) Car myCar1 = new ElectricCar();
2036:	(C) ElectricCar myCar2 = new ElectricCar("Ford");
2037:	(D) Car myCar3 = new Car("Ford");
2038:	(E) Car myCar4 = new ElectricCar("Ford");
2039:	// Answer 4...
2040:	A
2041:	// Question 5...
2042:	Given the following declarations.
2043:	public class Vehicle {
2044:	    public void test(Car x, SportsCar y) { }
2045:	}
2046:	public class Car extends Vehicle {
2047:	}
2048:	public class SportsCar extends Car {
2049:	}
2050:	Also consider the following code that appears
2051:	in a different class.
2052:	Vehicle v = new Vehicle();
2053:	Car c = new Car();
2054:	SportsCar sporty = new SportsCar();
2055:	Which of the following is a correct call to test ?
2056:	(A) v.test(sporty, v);
2057:	(B) sporty.test(c, c);
2058:	(C) v.test(sporty, c);
2059:	(D) sporty.test(sporty, v);
2060:	(E) c.test(sporty, sporty);
2061:	// Answer 5...
2062:	E
2063:	// Question 6...
2064:	Class C extends class B, which extends class A. 
2065:	Also, all of the three classes implement a public
2066:	method test(). How can a method in an object of
2067:	class C invoke the test() method defined in class
2068:	A (without creating a new instance of class A)?
2069:	(A) test();
2070:	(B) super.super.test();
2071:	(C) super.test();
2072:	(D) this.test();
2073:	(E) There is no way to call a method in a 
2074:	    grandparent class from a grandchild class
2075:	// Answer 6...
2076:	E
2077:	// Question 7...
2078:	Given the following class declarations. Assume
2079:	that Parent p = new Child(); appears in a client
2080:	program. What is the result of the call p.m1();
2081:	public class Parent {
2082:	    public void m1() {
2083:	        System.out.print("pm1");
2084:	        m2();
2085:	    }
2086:	    public void m2() {
2087:	        System.out.print("pm2");
2088:	    }
2089:	}
2090:	public class Child extends Parent {
2091:	    public void m1() {
2092:	        super.m1();
2093:	        System.out.print("cm1");
2094:	    }
2095:	    public void m2() {
2096:	        super.m2();
2097:	        System.out.print("cm2");
2098:	    }
2099:	}
2100:	(A) pm1pm2cm2cm1
2101:	(B) pm1pm2
2102:	(C) pm1pm2cm1cm2
2103:	(D) pm1cm1
2104:	(E) pm1
2105:	// Answer 7...
2106:	pm1pm2cm2cm1// Question 8...
2107:	Given the following class declarations.
2108:	public class Animal {
2109:	    public void eat() {
2110:	        System.out.println("AE");
2111:	    }
2112:	}
2113:	public class Bear extends Animal {
2114:	    public void growl() {
2115:	        System.out.println("BG");
2116:	    }
2117:	}
2118:	Assume the following declaration is in a 
2119:	different class.
2120:	Animal b = new Bear();
2121:	Which of the following will compile without error?
2122:	I.   b.eat();
2123:	II.  b.growl();
2124:	III. ((Bear)b).growl();
2125:	(A) I only
2126:	(B) II only
2127:	(C) III only
2128:	(D) I and III only
2129:	(E) I, II, and III
2130:	// Answer 8...
2131:	B
2132:	// Question 9...
2133:	Consider the following partial class definitions.
2134:	public class C1 {
2135:	    private int num;
2136:	    private String name;
2137:	    public C1(int theNum) {
2138:	        num = theNum
2139:	    } 
2140:	    public C1(String theName) {
2141:	        name = theName;
2142:	    }
2143:	}
2144:	public class C2 extends C1 {
2145:	    // methods not shown
2146:	}
2147:	Which of the following constructors are valid for
2148:	C2?
2149:	I. public C2() { }
2150:	II. public C2(int quan) { super(quan); }
2151:	III. public C2(String label) { super(label); }
2152:	(A) All three are valid
2153:	(B) II only
2154:	(C) III only
2155:	(D) II and III
2156:	(E) None are valid
2157:	// Answer 9...
2158:	D
2159:	// Question 10...
2160:	Given the following class definition. What are 
2161:	the values of x, y, and z just before method2
2162:	returns?
2163:	public class Class1 {
2164:	    public int method1(int a, int b) {
2165:	        int temp = a;
2166:	        a = b;
2167:	        b = temp;
2168:	        return b;
2169:	    }  
2170:	    public void method2() {
2171:	        int x = 3;
2172:	        int y = 5;
2173:	        int z = method1(x, y);
2174:	    }
2175:	}
2176:	(A) x=3,y=3,z=3
2177:	(B) x=3,y=5,z=3
2178:	(C) x=5,y=3,z=5
2179:	(D) x=5,y=3,z=3
2180:	(E) x=3,y=5,z=5
2181:	// Answer 10...
2182:	B
2183:	AP Practice Test 3.........................................................................
2184:	// Section 1...
2185:	For the next two Free response questions, 
2186:	refer to the description below...
2187:	A travel agency maintains a list of information 
2188:	about airline flights. Flight information 
2189:	includes a departure time and an arrival time.
2190:	You may assume that the two times occur on the 
2191:	same day. These times are represented by 
2192:	objects of the Time class. The declaration for
2193:	the Time class is shown below. It includes a 
2194:	method which returns the difference (in minutes)
2195:	between the current Time object and another Time
2196:	object. 
2197:	public class Time {
2198:	     /** 
2199:	      * @return difference, in minutes, between this
2200:	      * time and other; difference is negative
2201:	      * if other is earlier than this time
2202:	      */
2203:	     public int minutesUntil(Time other) {
2204:	          /* implementation not shown */
2205:	     }
2206:	     // There may be instance variables, constructors,
2207:	     // and methods that are not shown.
2208:	}
2209:	For example, assume that t1 and t2 are Time 
2210:	objects where t1 represents 1:00 p.m. and t2 
2211:	represents 2:15 p.m. The call t1.minutesUntil(t2) 
2212:	will return 75 and the call t2.minutesUntil(t1) 
2213:	will return -75. The declaration for the Flight class 
2214:	is shown below. It has methods to access the 
2215:	departure time and the arrival time of a flight. 
2216:	You may assume that the departure time of a 
2217:	flight is earlier than its arrival time.
2218:	public class Flight {
2219:	      /** @return time at which the flight departs */
2220:	      public Time getDepartureTime() {
2221:	           /* implementation not shown */ 
2222:	      }
2223:	      /** @return time at which the flight arrives */
2224:	      public Time getArrivalTime() {
2225:	           /* implementation not shown */ 
2226:	      }
2227:	      // There may be instance variables, constructors, 
2228:	      // and methods that are not shown.
2229:	}
2230:	A trip consists of a sequence of flights and is 
2231:	represented by the Trip class. The Trip class 
2232:	contains a List of Flight objects that are stored 
2233:	in chronological order. You may assume that for 
2234:	each flight after the first flight in the list, 
2235:	the departure time of the flight is later than 
2236:	the arrival time of the preceding flight in the 
2237:	list. A partial declaration of the Trip class is 
2238:	shown below. You will write two methods for the 
2239:	Trip class.
2240:	public class Trip {
2241:	     /** 
2242:	       * The list of flights (if any) that make up 
2243:	       * this trip, stored in chronological order
2244:	       */
2245:	     private List<Flight> flights;
2246:	     /** 
2247:	       * @return the number of minutes from the 
2248:	       * departure of the first flight to the arrival 
2249:	       * of the last flight if there are one or more 
2250:	       * flights in the trip; 0, if there are no 
2251:	       * flights in the trip
2252:	       */
2253:	     public int getDuration() {
2254:	          /* to be implemented in part (a) */ 
2255:	     }
2256:	     /** 
2257:	       * Precondition: the departure time for each 
2258:	       * flight is later than the arrival time of its 
2259:	       * preceding flight
2260:	       * @return the smallest number of minutes 
2261:	       * between the arrival of a flight and the 
2262:	       * departure of the flight immediately after it, 
2263:	       * if there are two or more flights in the 
2264:	       * trip; -1, if there are fewer than two flights 
2265:	       * in the trip
2266:	       */
2267:	     public int getShortestLayover() {
2268:	          /* to be implemented in part (b) */
2269:	     }
2270:	       // There may be instance variables, constructors,
2271:	       // and methods that are not shown
2272:	}
2273:	// Question 1...
2274:	Complete method getDuration below.  
2275:	// An answer could be...
2276:	public int getDuration() {
2277:	    int totalDuration = 0;
2278:	    for (Flight flight : flights) {
2279:	        Time departure = flight.getDepartureTime();
2280:	        Time arrival   = flight.getArrivalTime();
2281:	        int  duration  = departure.minutesUntil(arrival);
2282:	        totalDuration  = totalDuration + duration;
2283:	    }
2284:	    return totalDuration;
2285:	}
2286:	// Question 2...
2287:	Write the Trip method getShortestLayover. A 
2288:	layover is the number of minutes from the arrival 
2289:	of one flight in a trip to the departure of the 
2290:	flight immediately after it. If there are two or 
2291:	more flights in the trip, the method should return 
2292:	the shortest layover of the trip; otherwise, it 
2293:	should return -1. For example, assume that the 
2294:	instance variable flights of a Trip object vacation 
2295:	contains the following flight information.
2296:	          Departure   Arrival   Layover
2297:	            Time      Time     (minutes)
2298:	         +---------+----------+
2299:	Flight 0 | 11:30am |  12:15pm |
2300:	         +---------+----------+ }  60
2301:	Flight 1 |  1:15pm |   3:45pm |
2302:	         +---------+----------+ }  15
2303:	Flight 2 |  4:00pm |   6:45pm |
2304:	         +---------+----------+ }  210
2305:	Flight 3 | 10:15pm |  11:00pm |
2306:	         +---------+----------+
2307:	The call vacation.getShortestLayover() should 
2308:	return 15. Complete method getShortestLayover() 
2309:	below.
2310:	public int getShortestLayover()
2311:	// An answer could be...
2312:	public int getShortestLayover() {
2313:	    if (flights.isEmpty()) return -1;
2314:	    int shortestLayover = Integer.MAX_VALUE;
2315:	    int i = 0;
2316:	    while (i < flights.size()) {
2317:	        Flight currentFlight = flights.get(i);
2318:	        i++;
2319:	        Flight nextFlight    = flights.get(i);
2320:	        Time arrival         = currentFlight.getArrivalTime();
2321:	        Time departure       = nextFlight.getDepartureTime();
2322:	        int layover = Math.abs(arrival.minutesUntil(departure));
2323:	        if (layover < shortestLayover) {
2324:	            shortestLayover = layover;
2325:	        }
2326:	        i++;
2327:	    }
2328:	    return shortestLayover;
2329:	}
2330:	// Section 1...
2331:	For the next three Free response questions, refer 
2332:	to the description below...
2333:	Consider the hierarchy of classes shown in the 
2334:	following diagram
2335:	         +----------+ 
2336:	         |    Pet   |
2337:	         +----------+
2338:	            /    \
2339:	 +----------+    +----------+
2340:	 |    Cat   |    |    Dog   |
2341:	 +----------+    +----------+
2342:	                       \
2343:	                       +----------+
2344:	                       | Loud Dog |
2345:	                       +----------+
2346:	Note that a Cat 'is-a' Pet, a Dog 'is-a' Pet, and 
2347:	a LoudDog 'is-a' Dog. The class Pet is specified 
2348:	as an abstract class as shown in the following 
2349:	declaration. Each Pet has a name that is 
2350:	specified when it is constructed.
2351:	public abstract class Pet {
2352:	    private String name;
2353:	    public Pet(String petName) {
2354:	        name = petName;
2355:	    }
2356:	    public String getName() {
2357:	        return name;
2358:	    }
2359:	    public abstract String speak();
2360:	}
2361:	The subclass Dog has the partial class 
2362:	declaration shown below.
2363:	public class Dog extends Pet {
2364:	    public Dog(String petName) {
2365:	        /* implementation not shown */
2366:	    }
2367:	    public String speak() {
2368:	        /* implementation not shown */
2369:	    }
2370:	}
2371:	// Question 3...
2372:	Given the class hierarchy shown above, write a 
2373:	complete class declaration for the class Cat, 
2374:	including implementations of its constructor 
2375:	and method(s). The Cat method speak returns 
2376:	'meow' when it is invoked.
2377:	// An answer could be...
2378:	public class Cat extends Pet {
2379:	    public Cat(String petName) {
2380:	        super(petName);
2381:	    }
2382:	    public String speak() {
2383:	        return "meow";
2384:	    }
2385:	}
2386:	// Question 4...
2387:	Assume that class Dog has been declared as shown 
2388:	at the beginning of the question. If the String 
2389:	dog-sound is returned by the Dog method speak, 
2390:	then the LoudDog method method speak returns a 
2391:	String containing dog-sound repeated two times. 
2392:	Given the class hierarchy shown previously, 
2393:	write a complete class declaration for the class 
2394:	LoudDog including implementations of its 
2395:	constructor and method(s).
2396:	// An answer could be...
2397:	public class LoudDog extends Dog {
2398:	    public LoudDog(String petName) {
2399:	        super(petName);
2400:	    }
2401:	    public String speak() {
2402:	        return super.speak() + super.speak();
2403:	    }
2404:	}
2405:	// Question 5...
2406:	Consider the following partial declaration of 
2407:	class Kennel
2408:	public class Kennel {
2409:	    private ArrayList<Pet> petList;
2410:	     /**
2411:	      * For every Pet in the kennel, prints the name 
2412:	      * followed by the result of a call to its speak 
2413:	      * method, one line per Pet
2414:	      */
2415:	     public void allSpeak() {
2416:	        /* to be implemented */
2417:	     }
2418:	     // There may be instance variables, constructors, 
2419:	     // and methods that are not shown
2420:	}
2421:	Write the Kennel method allSpeak For each Pet in 
2422:	the kennel, allSpeak prints a line with the name 
2423:	of the Pet followed by the result of a call to 
2424:	its speak method. In writing allSpeak you may use 
2425:	any of the methods defined for any of the classes 
2426:	specified for this problem. Assume that these 
2427:	methods work as specified, regardless of what 
2428:	you wrote in previous questions. Complete method
2429:	allSpeak below
2430:	public void allSpeak()
2431:	// An answer could be...
2432:	public void allSpeak() {
2433:	    for (Pet pet : petList) {
2434:	        System.out.println(pet.getName() + pet.speak());
2435:	    }
2436:	}
2437:	AP Practice Test 4.........................................................................
2438:	// Question 1...
2439:	(A) 
2440:	(B) 
2441:	(C) 
2442:	(D) 
2443:	(E) 
2444:	// Answer 1...
2445:	// Question 2...
2446:	(A) 
2447:	(B) 
2448:	(C) 
2449:	(D) 
2450:	(E) 
2451:	// Answer 2...
2452:	// Question 3...
2453:	(A) 
2454:	(B) 
2455:	(C) 
2456:	(D) 
2457:	(E) 
2458:	// Answer 3...
2459:	// Question 4...
2460:	(A) 
2461:	(B) 
2462:	(C) 
2463:	(D) 
2464:	(E) 
2465:	// Answer 4...
2466:	// Question 5...
2467:	(A) 
2468:	(B) 
2469:	(C) 
2470:	(D) 
2471:	(E) 
2472:	// Answer 5...
2473:	// Question 6...
2474:	(A) 
2475:	(B) 
2476:	(C) 
2477:	(D) 
2478:	(E) 
2479:	// Answer 6...
2480:	// Question 7...
2481:	(A) 
2482:	(B) 
2483:	(C) 
2484:	(D) 
2485:	(E) 
2486:	// Answer 7...
2487:	// Question 8...
2488:	(A) 
2489:	(B) 
2490:	(C) 
2491:	(D) 
2492:	(E) 
2493:	// Answer 8...
2494:	// Question 9...
2495:	(A) 
2496:	(B) 
2497:	(C) 
2498:	(D) 
2499:	(E) 
2500:	// Answer 9...
2501:	// Question 10...
2502:	(A) 
2503:	(B) 
2504:	(C) 
2505:	(D) 
2506:	(E) 
2507:	// Answer 10...
2508:	Computer Science 42SAP Post Secondary Content:.............................................
2509:	Fun Friday (and Thursday) Content:.........................................................
2510:	More post secondary content:...............................................................
2511:	Permanent Storage Post Secondary Content:..................................................
2512:	// Learn about 'error traps'
2513:	Divide by zero -> java.lang.ArithmeticException: / by zero
2514:	// Create sample data to use
2515:	// Save ONE piece of data to that permanent file
2516:	File write error
2517:	// Now involve the user to get a file name
2518:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2519:	File already exists!
2520:	// Open file with one line (no user involvment)
2521:	// Open file with multiple lines (user picks file)
2522:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2523:	This line read was �� sr utility.collections.LinkedList�̉-�� I 	NOT_FOUNDI lengthI longestWordL headt Lutility/collections/Node;L tailq ~ xp����   d   +sr utility.collections.Node5�����2 ... (line shortened) ...
2524:	This line read was opponentScoreL opponentNamet Ljava/lang/String;xp           t  sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~  ... (line shortened) ...
2525:	This line read was q ~ pq ~ �
2526:	// Class to save/open one line (no user)
2527:	File save: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2528:	File open: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2529:	Before: Defenestration
2530:	After : null
2531:	// Class to save/open multiple lines (with user)
2532:	Before: [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2533:	After:  [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2534:	// Now save/open on a complex data type
2535:	File open: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2536:	File open: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2537:	Before: Athlete: Husky: HighSchool: Student: Person
2538:	Before: Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2539:	After:  Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2540:	Stacks and Queues Post Secondary Content:..................................................
2541:	// Create objects for testing...
2542:	// Create and Test a stack object...
2543:	// Test toString, size, isEmpty, and push methods...
2544:	Empty = true	Size = 0	Empty Stack
2545:	// Loop through adding random values
2546:	Empty = false	Size = 1	Stack top -> [chair] <- bottom
2547:	Empty = false	Size = 2	Stack top -> [Parks,chair] <- bottom
2548:	Empty = false	Size = 3	Stack top -> [cunts,Parks,chair] <- bottom
2549:	Empty = false	Size = 4	Stack top -> [paxes,cunts,Parks,chair] <- bottom
2550:	Empty = false	Size = 5	Stack top -> [motto,paxes,cunts,Parks,chair] <- bottom
2551:	Empty = false	Size = 6	Stack top -> [sured,motto,paxes,cunts,Parks,chair] <- bottom
2552:	Empty = false	Size = 7	Stack top -> [jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2553:	Empty = false	Size = 8	Stack top -> [Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2554:	Empty = false	Size = 9	Stack top -> [viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2555:	Empty = false	Size = 10	Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2556:	// Test clone method...
2557:	Clone stack: Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2558:	// Test equals method...
2559:	Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
==
Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2560:	// Now change the copy
2561:	// Now check again
2562:	Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
!=
Stack top -> [Amiga] <- bottom
2563:	// Re-clone the stack, and output
2564:	Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2565:	// Text the pop method...
2566:	Clone stack:	Empty = false	Size = 10	Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2567:	// Loop through removing values
2568:	Popped -> naiad	Empty = false	Size = 9	Stack top -> [viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2569:	Popped -> viper	Empty = false	Size = 8	Stack top -> [Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2570:	Popped -> Cathi	Empty = false	Size = 7	Stack top -> [jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2571:	Popped -> jumps	Empty = false	Size = 6	Stack top -> [sured,motto,paxes,cunts,Parks,chair] <- bottom
2572:	Popped -> sured	Empty = false	Size = 5	Stack top -> [motto,paxes,cunts,Parks,chair] <- bottom
2573:	Popped -> motto	Empty = false	Size = 4	Stack top -> [paxes,cunts,Parks,chair] <- bottom
2574:	Popped -> paxes	Empty = false	Size = 3	Stack top -> [cunts,Parks,chair] <- bottom
2575:	Popped -> cunts	Empty = false	Size = 2	Stack top -> [Parks,chair] <- bottom
2576:	Popped -> Parks	Empty = false	Size = 1	Stack top -> [chair] <- bottom
2577:	Popped -> chair	Empty = true	Size = 0	Empty Stack
2578:	Popped -> null	Empty = true	Size = 0	Empty Stack
2579:	// Test peek (top is wrapper no testing needed)...
2580:	Clone Top = null
2581:	Stack Top = naiad
2582:	// Test to array and to linked list...
2583:	Linked List 	[naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair]
2584:	Array   	[naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair]
2585:	// Test our constructors...
2586:	Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2587:	Stack top -> [naiad,viper,Cathi,jumps,sured,motto,paxes,cunts,Parks,chair] <- bottom
2588:	// Test the Queue object...
2589:	// Test toString,size,isEmpty, and enqueue methods...
2590:	Empty = true	Size = 0	Empty Queue
2591:	// Loop through adding random values
2592:	Empty = false	Size = 1	Queue back -> [inked] <- front
2593:	Empty = false	Size = 2	Queue back -> [beryl,inked] <- front
2594:	Empty = false	Size = 3	Queue back -> [Lemke,beryl,inked] <- front
2595:	Empty = false	Size = 4	Queue back -> [halls,Lemke,beryl,inked] <- front
2596:	Empty = false	Size = 5	Queue back -> [toast,halls,Lemke,beryl,inked] <- front
2597:	Empty = false	Size = 6	Queue back -> [Sibby,toast,halls,Lemke,beryl,inked] <- front
2598:	Empty = false	Size = 7	Queue back -> [argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2599:	Empty = false	Size = 8	Queue back -> [peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2600:	Empty = false	Size = 9	Queue back -> [fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2601:	Empty = false	Size = 10	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2602:	// Test clone method...
2603:	Clone Queue 			Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2604:	// Test equals method...
2605:	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
==
Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2606:	// Now change the duplicate
2607:	// Now check again
2608:	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
==
Queue back -> [trait] <- front
2609:	// Re-clone the queue, and output
2610:	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2611:	// Test the dequeue method...
2612:	Clone queue:	Empty = false	Size = 10	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2613:	// Loop through removing values
2614:	Dequeued -> inked	Empty = false	Size = 9	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl] <- front
2615:	Dequeued -> beryl	Empty = false	Size = 8	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke] <- front
2616:	Dequeued -> Lemke	Empty = false	Size = 7	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls] <- front
2617:	Dequeued -> halls	Empty = false	Size = 6	Queue back -> [Corie,fifed,peens,argue,Sibby,toast] <- front
2618:	Dequeued -> toast	Empty = false	Size = 5	Queue back -> [Corie,fifed,peens,argue,Sibby] <- front
2619:	Dequeued -> Sibby	Empty = false	Size = 4	Queue back -> [Corie,fifed,peens,argue] <- front
2620:	Dequeued -> argue	Empty = false	Size = 3	Queue back -> [Corie,fifed,peens] <- front
2621:	Dequeued -> peens	Empty = false	Size = 2	Queue back -> [Corie,fifed] <- front
2622:	Dequeued -> fifed	Empty = false	Size = 1	Queue back -> [Corie] <- front
2623:	Dequeued -> Corie	Empty = true	Size = 0	Empty Queue
2624:	Dequeued -> null	Empty = true	Size = 0	Empty Queue
2625:	// Test front and back...
2626:	Clone Front = null
2627:	Queue Front = inked
2628:	Clone Back  = null
2629:	Queue Back  = Corie
2630:	// Test to array and to linked list...
2631:	Linked List 	[Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked]
2632:	Array   	[Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked]
2633:	// Test our constructors...
2634:	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2635:	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2636:	// Constructors from stack to queue (and back)...
2637:	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front	 into 	Stack top -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- bottom
2638:	Stack top -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- bottom	 into 	Queue back -> [Corie,fifed,peens,argue,Sibby,toast,halls,Lemke,beryl,inked] <- front
2639:	Searching and Sorting Post Secondary Content:..............................................
2640:	// For the I.B. Exam, you only need to know:
2641:	// Search: linear search and binary search
2642:	// Sort: bubble sort and the selection sort
2643:	// Create some constants (edges) for the data
2644:	// Create some random data to search through and sort
2645:	// Including edge cases to test
2646:	// Create data to store the results...
2647:	// The simpliest of searches
2648:	Array [97,53,81,47,37,44,71,71,22,93,69,80,77,9,10,5,85,71,65,74,73,72,56,13,0,80,32,25,38,57,47,53,93,76,65,31,84,24,83,75,86,55,59,60,11,88,78,16,20,59,45,21,66,83,77,18,87,55,99,11,17,24,71,35,20,1 ... (line shortened) ...
2649:	// Now the linear search on all test data
2650:	Array [97,53,81,47,37,44,71,71,22,93,69,80,77,9,10,5,85,71,65,74,73,72,56,13,0,80,32,25,38,57,47,53,93,76,65,31,84,24,83,75,86,55,59,60,11,88,78,16,20,59,45,21,66,83,77,18,87,55,99,11,17,24,71,35,20,1 ... (line shortened) ...
2651:	Array [97,53,81,47,37,44,71,71,22,93,69,80,77,9,10,5,85,71,65,74,73,72,56,13,0,80,32,25,38,57,47,53,93,76,65,31,84,24,83,75,86,55,59,60,11,88,78,16,20,59,45,21,66,83,77,18,87,55,99,11,17,24,71,35,20,1 ... (line shortened) ...
2652:	Array [97,53,81,47,37,44,71,71,22,93,69,80,77,9,10,5,85,71,65,74,73,72,56,13,0,80,32,25,38,57,47,53,93,76,65,31,84,24,83,75,86,55,59,60,11,88,78,16,20,59,45,21,66,83,77,18,87,55,99,11,17,24,71,35,20,1 ... (line shortened) ...
2653:	Array [97,53,81,47,37,44,71,71,22,93,69,80,77,9,10,5,85,71,65,74,73,72,56,13,0,80,32,25,38,57,47,53,93,76,65,31,84,24,83,75,86,55,59,60,11,88,78,16,20,59,45,21,66,83,77,18,87,55,99,11,17,24,71,35,20,1 ... (line shortened) ...
2654:	Array [97,53,81,47,37,44,71,71,22,93,69,80,77,9,10,5,85,71,65,74,73,72,56,13,0,80,32,25,38,57,47,53,93,76,65,31,84,24,83,75,86,55,59,60,11,88,78,16,20,59,45,21,66,83,77,18,87,55,99,11,17,24,71,35,20,1 ... (line shortened) ...
2655:	// Simple sort...
2656:	Sorted Array: 	[0,1,5,6,9,10,10,10,11,11,13,13,15,16,16,17,17,18,20,20,21,22,24,24,25,27,31,32,33,35,35,37,38,39,41,44,45,47,47,48,48,49,49,53,53,53,55,55,55,56,56,57,58,59,59,60,61,61,62,65,65,66,68, ... (line shortened) ...
2657:	// We will re-scramble array for further testing
2658:	Sorted Array: 	[30,65,27,13,45,7,17,17,74,13,71,60,79,2,29,49,99,98,83,54,47,1,65,56,22,64,78,58,36,63,48,14,46,100,15,5,18,18,9,99,94,88,92,99,34,43,94,29,15,54,87,48,2,50,28,32,84,96,72,57,83,92,36, ... (line shortened) ...
2659:	// Now bubble sort (from bubbles rising from water)
2660:	Original Array 	[30,65,27,13,45,7,17,17,74,13,71,60,79,2,29,49,99,98,83,54,47,1,65,56,22,64,78,58,36,63,48,14,46,100,15,5,18,18,9,99,94,88,92,99,34,43,94,29,15,54,87,48,2,50,28,32,84,96,72,57,83,92,36 ... (line shortened) ...
2661:	// Now selection sort (from selecting the smallest)
2662:	Original Array 	[30,65,27,13,45,7,17,17,74,13,71,60,79,2,29,49,99,98,83,54,47,1,65,56,22,64,78,58,36,63,48,14,46,100,15,5,18,18,9,99,94,88,92,99,34,43,94,29,15,54,87,48,2,50,28,32,84,96,72,57,83,92,36 ... (line shortened) ...
2663:	// Now binary search (named after two or dividing)
2664:	// NOTE: binary search can only happen on sorted list
2665:	// Redo some of the test data...
2666:	Array [1,1,2,2,2,5,7,7,9,9,11,13,13,14,15,15,15,16,17,17,18,18,22,23,24,24,24,27,27,28,28,29,29,29,29,30,30,32,34,34,36,36,36,43,43,43,45,46,47,47,48,48,49,50,54,54,56,57,58,60,63,63,64,65,65,66,67,68 ... (line shortened) ...
2667:	Array [1,1,2,2,2,5,7,7,9,9,11,13,13,14,15,15,15,16,17,17,18,18,22,23,24,24,24,27,27,28,28,29,29,29,29,30,30,32,34,34,36,36,36,43,43,43,45,46,47,47,48,48,49,50,54,54,56,57,58,60,63,63,64,65,65,66,67,68 ... (line shortened) ...
2668:	Array [1,1,2,2,2,5,7,7,9,9,11,13,13,14,15,15,15,16,17,17,18,18,22,23,24,24,24,27,27,28,28,29,29,29,29,30,30,32,34,34,36,36,36,43,43,43,45,46,47,47,48,48,49,50,54,54,56,57,58,60,63,63,64,65,65,66,67,68 ... (line shortened) ...
2669:	Array [1,1,2,2,2,5,7,7,9,9,11,13,13,14,15,15,15,16,17,17,18,18,22,23,24,24,24,27,27,28,28,29,29,29,29,30,30,32,34,34,36,36,36,43,43,43,45,46,47,47,48,48,49,50,54,54,56,57,58,60,63,63,64,65,65,66,67,68 ... (line shortened) ...
2670:	Array [1,1,2,2,2,5,7,7,9,9,11,13,13,14,15,15,15,16,17,17,18,18,22,23,24,24,24,27,27,28,28,29,29,29,29,30,30,32,34,34,36,36,36,43,43,43,45,46,47,47,48,48,49,50,54,54,56,57,58,60,63,63,64,65,65,66,67,68 ... (line shortened) ...
2671:	// Use class for searching and sorting
2672:	// Create random linked list data
2673:	// Create random array data
2674:	// Place all test cases into another linked list
2675:	// Execute the linear search on all list test data...
2676:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2677:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2678:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2679:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2680:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2681:	// Execute the linear search on all array test data...
2682:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2683:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2684:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2685:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2686:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2687:	// Execute all the sorts on all test data...
2688:	// Bubble sort LinkedList data...
2689:	Before: 	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bi ... (line shortened) ...
2690:	// Bubble sort array data...
2691:	Before: 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott, ... (line shortened) ...
2692:	// Selection sort LinkedList data...
2693:	Before: 	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bi ... (line shortened) ...
2694:	// Selection sort array data...
2695:	Before: 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott, ... (line shortened) ...
2696:	// Shell sort LinkedList data...
2697:	Before: 	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bi ... (line shortened) ...
2698:	// Shell sort array data...
2699:	Before: 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott, ... (line shortened) ...
2700:	// Insertion sort LinkedList data...
2701:	Before: 	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bi ... (line shortened) ...
2702:	// Insertion sort array data...
2703:	Before: 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott, ... (line shortened) ...
2704:	// Quick sort LinkedList data...
2705:	Before: 	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bi ... (line shortened) ...
2706:	// Quick sort array data...
2707:	Before: 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott, ... (line shortened) ...
2708:	// Merge sort LinkedList data...
2709:	Before: 	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bi ... (line shortened) ...
2710:	// Merge sort array data...
2711:	Before: 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott, ... (line shortened) ...
2712:	// Heap sort LinkedList data...
2713:	Before: 	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bi ... (line shortened) ...
2714:	// Heap sort array data...
2715:	Before: 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott, ... (line shortened) ...
2716:	// Execute the binary search on all List test data...
2717:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2718:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2719:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2720:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2721:	Linked List 	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,M ... (line shortened) ...
2722:	// Execute the binary search on all Array test data...
2723:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2724:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2725:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2726:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2727:	[eyed,duff,Zara,wort,solo,mtge,Gish,Shel,deep,ewes,poor,sums,Ivar,slam,musk,isms,Liam,Seka,mobs,maul,coos,tare,time,mutt,Dona,Bran,Peta,Free,pols,gins,Miro,ipso,Maya,Gill,eeks,Bird,Neel,Mott,Lory,Pier ... (line shortened) ...
2728:	Binary Trees Post Secondary Content:.......................................................
2729:	// Constants/variables for creating random values...
2730:	// Creating some TreeNode objects...
2731:	// Linking the TreeNodes...
2732:	// Testing TreeNode equals...
2733:	// Testing TreeNode toString...
2734:	78
2735:	59
2736:	22
2737:	// Creating a Tree object...
2738:	// Test the insert method...
2739:	// Insert one more...
2740:	// Test the search of the tree...
2741:	Should be found     = true
2742:	Should NOT be found = false
2743:	// Test toString() and pre, post, in order traversals
2744:	Binary Tree:
Order: Linked List 	[33,45,71,45,20,86]
Pre:   Linked List 	[33,20,45,71,45,86]
Post:  Linked List 	[20,45,86,71,45,33]
In:    Linked List 	[20,33,45,45,71,86]
2745:	// Building second tree (test clone) and test equals
2746:	1st tree -> Linked List 	[20,33,45,45,71,86]
2747:	2nd tree -> Linked List 	[17,20,57,58,65,95]
2748:	1st!=2nd
2749:	// Building a third tree (test clone) and test equals
2750:	1st tree -> Linked List 	[20,33,45,45,71,86]
2751:	3rd tree -> Linked List 	[20,33,45,45,71,86]
2752:	1st==3rd
2753:	// Build all our data structures from each other...
2754:	// Create variable objects...
2755:	// Create array from variables...
2756:	// Create LinkedList from array...
2757:	// Create Stack from LinkedList...
2758:	// Create Queue from Stack...
2759:	// Create Tree from Queue...
2760:	// Output variables,array,list,stack,queue,tree...
2761:	scamp
2762:	moors
2763:	codee
2764:	orrin
2765:	beast
2766:	[scamp,moors,codee,orrin,beast]
2767:	Linked List 	[scamp,moors,codee,orrin,beast]
2768:	Stack top -> [scamp,moors,codee,orrin,beast] <- bottom
2769:	Queue back -> [scamp,moors,codee,orrin,beast] <- front
2770:	Binary Tree:
Order: Linked List 	[scamp,moors,codee,orrin,beast]
Pre:   Linked List 	[scamp,moors,codee,beast,orrin]
Post:  Linked List 	[beast,codee,orrin,moors,scamp]
In:    Linked List 	[beast,code ... (line shortened) ...
2771:	// Now re-building queue from tree
2772:	// Now re-building stack from queue
2773:	// Now re-building LinkedList from stack...
2774:	// Now re-building array from LinkedList...
2775:	// Output array,list,stack,queue,tree again...
2776:	[beast,codee,moors,orrin,scamp]
2777:	Linked List 	[beast,codee,moors,orrin,scamp]
2778:	Stack top -> [beast,codee,moors,orrin,scamp] <- bottom
2779:	Queue back -> [beast,codee,moors,orrin,scamp] <- front
2780:	Binary Tree:
Order: Linked List 	[scamp,moors,codee,orrin,beast]
Pre:   Linked List 	[scamp,moors,codee,beast,orrin]
Post:  Linked List 	[beast,codee,orrin,moors,scamp]
In:    Linked List 	[beast,code ... (line shortened) ...
