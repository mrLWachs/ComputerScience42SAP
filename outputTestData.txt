1:	Computer Science 42SAP - Mr. Wachs' Computer Science content running simulated:............
2:	Computer Science 42SAP - Curriculum content running simulated:.............................
3:	Computer Science 42SAP - AP curriculum - Unit 1: Using Objects and Methods content running simulated:.
4:	Unit 1 - Using Objects and Methods.........................................................
5:	1.1 - Introduction to Algorithms, Programming, and Compilers...............................
6:	   1.1.1 - Represent patterns and algorithms found in everyday life using written 
7:	              language or diagrams.
8:	      1.1.1.1 - Algorithms define step-by-step processes to follow when completing 
9:	                 a task or solving a problem. These algorithms can be represented using written 
10:	                 language or diagrams.
11:	      1.1.1.2 - Sequencing defines an order for when steps in a process are completed. 
12:	                 Steps in a process are completed one at a time.
13:	   1.1.2 - Explain the code compilation and execution process. 
14:	      1.1.2.1 - Code can be written in any text editor; however, an integrated development 
15:	                 environment (IDE) is often used to write programs because it provides tools 
16:	                 for a programmer to write, compile, and run code. 
17:	      1.1.2.2 - A compiler checks code for some errors. Errors detectable by the 
18:	                 compiler need to be fixed before the program can be run.
19:	   1.1.3 - Identify types of programming errors.
20:	      1.1.3.1 - A syntax error is a mistake in the program where the rules of the 
21:	                 programming language are not followed. These errors are detected by the compiler. 
22:	      1.1.3.2 - A logic error is a mistake in the algorithm or program that causes 
23:	                 it to behave incorrectly or unexpectedly. These errors are detected by testing 
24:	                 the program with specific data to see if it produces the expected outcome. 
25:	      1.1.3.3 - A run-time error is a mistake in the program that occurs during 
26:	                 the execution of a program. Run-time errors typically cause the program to 
27:	                 terminate abnormally. 
28:	      1.1.3.4 - An exception is a type of run-time error that occurs as a result 
29:	                 of an unexpected error that was not detected by the compiler. It interrupts 
30:	                 the normal flow of the program's execution.
31:	// comment here
32:	code here
33:	standard output here
34:	Computer Science 42SAP - AP curriculum - Unit 2: Selection and Iteration  content running simulated:.
35:	Unit 2 - Selection and Iteration...........................................................
36:	2.1 - Algorithms with Selection and Repetition.............................................
37:	   2.1.1 - Represent patterns and algorithms that involve selection and repetition 
38:	              found in everyday life using written language or diagrams.
39:	      2.1.1.1 - The building blocks of algorithms include sequencing, selection, 
40:	                 and repetition. 
41:	      2.1.1.2 - Algorithms can contain selection, through decision making, and repetition, 
42:	                 via looping.
43:	      2.1.1.3 - Selection occurs when a choice of how the execution of an algorithm 
44:	                 will proceed is based on a true or false decision.
45:	      2.1.1.4 - Repetition is when a process repeats itself until a desired outcome 
46:	                 is reached.
47:	      2.1.1.5 - The order in which sequencing, selection, and repetition are used 
48:	                 contributes to the outcome of the algorithm.
49:	// comment here
50:	code here
51:	standard output here
52:	Computer Science 42SAP - AP curriculum - Unit 3: Class Creation content running simulated:.
53:	Unit 3 - Class Creation....................................................................
54:	3.1 - Abstraction and Program Design.......................................................
55:	   3.1.1 - Represent the design of a program by using natural language or creating 
56:	              diagrams that indicate the classes in the program and the data and procedural 
57:	              abstractions found in each class by including all attributes and behaviors. 
58:	      3.1.1.1 - Abstraction is the process of reducing complexity by focusing on 
59:	                 the main idea. By hiding details irrelevant to the question at hand and bringing 
60:	                 together related and useful details, abstraction reduces complexity and allows 
61:	                 one to focus on the idea.
62:	      3.1.1.2 - Data abstraction provides a separation between the abstract properties 
63:	                 of a data type and the concrete details of its  representation. Data abstraction 
64:	                 manages complexity by giving data a name without referencing the specific 
65:	                 details of the representation.  Data can take the form of a single variable 
66:	                 or a collection of data, such as in a class or a set of data.
67:	      3.1.1.3 - An attribute is a type of data abstraction that is defined in a 
68:	                 class outside any method or constructor. An instance variable is an attribute 
69:	                 whose value is unique to each instance of the class. A class variable is an 
70:	                 attribute shared by all instances of the class.
71:	      3.1.1.4 - Procedural abstraction provides a name for a process and allows 
72:	                 a method to be used only knowing what it does, not how it does it. Through 
73:	                 method decomposition, a programmer breaks down larger behaviors of the class 
74:	                 into smaller behaviors by creating methods to represent each individual smaller 
75:	                 behavior. A procedural abstraction may extract shared features to generalize 
76:	                 functionality instead of duplicating code. This allows for code reuse, which 
77:	                 helps manage complexity 
78:	      3.1.1.5 - Using parameters allows procedures to be generalized, enabling the 
79:	                 procedures to be reused with a range of input values or arguments.
80:	      3.1.1.6 - Using procedural abstraction in a program allows programmers to 
81:	                 change the internals of a method (to make it faster, more  efficient, use 
82:	                 less storage, etc.) without needing to notify method users of the change as 
83:	                 long as the method signature and what the  method does is preserved.
84:	      3.1.1.7 - Prior to implementing a class, it is helpful to take time to design 
85:	                 each class including its attributes and behaviors. This design can be represented 
86:	                 using natural language or diagrams.
87:	// comment here
88:	code here
89:	standard output here
90:	Computer Science 42SAP - AP curriculum - Unit 4: Data Collections content running simulated:.
91:	Unit 4 - Data Collections..................................................................
92:	4.1 - Ethical and Social Issues Around Data Collection.....................................
93:	   4.1.1 - Explain the risks to privacy from collecting and storing personal data 
94:	              on computer systems.
95:	      4.1.1.1 - When using a computer, personal privacy is at risk. When developing 
96:	                 new programs, programmers should attempt to safeguard the personal privacy 
97:	                 of the user.
98:	   4.1.2 - Explain the importance of recognizing data quality and potential issues 
99:	              when using a data set.
100:	      4.1.2.1 - Algorithmic bias describes systemic and repeated errors in a program 
101:	                 that create unfair outcomes for a specific group of users.
102:	      4.1.2.2 - Programmers should be aware of the data set collection method and 
103:	                 the potential for bias when using this method before using  the data to extrapolate 
104:	                 new information or drawing conclusions.
105:	      4.1.2.3 - Some data sets are incomplete or contain inaccurate data. Using 
106:	                 such data in the development or use of a program can cause the program to 
107:	                 work incorrectly or inefficiently. 
108:	   4.1.3 - Identify an appropriate data set to use in order to solve a problem or 
109:	              answer a specific question.
110:	      4.1.3.1 - Contents of a data set might be related to a specific question or 
111:	                 topic and might not be appropriate to give correct answers or extrapolate 
112:	                 information for a different question or topic.
113:	// comment here
114:	code here
115:	standard output here
