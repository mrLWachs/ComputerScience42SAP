1:	Mr. Wachs' Computer Science Classes........................................................
2:	Computer Science 42SAP Prerequisite Content:...............................................
3:	Computer Science 20S Course:...............................................................
4:	~~~ SIMULATED {GUI Frame} DIALOG: unit2Introduction ~~~ 
5:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables1 ~~~ 
6:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables2 ~~~ 
7:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals1 ~~~ 
8:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals2 ~~~ 
9:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping1 ~~~ 
10:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping2 ~~~ 
11:	Computer Science 30S Course:...............................................................
12:	Hello World
13:	I'm in the world
14:	Good-bye world!
15:	Make a quote " 
16:	Make a slash \ 
17:	Make a 	 tab 
18:	Make a new line 
 break 
19:	~~~ SIMULATED {Message} DIALOG: Hi ~~~ 
20:	~~~ SIMULATED {Message} DIALOG: Information icon is i ~~~ { title: Information title },
21:	~~~ SIMULATED {Message} DIALOG: Question icon is i ~~~ { title: Question title },
22:	~~~ SIMULATED {Message} DIALOG: Warning icon is i ~~~ { title: Warning title },
23:	~~~ SIMULATED {Message} DIALOG: Plain icon is i ~~~ { title: Plain title },
24:	~~~ SIMULATED {Input} DIALOG: Enter Something ~~~ 
25:	~~~ SIMULATED {Input} DIALOG: Information icon is i ~~~ 
26:	~~~ SIMULATED {Input} DIALOG: Question icon is i ~~~ 
27:	~~~ SIMULATED {Input} DIALOG: Warning icon is i ~~~ 
28:	~~~ SIMULATED {Input} DIALOG: Plain icon is i ~~~ 
29:	~~~ SIMULATED {Confirm} DIALOG: Confirm ~~~ 
30:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 2 ~~~ { title: Information },{ messageType: 1 },
31:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 3 ~~~ { title: Question },{ optionType: -1 },{ messageType: 3 },
32:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 4 ~~~ { title: Warning },{ optionType: 2 },{ messageType: 2 },
33:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 5 ~~~ { title: Plain },{ optionType: 1 },{ messageType: -1 },
34:	a = false
35:	b = 1
36:	c = 1.2
37:	d = A
38:	e = apple
39:	x = 10
40:	x = 20
41:	y = 30
42:	y = 30
43:	x = 28
44:	y = 5
45:	z = 3
46:	3.141592658389, 99, Y, true, Wachs
47:	f = 25
48:	g = 25.0
49:	g = 25.999999999999
50:	h = 25
51:	k = 2.99999999
52:	l = 2
53:	m = 2.0
54:	n = A
55:	o = 65
56:	p = F
57:	~~~ SIMULATED {Input} DIALOG: Enter ~~~ 
58:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
59:	~~~ SIMULATED {Input} DIALOG: Enter int ~~~ 
60:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
61:	~~~ SIMULATED {Input} DIALOG: Enter double ~~~ 
62:	~~~ SIMULATED {Message} DIALOG: -1.0 ~~~ 
63:	~~~ SIMULATED {Input} DIALOG: Enter char ~~~ 
64:	~~~ SIMULATED {Message} DIALOG: - ~~~ 
65:	Word hippopotomonsprosesquippedaiophobia is length 35
66:	Word hippopotomonsprosesquippedaiophobia in upper case is HIPPOPOTOMONSPROSESQUIPPEDAIOPHOBIA
67:	answer1 = 3.141592653589793
68:	answer2 = 0.8775825618903728
69:	answer3 = 1.0
70:	answer4 = 125.0
71:	answer5 = 3.0
72:	answer6 = -0.6931471805599453
73:	seed = 0.004857016257566293
74:	low    = 1.0
75:	high   = 10.0
76:	number = 1.048570162575663
77:	value = 1
78:	card is 2
79:	equal
80:	The example is less than
81:	!=
82:	W1 kind of == W2
83:	Keep trying
84:	counter = 0
85:	counter = 1
86:	counter = 2
87:	counter = 3
88:	counter = 4
89:	counter = 5
90:	counter = 6
91:	counter = 7
92:	counter = 8
93:	counter = 9
94:	~~~ SIMULATED {Input} DIALOG: Create a password ~~~ 
95:	~~~ SIMULATED {Message} DIALOG: Ok, continue... ~~~ 
96:	~~~ SIMULATED {Input} DIALOG: Enter password ~~~ 
97:	~~~ SIMULATED {Message} DIALOG: You got it ~~~ 
98:	i = 0
99:	i = 1
100:	i = 2
101:	i = 3
102:	i = 4
103:	i = 5
104:	i = 6
105:	i = 7
106:	i = 8
107:	i = 9
108:	counting = 100
109:	counting = 90
110:	counting = 80
111:	counting = 70
112:	counting = 60
113:	counting = 50
114:	counting = 40
115:	counting = 30
116:	counting = 20
117:	counting = 10
118:	counting = 0
119:	i = 99.789
120:	i = 19.007428571428573
121:	~~~ SIMULATED {Message} DIALOG: You are an intern at radio station, C-RAP, The 
disk jockeys announce the current temperature 
in both Fahrenheit and Celsius every half-hour.
They would like an easy w ... (line shortened) ...
122:	~~~ SIMULATED {Input} DIALOG: Enter temperature in Celcius ~~~ 
123:	~~~ SIMULATED {Message} DIALOG: Your temperature in Fahrenheit is 30.2 ~~~ 
124:	~~~ SIMULATED {Message} DIALOG: Thank you! ~~~ 
125:	Starting to Learn methods...
126:	*
127:	*
128:	Phenakistoscope
129:	Volleywood
130:	pancakes
131:	Spider-man
132:	Batman
133:	Dalmations
134:	Dalmations
135:	Dalmations
136:	Dalmations
137:	Dalmations
138:	Dalmations
139:	Dalmations
140:	Dalmations
141:	Dalmations
142:	Dalmations
143:	Dalmations
144:	Dalmations
145:	Dalmations
146:	Dalmations
147:	Dalmations
148:	Dalmations
149:	Dalmations
150:	Dalmations
151:	Dalmations
152:	Dalmations
153:	Dalmations
154:	Dalmations
155:	Dalmations
156:	Dalmations
157:	Dalmations
158:	Dalmations
159:	Dalmations
160:	Dalmations
161:	Dalmations
162:	Dalmations
163:	Dalmations
164:	Dalmations
165:	Dalmations
166:	Dalmations
167:	Dalmations
168:	Dalmations
169:	Dalmations
170:	Dalmations
171:	Dalmations
172:	Dalmations
173:	Dalmations
174:	Dalmations
175:	Dalmations
176:	Dalmations
177:	Dalmations
178:	Dalmations
179:	Dalmations
180:	Dalmations
181:	Dalmations
182:	Dalmations
183:	Dalmations
184:	Dalmations
185:	Dalmations
186:	Dalmations
187:	Dalmations
188:	Dalmations
189:	Dalmations
190:	Dalmations
191:	Dalmations
192:	Dalmations
193:	Dalmations
194:	Dalmations
195:	Dalmations
196:	Dalmations
197:	Dalmations
198:	Dalmations
199:	Dalmations
200:	Dalmations
201:	Dalmations
202:	Dalmations
203:	Dalmations
204:	Dalmations
205:	Dalmations
206:	Dalmations
207:	Dalmations
208:	Dalmations
209:	Dalmations
210:	Dalmations
211:	Dalmations
212:	Dalmations
213:	Dalmations
214:	Dalmations
215:	Dalmations
216:	Dalmations
217:	Dalmations
218:	Dalmations
219:	Dalmations
220:	Dalmations
221:	Dalmations
222:	Dalmations
223:	Dalmations
224:	Dalmations
225:	Dalmations
226:	Dalmations
227:	Dalmations
228:	Dalmations
229:	Dalmations
230:	Dalmations
231:	Dalmations
232:	Dalmations
233:	Dalmations
234:	Problems
235:	Problems
236:	Problems
237:	Problems
238:	Problems
239:	Problems
240:	Problems
241:	Problems
242:	Problems
243:	Problems
244:	Problems
245:	Problems
246:	Problems
247:	Problems
248:	Problems
249:	Problems
250:	Problems
251:	Problems
252:	Problems
253:	Problems
254:	Problems
255:	Problems
256:	Problems
257:	Problems
258:	Problems
259:	Problems
260:	Problems
261:	Problems
262:	Problems
263:	Problems
264:	Problems
265:	Problems
266:	Problems
267:	Problems
268:	Problems
269:	Problems
270:	Problems
271:	Problems
272:	Problems
273:	Problems
274:	Problems
275:	Problems
276:	Problems
277:	Problems
278:	Problems
279:	Problems
280:	Problems
281:	Problems
282:	Problems
283:	Problems
284:	Problems
285:	Problems
286:	Problems
287:	Problems
288:	Problems
289:	Problems
290:	Problems
291:	Problems
292:	Problems
293:	Problems
294:	Problems
295:	Problems
296:	Problems
297:	Problems
298:	Problems
299:	Problems
300:	Problems
301:	Problems
302:	Problems
303:	Problems
304:	Problems
305:	Problems
306:	Problems
307:	Problems
308:	Problems
309:	Problems
310:	Problems
311:	Problems
312:	Problems
313:	Problems
314:	Problems
315:	Problems
316:	Problems
317:	Problems
318:	Problems
319:	Problems
320:	Problems
321:	Problems
322:	Problems
323:	Problems
324:	Problems
325:	Problems
326:	Problems
327:	Problems
328:	Problems
329:	Problems
330:	Problems
331:	Problems
332:	Problems
333:	Number is 7
334:	~~~ SIMULATED {Message} DIALOG: Hello ~~~ 
335:	~~~ SIMULATED {Message} DIALOG: Good-bye ~~~ { title: Learning Methods },
336:	Completed Learning Methods!
337:	Start learning arrays...
338:	333
339:	666
340:	666
341:	0
342:	0
343:	0
344:	0
345:	0
346:	0
347:	0
348:	0
349:	0
350:	0
351:	0
352:	0
353:	0
354:	0
355:	0
356:	0
357:	0
358:	0
359:	0
360:	0
361:	0
362:	0
363:	0
364:	0
365:	0
366:	0
367:	0
368:	0
369:	0
370:	0
371:	0
372:	0
373:	0
374:	0
375:	0
376:	0
377:	0
378:	0
379:	0
380:	0
381:	0
382:	0
383:	0
384:	0
385:	0
386:	0
387:	0
388:	0
389:	0
390:	0
391:	0
392:	0
393:	0
394:	0
395:	0
396:	0
397:	0
398:	0
399:	0
400:	0
401:	0
402:	0
403:	0
404:	0
405:	0
406:	0
407:	0
408:	0
409:	0
410:	0
411:	0
412:	0
413:	0
414:	0
415:	0
416:	0
417:	0
418:	0
419:	0
420:	0
421:	0
422:	0
423:	0
424:	0
425:	0
426:	0
427:	0
428:	0
429:	0
430:	0
431:	0
432:	0
433:	0
434:	0
435:	0
436:	0
437:	0
438:	0
439:	333
440:	0 = 666
441:	1 = 0
442:	2 = 0
443:	3 = 0
444:	4 = 0
445:	5 = 0
446:	6 = 0
447:	7 = 0
448:	8 = 0
449:	9 = 0
450:	10 = 0
451:	11 = 0
452:	12 = 0
453:	13 = 0
454:	14 = 0
455:	15 = 0
456:	16 = 0
457:	17 = 0
458:	18 = 0
459:	19 = 0
460:	20 = 0
461:	21 = 0
462:	22 = 0
463:	23 = 0
464:	24 = 0
465:	25 = 0
466:	26 = 0
467:	27 = 0
468:	28 = 0
469:	29 = 0
470:	30 = 0
471:	31 = 0
472:	32 = 0
473:	33 = 0
474:	34 = 0
475:	35 = 0
476:	36 = 0
477:	37 = 0
478:	38 = 0
479:	39 = 0
480:	40 = 0
481:	41 = 0
482:	42 = 0
483:	43 = 0
484:	44 = 0
485:	45 = 0
486:	46 = 0
487:	47 = 0
488:	48 = 0
489:	49 = 0
490:	50 = 0
491:	51 = 0
492:	52 = 0
493:	53 = 0
494:	54 = 0
495:	55 = 0
496:	56 = 0
497:	57 = 0
498:	58 = 0
499:	59 = 0
500:	60 = 0
501:	61 = 0
502:	62 = 0
503:	63 = 0
504:	64 = 0
505:	65 = 0
506:	66 = 0
507:	67 = 0
508:	68 = 0
509:	69 = 0
510:	70 = 0
511:	71 = 0
512:	72 = 0
513:	73 = 0
514:	74 = 0
515:	75 = 0
516:	76 = 0
517:	77 = 0
518:	78 = 0
519:	79 = 0
520:	80 = 0
521:	81 = 0
522:	82 = 0
523:	83 = 0
524:	84 = 0
525:	85 = 0
526:	86 = 0
527:	87 = 0
528:	88 = 0
529:	89 = 0
530:	90 = 0
531:	91 = 0
532:	92 = 0
533:	93 = 0
534:	94 = 0
535:	95 = 0
536:	96 = 0
537:	97 = 0
538:	98 = 0
539:	99 = 333
540:	~~~ SIMULATED {Message} DIALOG: [25,250,2,-25,0,] ~~~ 
541:	~~~ SIMULATED {Message} DIALOG: [666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ... (line shortened) ...
542:	~~~ SIMULATED {Message} DIALOG: [0,0,0,1,2,] ~~~ 
543:	~~~ SIMULATED {Message} DIALOG: [7,2,7,4,4,5,8,2,5,4,1,4,3,3,1,7,4,5,1,2,3,3,2,1,3,5,1,1,8,7,10,9,10,6,9,3,1,8,8,2,1,4,7,8,1,3,7,1,1,6,] ~~~ 
544:	Random character was C
545:	t y w T K ) > ! l p ~ } I j K o x h i ~ [ 0 N G P C Y ( F O 
) < I & - c J @ q 0 : ; " a J y > $ h | * N / S I t m N 5 { 
q * 6 0 M r ) $ 5 # C X v ^ z r # . / l i t y ~ M 7 F m 5 ] 
Y . 7 : < d R y b ... (line shortened) ...
546:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
547:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
548:	X O X 
O X O 
X O X 

549:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
550:	Completed learning arrays!
551:	Start Learning classes...
552:	Complete Learning classes
553:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics1 ~~~ 
554:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics2 ~~~ 
555:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics3 ~~~ 
556:	Computer Science 40S Course:...............................................................
557:	Recursion test started...
558:	Recursive factorials............................
559:	-1 factorial = 1
560:	0 factorial = 1
561:	1 factorial = 1
562:	2 factorial = 2
563:	3 factorial = 6
564:	4 factorial = 24
565:	5 factorial = 120
566:	6 factorial = 720
567:	7 factorial = 5040
568:	8 factorial = 40320
569:	9 factorial = 362880
570:	10 factorial = 3628800
571:	11 factorial = 39916800
572:	12 factorial = 479001600
573:	13 factorial = 6227020800
574:	14 factorial = 87178291200
575:	15 factorial = 1307674368000
576:	16 factorial = 20922789888000
577:	17 factorial = 355687428096000
578:	18 factorial = 6402373705728000
579:	19 factorial = 121645100408832000
580:	20 factorial = 2432902008176640000
581:	Recursive powers................................
582:	-5 to the exponent -5 = -3.2E-4
583:	-4 to the exponent -5 = -9.765625E-4
584:	-3 to the exponent -5 = -0.00411522633744856
585:	-2 to the exponent -5 = -0.03125
586:	-1 to the exponent -5 = -1.0
587:	0 to the exponent -5 = 4.9E-324
588:	1 to the exponent -5 = 1.0
589:	2 to the exponent -5 = 0.03125
590:	3 to the exponent -5 = 0.00411522633744856
591:	4 to the exponent -5 = 9.765625E-4
592:	5 to the exponent -5 = 3.2E-4
593:	6 to the exponent -5 = 1.286008230452675E-4
594:	7 to the exponent -5 = 5.9499018266198606E-5
595:	8 to the exponent -5 = 3.0517578125E-5
596:	9 to the exponent -5 = 1.6935087808430286E-5
597:	10 to the exponent -5 = 1.0E-5
598:	-5 to the exponent -4 = 0.0016
599:	-4 to the exponent -4 = 0.00390625
600:	-3 to the exponent -4 = 0.012345679012345678
601:	-2 to the exponent -4 = 0.0625
602:	-1 to the exponent -4 = 1.0
603:	0 to the exponent -4 = 4.9E-324
604:	1 to the exponent -4 = 1.0
605:	2 to the exponent -4 = 0.0625
606:	3 to the exponent -4 = 0.012345679012345678
607:	4 to the exponent -4 = 0.00390625
608:	5 to the exponent -4 = 0.0016
609:	6 to the exponent -4 = 7.716049382716049E-4
610:	7 to the exponent -4 = 4.1649312786339027E-4
611:	8 to the exponent -4 = 2.44140625E-4
612:	9 to the exponent -4 = 1.5241579027587258E-4
613:	10 to the exponent -4 = 1.0E-4
614:	-5 to the exponent -3 = -0.008
615:	-4 to the exponent -3 = -0.015625
616:	-3 to the exponent -3 = -0.037037037037037035
617:	-2 to the exponent -3 = -0.125
618:	-1 to the exponent -3 = -1.0
619:	0 to the exponent -3 = 4.9E-324
620:	1 to the exponent -3 = 1.0
621:	2 to the exponent -3 = 0.125
622:	3 to the exponent -3 = 0.037037037037037035
623:	4 to the exponent -3 = 0.015625
624:	5 to the exponent -3 = 0.008
625:	6 to the exponent -3 = 0.004629629629629629
626:	7 to the exponent -3 = 0.0029154518950437317
627:	8 to the exponent -3 = 0.001953125
628:	9 to the exponent -3 = 0.0013717421124828531
629:	10 to the exponent -3 = 0.001
630:	-5 to the exponent -2 = 0.04
631:	-4 to the exponent -2 = 0.0625
632:	-3 to the exponent -2 = 0.1111111111111111
633:	-2 to the exponent -2 = 0.25
634:	-1 to the exponent -2 = 1.0
635:	0 to the exponent -2 = 4.9E-324
636:	1 to the exponent -2 = 1.0
637:	2 to the exponent -2 = 0.25
638:	3 to the exponent -2 = 0.1111111111111111
639:	4 to the exponent -2 = 0.0625
640:	5 to the exponent -2 = 0.04
641:	6 to the exponent -2 = 0.027777777777777776
642:	7 to the exponent -2 = 0.02040816326530612
643:	8 to the exponent -2 = 0.015625
644:	9 to the exponent -2 = 0.012345679012345678
645:	10 to the exponent -2 = 0.01
646:	-5 to the exponent -1 = -0.2
647:	-4 to the exponent -1 = -0.25
648:	-3 to the exponent -1 = -0.3333333333333333
649:	-2 to the exponent -1 = -0.5
650:	-1 to the exponent -1 = -1.0
651:	0 to the exponent -1 = 4.9E-324
652:	1 to the exponent -1 = 1.0
653:	2 to the exponent -1 = 0.5
654:	3 to the exponent -1 = 0.3333333333333333
655:	4 to the exponent -1 = 0.25
656:	5 to the exponent -1 = 0.2
657:	6 to the exponent -1 = 0.16666666666666666
658:	7 to the exponent -1 = 0.14285714285714285
659:	8 to the exponent -1 = 0.125
660:	9 to the exponent -1 = 0.1111111111111111
661:	10 to the exponent -1 = 0.1
662:	-5 to the exponent 0 = 1.0
663:	-4 to the exponent 0 = 1.0
664:	-3 to the exponent 0 = 1.0
665:	-2 to the exponent 0 = 1.0
666:	-1 to the exponent 0 = 1.0
667:	0 to the exponent 0 = 1.0
668:	1 to the exponent 0 = 1.0
669:	2 to the exponent 0 = 1.0
670:	3 to the exponent 0 = 1.0
671:	4 to the exponent 0 = 1.0
672:	5 to the exponent 0 = 1.0
673:	6 to the exponent 0 = 1.0
674:	7 to the exponent 0 = 1.0
675:	8 to the exponent 0 = 1.0
676:	9 to the exponent 0 = 1.0
677:	10 to the exponent 0 = 1.0
678:	-5 to the exponent 1 = -5.0
679:	-4 to the exponent 1 = -4.0
680:	-3 to the exponent 1 = -3.0
681:	-2 to the exponent 1 = -2.0
682:	-1 to the exponent 1 = -1.0
683:	0 to the exponent 1 = 0.0
684:	1 to the exponent 1 = 1.0
685:	2 to the exponent 1 = 2.0
686:	3 to the exponent 1 = 3.0
687:	4 to the exponent 1 = 4.0
688:	5 to the exponent 1 = 5.0
689:	6 to the exponent 1 = 6.0
690:	7 to the exponent 1 = 7.0
691:	8 to the exponent 1 = 8.0
692:	9 to the exponent 1 = 9.0
693:	10 to the exponent 1 = 10.0
694:	-5 to the exponent 2 = 25.0
695:	-4 to the exponent 2 = 16.0
696:	-3 to the exponent 2 = 9.0
697:	-2 to the exponent 2 = 4.0
698:	-1 to the exponent 2 = 1.0
699:	0 to the exponent 2 = 0.0
700:	1 to the exponent 2 = 1.0
701:	2 to the exponent 2 = 4.0
702:	3 to the exponent 2 = 9.0
703:	4 to the exponent 2 = 16.0
704:	5 to the exponent 2 = 25.0
705:	6 to the exponent 2 = 36.0
706:	7 to the exponent 2 = 49.0
707:	8 to the exponent 2 = 64.0
708:	9 to the exponent 2 = 81.0
709:	10 to the exponent 2 = 100.0
710:	-5 to the exponent 3 = -125.0
711:	-4 to the exponent 3 = -64.0
712:	-3 to the exponent 3 = -27.0
713:	-2 to the exponent 3 = -8.0
714:	-1 to the exponent 3 = -1.0
715:	0 to the exponent 3 = 0.0
716:	1 to the exponent 3 = 1.0
717:	2 to the exponent 3 = 8.0
718:	3 to the exponent 3 = 27.0
719:	4 to the exponent 3 = 64.0
720:	5 to the exponent 3 = 125.0
721:	6 to the exponent 3 = 216.0
722:	7 to the exponent 3 = 343.0
723:	8 to the exponent 3 = 512.0
724:	9 to the exponent 3 = 729.0
725:	10 to the exponent 3 = 1000.0
726:	-5 to the exponent 4 = 625.0
727:	-4 to the exponent 4 = 256.0
728:	-3 to the exponent 4 = 81.0
729:	-2 to the exponent 4 = 16.0
730:	-1 to the exponent 4 = 1.0
731:	0 to the exponent 4 = 0.0
732:	1 to the exponent 4 = 1.0
733:	2 to the exponent 4 = 16.0
734:	3 to the exponent 4 = 81.0
735:	4 to the exponent 4 = 256.0
736:	5 to the exponent 4 = 625.0
737:	6 to the exponent 4 = 1296.0
738:	7 to the exponent 4 = 2401.0
739:	8 to the exponent 4 = 4096.0
740:	9 to the exponent 4 = 6561.0
741:	10 to the exponent 4 = 10000.0
742:	-5 to the exponent 5 = -3125.0
743:	-4 to the exponent 5 = -1024.0
744:	-3 to the exponent 5 = -243.0
745:	-2 to the exponent 5 = -32.0
746:	-1 to the exponent 5 = -1.0
747:	0 to the exponent 5 = 0.0
748:	1 to the exponent 5 = 1.0
749:	2 to the exponent 5 = 32.0
750:	3 to the exponent 5 = 243.0
751:	4 to the exponent 5 = 1024.0
752:	5 to the exponent 5 = 3125.0
753:	6 to the exponent 5 = 7776.0
754:	7 to the exponent 5 = 16807.0
755:	8 to the exponent 5 = 32768.0
756:	9 to the exponent 5 = 59049.0
757:	10 to the exponent 5 = 100000.0
758:	-5 to the exponent 6 = 15625.0
759:	-4 to the exponent 6 = 4096.0
760:	-3 to the exponent 6 = 729.0
761:	-2 to the exponent 6 = 64.0
762:	-1 to the exponent 6 = 1.0
763:	0 to the exponent 6 = 0.0
764:	1 to the exponent 6 = 1.0
765:	2 to the exponent 6 = 64.0
766:	3 to the exponent 6 = 729.0
767:	4 to the exponent 6 = 4096.0
768:	5 to the exponent 6 = 15625.0
769:	6 to the exponent 6 = 46656.0
770:	7 to the exponent 6 = 117649.0
771:	8 to the exponent 6 = 262144.0
772:	9 to the exponent 6 = 531441.0
773:	10 to the exponent 6 = 1000000.0
774:	-5 to the exponent 7 = -78125.0
775:	-4 to the exponent 7 = -16384.0
776:	-3 to the exponent 7 = -2187.0
777:	-2 to the exponent 7 = -128.0
778:	-1 to the exponent 7 = -1.0
779:	0 to the exponent 7 = 0.0
780:	1 to the exponent 7 = 1.0
781:	2 to the exponent 7 = 128.0
782:	3 to the exponent 7 = 2187.0
783:	4 to the exponent 7 = 16384.0
784:	5 to the exponent 7 = 78125.0
785:	6 to the exponent 7 = 279936.0
786:	7 to the exponent 7 = 823543.0
787:	8 to the exponent 7 = 2097152.0
788:	9 to the exponent 7 = 4782969.0
789:	10 to the exponent 7 = 1.0E7
790:	-5 to the exponent 8 = 390625.0
791:	-4 to the exponent 8 = 65536.0
792:	-3 to the exponent 8 = 6561.0
793:	-2 to the exponent 8 = 256.0
794:	-1 to the exponent 8 = 1.0
795:	0 to the exponent 8 = 0.0
796:	1 to the exponent 8 = 1.0
797:	2 to the exponent 8 = 256.0
798:	3 to the exponent 8 = 6561.0
799:	4 to the exponent 8 = 65536.0
800:	5 to the exponent 8 = 390625.0
801:	6 to the exponent 8 = 1679616.0
802:	7 to the exponent 8 = 5764801.0
803:	8 to the exponent 8 = 1.6777216E7
804:	9 to the exponent 8 = 4.3046721E7
805:	10 to the exponent 8 = 1.0E8
806:	-5 to the exponent 9 = -1953125.0
807:	-4 to the exponent 9 = -262144.0
808:	-3 to the exponent 9 = -19683.0
809:	-2 to the exponent 9 = -512.0
810:	-1 to the exponent 9 = -1.0
811:	0 to the exponent 9 = 0.0
812:	1 to the exponent 9 = 1.0
813:	2 to the exponent 9 = 512.0
814:	3 to the exponent 9 = 19683.0
815:	4 to the exponent 9 = 262144.0
816:	5 to the exponent 9 = 1953125.0
817:	6 to the exponent 9 = 1.0077696E7
818:	7 to the exponent 9 = 4.0353607E7
819:	8 to the exponent 9 = 1.34217728E8
820:	9 to the exponent 9 = 3.87420489E8
821:	10 to the exponent 9 = 1.0E9
822:	-5 to the exponent 10 = 9765625.0
823:	-4 to the exponent 10 = 1048576.0
824:	-3 to the exponent 10 = 59049.0
825:	-2 to the exponent 10 = 1024.0
826:	-1 to the exponent 10 = 1.0
827:	0 to the exponent 10 = 0.0
828:	1 to the exponent 10 = 1.0
829:	2 to the exponent 10 = 1024.0
830:	3 to the exponent 10 = 59049.0
831:	4 to the exponent 10 = 1048576.0
832:	5 to the exponent 10 = 9765625.0
833:	6 to the exponent 10 = 6.0466176E7
834:	7 to the exponent 10 = 2.82475249E8
835:	8 to the exponent 10 = 1.073741824E9
836:	9 to the exponent 10 = 3.486784401E9
837:	10 to the exponent 10 = 1.0E10
838:	Recursion complete!
839:	Advanced Classes Test started...
840:	unidentified is 0 identifies as unidentified
841:	Per Soney is 0 identifies as unidentified
842:	Per Soney is 1 identifies as unidentified
843:	Booooo!
844:	unidentified is 0 identifies as unidentified
845:	I am a student
846:		 Number: 	1
847:		 GPA:    	0.0
848:	Stu Denty is 0 identifies as unidentified
849:	I am a student
850:		 Number: 	1
851:		 GPA:    	0.0
852:	Stu Denty is 0 identifies as unidentified
853:	I am a student
854:		 Number: 	1
855:		 GPA:    	0.3
856:	Stu Denty is 0 identifies as unidentified
857:	I am a student
858:		 Number: 	1
859:		 GPA:    	0.0
860:	Stu Denty is 0 identifies as unidentified
861:	I am a student
862:		 Number: 	1
863:		 GPA:    	3.0002999999999993
864:	Booooo!
865:	I am a student
866:		 Number: 	1
867:		 GPA:    	3.0002999999999993
868:	Stewie Griffin is 2 identifies as cat
869:	I am a student
870:		 Number: 	1
871:		 GPA:    	0.0
872:	Mr. Teachery is 45 identifies as teacher
873:	Mr. Teachery is 45 identifies as teacher
874:	Mr. Teachery is 45 identifies as teacher
875:	Booooo!
876:	I am a student
877:		 Number: 	1
878:		 GPA:    	3.300299999999999
879:	Stewie Griffin is 2 identifies as cat
880:	I am a student
881:		 Number: 	1
882:		 GPA:    	0.3
883:	O1 = java.lang.Object@282003e1
884:	O2 = java.lang.Object@7fad8c79
885:	O3 = java.lang.Object@7fad8c79
886:	Person  as string = Person
887:	Student as string = Student: Person
888:	Teacher as string = Teacher: Person
889:	String  as string = squirrel
890:	JOptionPane as string = utility.io.JOptionPane@71a794e5
891:	O2==O3
892:	P1==P2
893:	P2==P3
894:	P1==P3
895:	P2==P3
896:	Person is Person
897:	Clone  is Person
898:	Clone is ==
899:	S1 total = 2
900:	S2 total = 2
901:	S3 total = 4
902:	S4 total = 4
903:	S3 total = 9
904:	S4 total = 9
905:	Boom!!!
906:	Boom!!!
907:	Boom!!!
908:	Boom!!!
909:	Boom!!!
910:	Boom!!!
911:	Doctor: Person
912:	DiskJockey: Person
913:	MrWachs: Teacher: Person
914:	Piper: HighSchool: Student: Person
915:	Husky: HighSchool: Student: Person
916:	Athlete: Husky: HighSchool: Student: Person
917:	Meeting is about to begin...
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	 Student ->	Student: Person
	 Person ->	 Student ->	Student: Per ... (line shortened) ...
918:	Grill on the BBQ
919:	Mr. Lawrence Wachs is eating Protein it was Savory
920:	unidentified is eating Apple from Do not eat!
921:	Round 1...
922:	Jock has signed the form!
923:	Round 2...
924:	Jock has scored
925:	Jock has scored
926:	St. Pauls has scored
927:	End of period 2 and the score is 2 for the Jock and 1 for the St. Pauls
928:	Jock SLAPS St. Pauls
929:	KO
930:	Round 3...
931:	Jock has scored
932:	Jock has scored
933:	St. Pauls has scored
934:	End of period 3 and the score is 4 for the Jock and 2 for the St. Pauls
935:	Round 4...
936:	Jock has scored
937:	Jock has scored
938:	St. Pauls has scored
939:	End of period 4 and the score is 6 for the Jock and 3 for the St. Pauls
940:	Hard core ironing of clothes!
941:	Jock wins!
942:	Grill on the BBQ
943:	Jock is eating Protein it was Savory
944:	Class name: Boolean, Hash Code: 1231, To String: true
945:	Class name: Integer, Hash Code: 0, To String: 0
946:	Class name: Double, Hash Code: 300063655, To String: 3.14
947:	Class name: Character, Hash Code: 97, To String: a
948:	Class name: String, Hash Code: 3556498, To String: test
949:	Class name: Athlete, Hash Code: 1786364562, To String: Athlete: Husky: HighSchool: Student: Person
950:	Class name: JOptionPane, Hash Code: 928466577, To String: utility.io.JOptionPane@37574691
951:	Class name: Object, Hash Code: 624271064, To String: java.lang.Object@25359ed8
952:	true
953:	0
954:	3.14
955:	a
956:	test
957:	Athlete: Husky: HighSchool: Student: Person
958:	Class name: Boolean, Hash Code: 1231, To String: true
959:	Class name: Integer, Hash Code: 0, To String: 0
960:	Class name: Double, Hash Code: 300063655, To String: 3.14
961:	Class name: Character, Hash Code: 97, To String: a
962:	Class name: String, Hash Code: 3556498, To String: test
963:	Class name: Athlete, Hash Code: 1786364562, To String: Athlete: Husky: HighSchool: Student: Person
964:	Home Owner:
965:	Mr. Lawrence Wachs
966:	And the contents...
967:	testing.prerequisite.cs40s.advancedclasses.Meeting@80ec1f8
968:	Mr. Lawrence Wachs is eating Apple from Do not eat!
969:	Grill on the BBQ
970:	Mr. Lawrence Wachs is eating Protein it was Savory
971:	Advanced Classes Test complete!
972:	Collections testing begins...
973:	Testing Node constructors....................
974:	Testing Node toString()......................
975:	Node a = null
976:	Node b = Sass
977:	Node c = Pros
978:	Node d = Joes
979:	Testing Node clone().........................
980:	Node e = null
981:	Node f = Sass
982:	Node g = Pros
983:	Node h = Joes
984:	Testing Node equal().........................
985:	Node a == b? -> false
986:	Node b == c? -> false
987:	Node c == d? -> false
988:	Node d == d? -> true
989:	Node e == a? -> false
990:	Node f == b? -> true
991:	Node g == c? -> true
992:	Node h == d? -> true
993:	Testing Node finalize()......................
994:	Node a = null
995:	Node b = Sass
996:	Node c = Pros
997:	Node d = Joes
998:	Node e = null
999:	Node f = Sass
1000:	Node g = Pros
1001:	Node h = Joes
1002:	Node a = null
1003:	Node b = null
1004:	Node c = null
1005:	Node d = null
1006:	Node e = null
1007:	Node f = null
1008:	Node g = null
1009:	Node h = null
1010:	Testing default LinkedList constructor.......
1011:	Testing toString, empty, size methods........
1012:	L1 toString -> Empty LinkedList
1013:	L2 toString -> Empty LinkedList
1014:	L1 empty? -> true
1015:	L2 empty? -> true
1016:	L1 size -> 0
1017:	L2 size -> 0
1018:	Test add (first to the back) of the list.....
1019:	addBack -> true	Linked List 	[51]
1020:	addBack -> true	Linked List 	[51,50]
1021:	addBack -> true	Linked List 	[51,50,-50]
1022:	addBack -> true	Linked List 	[51,50,-50,55]
1023:	addBack -> false	Linked List 	[51,50,-50,55]
1024:	Test add (second to the front) of the list...
1025:	addFront -> true	Linked List 	[80,51,50,-50,55]
1026:	addFront -> true	Linked List 	[81,80,51,50,-50,55]
1027:	addFront -> true	Linked List 	[-80,81,80,51,50,-50,55]
1028:	addFront -> true	Linked List 	[88,-80,81,80,51,50,-50,55]
1029:	addFront -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1030:	Re-testing empty, size methods...............
1031:	L1 empty? -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1032:	L2 empty? -> true	Empty LinkedList
1033:	L1 size -> 8	Linked List 	[88,-80,81,80,51,50,-50,55]
1034:	L2 size -> 0	Empty LinkedList
1035:	Test get method..............................
1036:	Getting -1 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1037:	Getting 0 = 88	Linked List 	[88,-80,81,80,51,50,-50,55]
1038:	Getting 1 = -80	Linked List 	[88,-80,81,80,51,50,-50,55]
1039:	Getting 2 = 81	Linked List 	[88,-80,81,80,51,50,-50,55]
1040:	Getting 3 = 80	Linked List 	[88,-80,81,80,51,50,-50,55]
1041:	Getting 4 = 51	Linked List 	[88,-80,81,80,51,50,-50,55]
1042:	Getting 5 = 50	Linked List 	[88,-80,81,80,51,50,-50,55]
1043:	Getting 6 = -50	Linked List 	[88,-80,81,80,51,50,-50,55]
1044:	Getting 7 = 55	Linked List 	[88,-80,81,80,51,50,-50,55]
1045:	Getting 8 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1046:	Test set method..............................
1047:	Setting -1 to 9 -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1048:	Setting 0 to 10 -> true	Linked List 	[10,-80,81,80,51,50,-50,55]
1049:	Setting 1 to 11 -> true	Linked List 	[10,11,81,80,51,50,-50,55]
1050:	Setting 2 to 12 -> true	Linked List 	[10,11,12,80,51,50,-50,55]
1051:	Setting 3 to 13 -> true	Linked List 	[10,11,12,13,51,50,-50,55]
1052:	Setting 4 to 14 -> true	Linked List 	[10,11,12,13,14,50,-50,55]
1053:	Setting 5 to 15 -> true	Linked List 	[10,11,12,13,14,15,-50,55]
1054:	Setting 6 to 16 -> true	Linked List 	[10,11,12,13,14,15,16,55]
1055:	Setting 7 to 17 -> true	Linked List 	[10,11,12,13,14,15,16,17]
1056:	Setting 8 to 18 -> false	Linked List 	[10,11,12,13,14,15,16,17]
1057:	Setting 0 to null -> false	Linked List 	[10,11,12,13,14,15,16,17]
1058:	Test equals method...........................
1059:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1060:	List 2 = Empty LinkedList
1061:	List1 == List2 -> false
1062:	Test clone method............................
1063:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1064:	List 2 = Linked List 	[10,11,12,13,14,15,16,17]
1065:	Re-testing equals...
1066:	List1 == List2 -> true
1067:	Test addAfter method.........................
1068:	Adding value 	99	 after index 	-1	 result 	false	Linked List 	[10,11,12,13,14,15,16,17]
1069:	Adding value 	100	 after index 	0	 result 	true	Linked List 	[10,100,11,12,13,14,15,16,17]
1070:	Adding value 	101	 after index 	1	 result 	true	Linked List 	[10,100,101,11,12,13,14,15,16,17]
1071:	Adding value 	102	 after index 	2	 result 	true	Linked List 	[10,100,101,102,11,12,13,14,15,16,17]
1072:	Adding value 	103	 after index 	3	 result 	true	Linked List 	[10,100,101,102,103,11,12,13,14,15,16,17]
1073:	Adding value 	104	 after index 	4	 result 	true	Linked List 	[10,100,101,102,103,104,11,12,13,14,15,16,17]
1074:	Adding value 	105	 after index 	5	 result 	true	Linked List 	[10,100,101,102,103,104,105,11,12,13,14,15,16,17]
1075:	Adding value 	106	 after index 	6	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,11,12,13,14,15,16,17]
1076:	Adding value 	107	 after index 	7	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1077:	Test other edge case
1078:	Adding value 	10	 after index 	17	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1079:	Test addBefore method.........................
1080:	Adding value 	99	 before index 	-1	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1081:	Adding value 	100	 before index 	0	 result 	true	Linked List 	[100,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1082:	Adding value 	101	 before index 	1	 result 	true	Linked List 	[100,101,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1083:	Adding value 	102	 before index 	2	 result 	true	Linked List 	[100,101,102,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1084:	Adding value 	103	 before index 	3	 result 	true	Linked List 	[100,101,102,103,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1085:	Adding value 	104	 before index 	4	 result 	true	Linked List 	[100,101,102,103,104,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1086:	Adding value 	105	 before index 	5	 result 	true	Linked List 	[100,101,102,103,104,105,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1087:	Adding value 	106	 before index 	6	 result 	true	Linked List 	[100,101,102,103,104,105,106,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1088:	Adding value 	107	 before index 	7	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1089:	Adding value 	108	 before index 	8	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1090:	Adding value 	109	 before index 	9	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1091:	Adding value 	110	 before index 	10	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1092:	Adding value 	111	 before index 	11	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1093:	Adding value 	112	 before index 	12	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1094:	Adding value 	113	 before index 	13	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1095:	Adding value 	114	 before index 	14	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1096:	Adding value 	115	 before index 	15	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1097:	Test other edge case
1098:	Adding value 	10	 before index 	33	 result 	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1099:	Test front and back methods..................
1100:	Front of list 1 = 100	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1101:	Front of list 2 = 10	Linked List 	[10,11,12,13,14,15,16,17]
1102:	Back of list 1 = 17	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1103:	Back of list 2 = 17	Linked List 	[10,11,12,13,14,15,16,17]
1104:	Clear out list 2
1105:	Front of list 2 = null	Empty LinkedList
1106:	Back of list 2 = null	Empty LinkedList
1107:	Cloning list 2 from list 1
1108:	Test removeFront method......................
1109:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1110:	Linked List 	[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1111:	Linked List 	[102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1112:	Linked List 	[103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1113:	Linked List 	[104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1114:	Linked List 	[105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1115:	Linked List 	[106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1116:	Linked List 	[107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1117:	Linked List 	[108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	108
1118:	Linked List 	[109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	109
1119:	Linked List 	[110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	110
1120:	Linked List 	[111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	111
1121:	Linked List 	[112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	112
1122:	Linked List 	[113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	113
1123:	Linked List 	[114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	114
1124:	Linked List 	[115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	115
1125:	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	10
1126:	Linked List 	[100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1127:	Linked List 	[101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1128:	Linked List 	[102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1129:	Linked List 	[103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1130:	Linked List 	[104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1131:	Linked List 	[105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1132:	Linked List 	[106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1133:	Linked List 	[107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1134:	Linked List 	[11,12,13,14,15,16,17]	Removing list 1 front = 	11
1135:	Linked List 	[12,13,14,15,16,17]	Removing list 1 front = 	12
1136:	Linked List 	[13,14,15,16,17]	Removing list 1 front = 	13
1137:	Linked List 	[14,15,16,17]	Removing list 1 front = 	14
1138:	Linked List 	[15,16,17]	Removing list 1 front = 	15
1139:	Linked List 	[16,17]	Removing list 1 front = 	16
1140:	Linked List 	[17]	Removing list 1 front = 	17
1141:	Empty LinkedList	Removing list 1 front = 	null
1142:	Cloning list 1 from list 2
1143:	Test removeBack method.......................
1144:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 2 back = 	17
1145:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing list 2 back = 	16
1146:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing list 2 back = 	15
1147:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing list 2 back = 	14
1148:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing list 2 back = 	13
1149:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing list 2 back = 	12
1150:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing list 2 back = 	11
1151:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1152:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing list 2 back = 	106
1153:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing list 2 back = 	105
1154:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing list 2 back = 	104
1155:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing list 2 back = 	103
1156:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing list 2 back = 	102
1157:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing list 2 back = 	101
1158:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing list 2 back = 	100
1159:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing list 2 back = 	10
1160:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing list 2 back = 	115
1161:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing list 2 back = 	114
1162:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing list 2 back = 	113
1163:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing list 2 back = 	112
1164:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing list 2 back = 	111
1165:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing list 2 back = 	110
1166:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing list 2 back = 	109
1167:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing list 2 back = 	108
1168:	Linked List 	[100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1169:	Linked List 	[100,101,102,103,104,105,106]	Removing list 2 back = 	106
1170:	Linked List 	[100,101,102,103,104,105]	Removing list 2 back = 	105
1171:	Linked List 	[100,101,102,103,104]	Removing list 2 back = 	104
1172:	Linked List 	[100,101,102,103]	Removing list 2 back = 	103
1173:	Linked List 	[100,101,102]	Removing list 2 back = 	102
1174:	Linked List 	[100,101]	Removing list 2 back = 	101
1175:	Linked List 	[100]	Removing list 2 back = 	100
1176:	Empty LinkedList	Removing list 2 back = 	null
1177:	Cloning list 2 from list 1
1178:	Test remove method...........................
1179:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	33	 removed: 	null
1180:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	32	 removed: 	null
1181:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	31	 removed: 	17
1182:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing from list 1 from index: 	30	 removed: 	16
1183:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing from list 1 from index: 	29	 removed: 	15
1184:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing from list 1 from index: 	28	 removed: 	14
1185:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing from list 1 from index: 	27	 removed: 	13
1186:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing from list 1 from index: 	26	 removed: 	12
1187:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing from list 1 from index: 	25	 removed: 	11
1188:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	24	 removed: 	107
1189:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing from list 1 from index: 	23	 removed: 	106
1190:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing from list 1 from index: 	22	 removed: 	105
1191:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing from list 1 from index: 	21	 removed: 	104
1192:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing from list 1 from index: 	20	 removed: 	103
1193:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing from list 1 from index: 	19	 removed: 	102
1194:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing from list 1 from index: 	18	 removed: 	101
1195:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing from list 1 from index: 	17	 removed: 	100
1196:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing from list 1 from index: 	16	 removed: 	10
1197:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing from list 1 from index: 	15	 removed: 	115
1198:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing from list 1 from index: 	14	 removed: 	114
1199:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing from list 1 from index: 	13	 removed: 	113
1200:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing from list 1 from index: 	12	 removed: 	112
1201:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing from list 1 from index: 	11	 removed: 	111
1202:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing from list 1 from index: 	10	 removed: 	110
1203:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing from list 1 from index: 	9	 removed: 	109
1204:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing from list 1 from index: 	8	 removed: 	108
1205:	Linked List 	[100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	7	 removed: 	107
1206:	Linked List 	[100,101,102,103,104,105,106]	Removing from list 1 from index: 	6	 removed: 	106
1207:	Linked List 	[100,101,102,103,104,105]	Removing from list 1 from index: 	5	 removed: 	105
1208:	Linked List 	[100,101,102,103,104]	Removing from list 1 from index: 	4	 removed: 	104
1209:	Linked List 	[100,101,102,103]	Removing from list 1 from index: 	3	 removed: 	103
1210:	Linked List 	[100,101,102]	Removing from list 1 from index: 	2	 removed: 	102
1211:	Linked List 	[100,101]	Removing from list 1 from index: 	1	 removed: 	101
1212:	Linked List 	[100]	Removing from list 1 from index: 	0	 removed: 	100
1213:	Empty LinkedList	Removing from list 1 from index: 	-1	 removed: 	null
1214:	Test contains method.........................
1215:	List 1 (empty) contains 10 = false	Empty LinkedList
1216:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1217:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1218:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1219:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1220:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1221:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1222:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1223:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1224:	List 2 contains 	108	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1225:	List 2 contains 	109	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1226:	List 2 contains 	110	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1227:	List 2 contains 	111	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1228:	List 2 contains 	112	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1229:	List 2 contains 	113	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1230:	List 2 contains 	114	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1231:	List 2 contains 	115	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1232:	List 2 contains 	10	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1233:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1234:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1235:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1236:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1237:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1238:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1239:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1240:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1241:	List 2 contains 	11	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1242:	List 2 contains 	12	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1243:	List 2 contains 	13	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1244:	List 2 contains 	14	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1245:	List 2 contains 	15	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1246:	List 2 contains 	16	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1247:	List 2 contains 	17	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1248:	List 2 contains 	1000	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1249:	Resetting list 1 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1250:	Test firstIndexOf and lastIndexOf methods....
1251:	First index of 5: 	0
1252:	Last  index of 5: 	7
1253:	First index of 7: 	2
1254:	Last  index of 7: 	9
1255:	First index of 8: 	3
1256:	Last  index of 8: 	3
1257:	First index of 9: 	-1
1258:	Last  index of 9: 	-1
1259:	Test numberOf method.........................
1260:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1261:	Number of 5: 	3
1262:	Number of 8: 	1
1263:	Number of 9: 	0
1264:	Test allIndices method.......................
1265:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1266:	Array -> indices 5: 	[0, 4, 7]
1267:	Array -> indices 8: 	[3]
1268:	Array -> indices 9: 	null
1269:	Cloning list 2 from list 1
1270:	Test remove method...........................
1271:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1272:	Removing 5: 	true	Linked List 	[6,7,8,5,6,7,5,6,7]
1273:	Removing 8: 	true	Linked List 	[6,7,5,6,7,5,6,7]
1274:	Removing 9: 	false	Linked List 	[6,7,5,6,7,5,6,7]
1275:	Test removeLast method.......................
1276:	Linked List 	[6,7,5,6,7,5,6,7]
1277:	Removing 5: 	true	Linked List 	[6,7,5,6,7,6,7]
1278:	Removing 8: 	false	Linked List 	[6,7,5,6,7,6,7]
1279:	Removing 9: 	false	Linked List 	[6,7,5,6,7,6,7]
1280:	Test removeAll method........................
1281:	Linked List 	[6,7,5,6,7,6,7]
1282:	Removing all 5: 	true	Linked List 	[6,7,6,7,6,7]
1283:	Removing all 6: 	true	Linked List 	[7,7,7]
1284:	Removing all 9: 	false	Linked List 	[7,7,7]
1285:	Cloning list 1 from list 2
1286:	Test removeAll array method..................
1287:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1288:	Array: 	[5, 6, 9]
1289:	Removing all from array: Linked List 	[7,8,7,7]
1290:	Test removeAll list method..................
1291:	List 1 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1292:	List 2 	Linked List 	[7,8,7,7]
1293:	Removing all list 2 from list 1...
1294:	List 1 	Linked List 	[5,6,5,6,5,6]
1295:	List 2 	Linked List 	[7,8,7,7]
1296:	Resetting list 1 and 2 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1297:	Test containsAll array method................
1298:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 9]	 is false
1299:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 7, 8]	 is true
1300:	Test containsAll list method.................
1301:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 is true
1302:	Alter list 2...
1303:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[6,7,8,6,7,5,6,45]	 is false
1304:	Test addAll array method.....................
1305:	Linked List 	[6,7,8,6,7,5,6,45]
1306:	Adding array: 	[5, 6, 7, 8]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1307:	Test addAll list method......................
1308:	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1309:	Adding list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8,5,6,7,8,5,6,7,5,6,7]
1310:	Test subList method..........................
1311:	List 1 = 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1312:	Pulling out sub-list from 3 to 6: 	Linked List 	[8,5,6,7]
1313:	Pulling out sub-list from 1 to 1: 	Linked List 	[6]
1314:	Pulling out sub-list from 2 to 10: 	null
1315:	Pulling out sub-list from 0 to 9: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1316:	Test fromArray method........................
1317:	Array is 	[5, 6, 7, 8]
1318:	List is 	Linked List 	[5,6,7,8]
1319:	Test fromLinkedList method...................
1320:	1st List is 	Linked List 	[5,6,7,8]
1321:	2nd List is 	Linked List 	[5,6,7,8]
1322:	Test toArray method..........................
1323:	List 	Linked List 	[5,6,7,8]	 into array 	[5, 6, 7, 8]
1324:	Testing the imported util LinkedList.........
1325:	Imported constructor...
1326:	Imported add:	[0.0]
1327:	Imported add:	[0.0, 1.23]
1328:	Imported addFirst:	[4.56, 0.0, 1.23]
1329:	Imported addLast:	[4.56, 0.0, 1.23, 7.89]
1330:	Imported size:	4
1331:	Imported isEmpty:	false
1332:	Imported get:	0.0
1333:	Imported set:	4.56
1334:	Imported clone:	[0.01, 0.0, 1.23, 7.89]
1335:	Imported equals:	true
1336:	Imported getFirst:	0.01
1337:	Imported getLast:	7.89
1338:	Imported contains:	true
1339:	Imported removeFirst:	0.01
1340:	Imported removeLast:	7.89
1341:	Imported remove:	1.23
1342:	Imported remove:	false
1343:	Testing the imported util ArrayList.........
1344:	Imported ArrayList:	[a, b, c, d, e]
1345:	Using the enhanced for loop with this object...
1346:	a b c d e Using an iterator object...
1347:	a b c d e Collections testing complete!
1348:	Computer Science 42SAP Course:.............................................................
1349:	Computer Science 42SAP curriculum content..................................................
1350:	AP curriculum - Part 1.....................................................................
1351:	Unit 1 - Primitive Types ..................................................................
1352:	1.1 - Why Programming? Why Java?...........................................................
1353:	   1.1.1 - Call System class methods to generate output to the console
1354:	      1.1.1.1 - System.out.print and System.out.println display information on the 
1355:	                 computer monitor 
1356:	      1.1.1.2 - System.out.println moves the cursor to a new line after  the information 
1357:	                 has been displayed, while System.out.print does not     
1358:	   1.1.2 - Create string literals
1359:	      1.1.2.1 - A string literal is enclosed in double quotes     
1360:	System.out.print outputs text to the screen and System.out.println outputs with a line break
1361:	More specifically, the code word "System" refers to the "computer system" and the 
1362:	word "out" refers to outputting, and finally the word "print" or "println" are calls to 
1363:	methods (or "actions") that take the string literal (which is the word or words in between 
1364:	the quotation marks) and outputs it. So the command "System.out.println("literal");" 
1365:	will take the string literal and output it to the default output device - that being the 
1366:	computer screen.
1367:	1.2 - Variables and Data Types.............................................................
1368:	   1.2.1 - Identify the most appropriate data type category for a particular specification
1369:	      1.2.1.1 - A type is a set of values (a domain) and a set of operations on 
1370:	                 them 
1371:	      1.2.1.2 - Data types can be categorized as either primitive or reference 
1372:	      1.2.1.3 - The primitive data types used in this course define the set of operations 
1373:	                 for numbers and Boolean values 
1374:	   1.2.1 - Declare variables of the correct types to represent primitive data
1375:	      1.2.1.1 - The three primitive data types used in this course are int, double, 
1376:	                 and boolean 
1377:	      1.2.1.2 - Each variable has associated memory that is used to hold its value 
1378:	      1.2.1.3 - The memory associated with a variable of a primitive type holds 
1379:	                 an actual primitive value 
1380:	      1.2.1.4 - When a variable is declared final, its value cannot be changed once 
1381:	                 it is initialized 
1382:	Data/information refers to the "kind" of data being stored (or "remembered") by the program 
1383:	in a "variable". A variable is a piece of the computer's memory (storage) that has a "name" 
1384:	(or "address") so that the programmer can refer to it by that name. The "type" refers to the 
1385:	"kind" of data that you are storing (e.g. text, numbers, true/false, etc.). The type must be 
1386:	specified at the time you write a line of code to "create" (or "declare") the variable. A 
1387:	variable can only be one type and only store that specified type of data. However, the data 
1388:	itself can change (or "vary") after the initial declaration. Examples of this are below...
1389:	// Variables declared and assigned initial ("starting") values:
1390:	boolean a = true;
1391:	int     b = 0;
1392:	double  c = 1.0;
1393:	char    d = 'A';
1394:	// Variables content changes ("reassigned"):
1395:	a = false;
1396:	b = 1;
1397:	c = 1.1;
1398:	d = 'B';
1399:	A "final" (or a "constant") is a variable in which the stored value does NOT change 
1400:	(it stays "constant") and it locked at that value. Final (or constant) variables are 
1401:	given the initial value when declared (or initialized) and that value stays locked. These 
1402:	types of values are written in ALL_CAPS with the underscore value used to seperate words in 
1403:	the name. Final variables are more efficient for a number of reasons including ease of code 
1404:	understanding, speed (faster code), easier to update code, and others. Examples of finals 
1405:	are below
1406:	// Constants (finals) declared (initialized)
1407:	final boolean FOUND  = true;
1408:	final int     VALUE  = 1;
1409:	final double  AMOUNT = 2.5;
1410:	final char    CODE   = 'X';
1411:	1.3 - Expressions and Assignment Statements................................................
1412:	   1.3.1 - Evaluate arithmetic expressions in a program code
1413:	      1.3.1.1 - A literal is the source code representation of a fixed value
1414:	      1.3.1.2 - Arithmetic expressions include expressions of type int and double 
1415:	      1.3.1.3 - The arithmetic operators consist of +, −, *, /, and % 
1416:	      1.3.1.4 - An arithmetic operation that uses two int values will evaluate to 
1417:	                 an int value 
1418:	      1.3.1.5 - An arithmetic operation that uses a double value will evaluate to 
1419:	                 a double value 
1420:	      1.3.1.6 - Operators can be used to construct compound expressions 
1421:	      1.3.1.7 - During evaluation, operands are associated with operators according 
1422:	                 to operator precedence to determine how they are grouped 
1423:	      1.3.1.8 - An attempt to divide an integer by zero will result in an ArithmeticException 
1424:	                 to occur 
1425:	   1.3.2 - Evaluate what is stored in a variable as a result of an expression with 
1426:	              an assignment statement
1427:	      1.3.2.1 - The assignment operator (=) allows a program to initialize or change 
1428:	                 the value stored in a variable. The value of the expression on the right is 
1429:	                 stored in the variable on the left 
1430:	      1.3.2.2 - During execution, expressions are evaluated to produce a single 
1431:	                 value 
1432:	      1.3.2.3 - The value of an expression has a type based on the evaluation of 
1433:	                 the expression 
1434:	Arithmetic (or "math") statements in code are lines of code (or "statements") that are 
1435:	written to evaluate (or "solve") an equation of logic the program needs to solve. In this 
1436:	context, the word "literal" can also mean a number (like "5"). This usually involves 
1437:	variable types int and double (the number types) used in a math expression or equation. This 
1438:	can involve math operations like +, -, *, / and % (modulus). When multiple int values are 
1439:	evaluated in a formula, they always evaluate to an int answer (solution) and double values 
1440:	will evaluate to a double. Complex (or "compound" expressions can be formed in which 
1441:	the order of operations (or precedence order). This means multiplication and division are 
1442:	evaluated before addition and subtraction. If operations are at the same precedence level, 
1443:	then they are evaluated from left to right.When you try and divide by zero, an error 
1444:	(the "ArithmeticException" error) will occur and the program will stop running. Examples:
1445:	// Arithmetic evaluations using variables
1446:	int    v1 = 5;
1447:	int    v2 = 3;
1448:	int    v3 = (v1 + 5 * v2 / (1 + 2)) % 2;
1449:	double v4 = 5.2;
1450:	double v5 = 3.3;
1451:	double v6 = (v4 + 5.1 * v5 / (1.2 + 2.3)) % 2.2;
1452:	1.4 - Compound Assignment Operators........................................................
1453:	   1.4.1 - Evaluate what is stored in a variable as a result of an expression with 
1454:	              an assignment statement
1455:	      1.4.1.1 - Compound assignment operators (+=, −=, *=, /=, %=) can be used in 
1456:	                 place of the assignment operator 
1457:	      1.4.1.2 - The increment operator (++) and decrement operator (−−) are used 
1458:	                 to add 1 or subtract 1 from the stored value of a variable or an array element. 
1459:	                 The new value is assigned to the variable or array element
1460:	Compound statements in this context refers to using shortcuts to quickly add or subtract one 
1461:	(increment or decrement) to a variable. You can also use more complex shorthand compound 
1462:	statements to quickly multiply, divide, even modulus a variable with itself or other 
1463:	variables. For example:
1464:	// Shorthand Compound Arithmetic expressions
1465:	int value = 5;
1466:	value++;    // is the same as "value = value + 1;"
1467:	value--;    // is the same as "value = value + 1;"
1468:	value += 5; // is the same as "value = value + 5;"
1469:	value -= 5; // is the same as "value = value - 5;"
1470:	value *= 5; // is the same as "value = value * 5;"
1471:	value /= 5; // is the same as "value = value / 5;"
1472:	value %= 5; // is the same as "value = value % 5;"
1473:	1.5 - Casting and Ranges of Variables......................................................
1474:	   1.5.1 - Evaluate arithmetic expressions that use casting
1475:	      1.5.1.1 - The casting operators (int) and (double) can be used to create a 
1476:	                 temporary value converted to a different data type
1477:	      1.5.1.2 - Casting a double value to an int causes the digits to the right 
1478:	                 of the decimal point to be truncated
1479:	      1.5.1.3 - Some programming code causes int values to be automatically cast 
1480:	                 (widened) to double values
1481:	      1.5.1.4 - Values of type double can be rounded to the nearest integer by (int)(x 
1482:	                 + 0.5) or (int)(x – 0.5) for negative numbers 
1483:	      1.5.1.5 - Integer values in Java are represented by values of type int, which 
1484:	                 are stored using a finite amount (4 bytes) of memory. Therefore, an int value 
1485:	                 must be in the range from Integer.MIN_VALUE to Integer.MAX_VALUE inclusive
1486:	      1.5.1.6 - If an expression would evaluate to an int value outside of the allowed 
1487:	                 range, an integer overflow occurs. This could result in an incorrect value 
1488:	                 within the allowed range 
1489:	Casting is the process of "converting" one data type into another data type. When casting 
1490:	an double to a int, the decimal portion of the double is truncated (cut off) and not rounded 
1491:	off. When a int is cast to a double, the int is "widened" to now accomodate any decimals. 
1492:	A char when cast will turn into it's ASCII value. The process of casting involves putting 
1493:	variable to be cast with the type being cast into in round brackets to the left of that 
1494:	variable. Integer values hold a finite amount of number space (4 bytes) and the built-in 
1495:	constants Integer.MAX_VALUE and MIN_VALUE are the limits of the int. If an expression 
1496:	evaluates an int outside that range, an error will occur (overflow error). For example:
1497:	// Casting data types
1498:	int integer = Integer.MAX_VALUE;
1499:	double doub = Double.MIN_VALUE;
1500:	doub        = (int)integer;
1501:	integer     = (int)doub;
1502:	char letter = 'A';
1503:	integer     = (int)letter;
1504:	Unit 3 - Boolean Expressions And If Statements            .................................
1505:	3.1 - Boolean Expressions  ................................................................
1506:	   3.1.1 - Evaluate Boolean expressions that use relational operators in program 
1507:	              code
1508:	      3.1.1.1 - Primitive values and reference values can be compared using relational 
1509:	                 operators (i.e., == and !=) 
1510:	      3.1.1.2 - Arithmetic expression values can be compared using relational operators 
1511:	                 (i.e., <, >, <=, >=) 
1512:	      3.1.1.3 - An expression involving relational operators evaluates to a Boolean 
1513:	                 value 
1514:	A Boolean (true/false) expression is a code statement most likely in a control structure 
1515:	like a conditional statement or loop control structure that evaluates to true or false to 
1516:	make decisions and control the flow of the program. The Boolean expression will require 
1517:	the use of relational operators like: < , > , <= , >= , == , and != those being: "less 
1518:	than", "greater than", "less than or equal to", "greater than or equal to", "equal 
1519:	to", and "not equal to".
1520:	3.2 - if Statements and Control Flow  .....................................................
1521:	   3.2.1 - Represent branching logical processes by using conditional Statements
1522:	      3.2.1.1 -  Conditional statements interrupt the sequential execution of statements 
1523:	      3.2.1.2 -  if statements affect the flow of control by executing different 
1524:	                 statements based on the value of a Boolean Expression 
1525:	      3.2.1.3 -  A one-way selection (if statement) is written when there is a set 
1526:	                 of statements to execute under a certain condition. In this case, the body 
1527:	                 is executed only when the Boolean condition is true 
1528:	A "Conditional Statement" is also known under other names like "branching statement", "if 
1529:	statement", "one-way selection statement", and "control structure". It uses the reserved 
1530:	keyword "if" along with round brackets which contain the Boolean expression, and curly 
1531:	brackets to contain the control block of all code you wish to be controlled by the 
1532:	conditional statement. Brackets are optional if the block is only one line, and you may also 
1533:	move thos lines up to the same line as the conditional statement. For example:
1534:	// Example of if statements
1535:	int a = 10;
1536:	int b = 10;
1537:	if (a == a) {
1538:	    // "equal"
1539:	}
1540:	3.3 - if-else Statements  .................................................................
1541:	   3.3.1 -  Represent branching logical processes by using conditional Statements
1542:	      3.3.1.1 -  A two-way selection is written when there are two sets of statements— 
1543:	                 one to be executed when the Boolean condition is true, and another set for 
1544:	                 when the Boolean condition is false. In this case, the body of the "if" is 
1545:	                 executed when the Boolean condition is true, and the body of the "else" is 
1546:	                 executed when the Boolean condition is false 
1547:	The "else" statement is paired with an "if" statement to control the flow of the logic so 
1548:	that the conditional now evaluates to both true and false. This can be called a "two 
1549:	way selection" (for true/false). An "else" must always follow an "if" statement first. 
1550:	For example:
1551:	// if with "else" 
1552:	double c = 1.45, d = 1.5; 
1553:	if (c < d) {
1554:	    // "Less than"
1555:	}
1556:	else {
1557:	    // "Greater than"
1558:	}
1559:	// Shortened lines version
1560:	char e = 'A';
1561:	char f = 'a';
1562:	if (e != f) e = '!';
1563:	else        e = '=';
1564:	3.4 - else if Statements  .................................................................
1565:	   3.4.1 -  Represent branching logical processes by using conditional Statements
1566:	      3.4.1.1 -  A multi-way selection is written when there are a series of conditions 
1567:	                 with different statements for each condition. Multi-way selection is performed 
1568:	                 using if-else-if statements such that exactly one section of code is executed 
1569:	                 based on the first condition that evaluates to true
1570:	When making multiple decisions (more than 2), the "else if" statement is added to an 
1571:	existing "if" statement to have multiple branches of logic for the code to follow. This 
1572:	is much more efficient than seperate "if" statements. This can also be called "multi-way 
1573:	selection" (or "if-else-if"). An "else" statement is also still the final option (but 
1574:	this is not required). For example:
1575:	// Showing a "chain" of else if statements
1576:	int g = 0;
1577:	if (g == 1) {
1578:	    // The first if is true
1579:	}
1580:	else if (g == 2) {
1581:	    // The next if is true
1582:	}
1583:	else if (g == 3) {
1584:	    // The next if (in the "chain" of ifs) is true
1585:	}
1586:	else {
1587:	    // Nothing above is true, so go to this else
1588:	}
1589:	3.5 - Compound Boolean Expressions  .......................................................
1590:	   3.5.1 -  Represent branching logical processes by using nested conditional statements
1591:	      3.5.1.1 -  Nested if statements consist of if statements within if statements 
1592:	   3.5.2 -  Evaluate compound Boolean expressions in program code
1593:	      3.5.2.1 -  Logical operators !(not), &&(and), and ||(or) are used with Boolean 
1594:	                 values. This represents the order these operators will be evaluated 
1595:	      3.5.2.2 -  An expression involving logical operators evaluates to a Boolean 
1596:	                 value 
1597:	      3.5.2.3 -  When the result of a logical expression using && or || can be determined 
1598:	                 by evaluating only the first Boolean operand, the second is not evaluated. 
1599:	                 This is known as short-circuited evaluation 
1600:	The process of "nesting" means to place one conditional statement inside the "block" of 
1601:	another conditional statement. The logical operators: "and", "or", and "not" are 
1602:	represented with the symbols: "&&" (and), "||" (or), and "!" (not). The operator AND 
1603:	is used to combine logical boolean expressions such that ALL expressions need to be true for 
1604:	the entire statement to be true. The operator OR is used to combine logical boolean 
1605:	expressions such that ANY expression can be true for the entire statement to be true. The 
1606:	operator NOT reverses the logic so that true statements are evaluated as false (and visa 
1607:	versa). If the statement contains multiple Boolean expressions and the result of the 
1608:	evaluation of one expression has already determined the expressions result, then the 
1609:	rest of the expressions do not need to be evaluated - this is known as a "short-circuited 
1610:	evaluation". For example:
1611:	// Logical operators and "nesting"
1612:	int    age = 17;
1613:	double iq  = 1.0;
1614:	if (age >= 18 && iq > 90) {
1615:	    // with "and" ("&&") BOTH have to be true
1616:	}
1617:	else if (age >= 18 || iq > 0) {
1618:	    // with "or" ("||") EITHER can be true
1619:	}
1620:	else {
1621:	    // Case if neither evaluates
1622:	    if (age > 0) {
1623:	        // A "nested if statement"
1624:	    }
1625:	}
1626:	3.6 - Equivalent Boolean Expressions  .....................................................
1627:	   3.6.1 -  Compare and contrast equivalent Boolean expressions
1628:	      3.6.1.1 - De Morgan’s Laws can be applied to Boolean expressions 
1629:	      3.6.1.2 - Truth tables can be used to prove Boolean identities 
1630:	      3.6.1.3 -  Equivalent Boolean expressions will evaluate to the same value 
1631:	                 in all cases 
1632:	Boolean (true/false) expressions turned into logical statements used by control structures 
1633:	like conditional statements are subject to the laws of mathemtical logic such as "De Morgan's 
1634:	Law" (Google search this if you are curious, but it applies to mathematical proofs and is 
1635:	not necessarily applicable to this exam). This just means that complex statements need to be 
1636:	evaluated by using mathematical rules (like "order of operations") and logical operators 
1637:	(like "and, or, not") to determine the final Boolean result. This could determine if a 
1638:	control structure (like an "if" statement) runs a block of code or not.
1639:	3.7 - Comparing Objects  ..................................................................
1640:	   3.7.1 -  Compare object references using Boolean expressions in program code
1641:	      3.7.1.1 -  Two object references are considered aliases when they both reference 
1642:	                 the same object 
1643:	      3.7.1.2 -  Object reference values can be compared, using == and !=, to identify 
1644:	                 aliases 
1645:	      3.7.1.3 -  A reference value can be compared with null, using == or !=, to 
1646:	                 determine if the reference actually references an object 
1647:	      3.7.1.4 -  Often classes have their own equals method, which can be used to 
1648:	                 determine whether two objects of the class are equivalent 
1649:	The use of an advanced data type like an "Object" in code means that comparison 
1650:	operators (like <, >, ==, !=) that are used with primitive data type (like "int, 
1651:	double, char, etc.") are not used. Instead, use the "built-in" method "equals()" to 
1652:	determine the equality of two objects. For example:
1653:	// Use of the built-in equals method with Objects
1654:	String word1 = "edgy";
1655:	String word2 = "edGy";
1656:	if (word1.equals(word2)) {
1657:	    // "W1=W2"
1658:	}
1659:	else if (word1.equalsIgnoreCase(word2)) {
1660:	    // "W1 kind of == W2"
1661:	}
1662:	Unit 4 - Iteration.........................................................................
1663:	4.1 - while Loops  ........................................................................
1664:	   4.1.1 - Represent iterative processes using a while loop
1665:	      4.1.1.1 - Iteration statements change the flow of control by repeating a set 
1666:	                 of statements zero or more times until a condition is met 
1667:	      4.1.1.2 - In loops, the Boolean expression is evaluated before each iteration 
1668:	                 of the loop body, including the first. When the expression evaluates to true, 
1669:	                 the loop body is executed. This continues until the expression evaluates to 
1670:	                 false, whereupon the iteration ceases 4.1.1.3 - A loop is an infinite loop 
1671:	                 when the Boolean expression always evaluates to true 
1672:	      4.1.1.4 - If the Boolean expression evaluates to false initially, the loop 
1673:	                 body is not executed at all
1674:	      4.1.1.5 - Executing a return statement inside an iteration statement will 
1675:	                 halt the loop and exit the method or constructor
1676:	   4.1.2 - For algorithms in the context of a particular specification that does 
1677:	              not require the use of traversals: (A) Identify standard algorithms, (B) Modify 
1678:	              standard algorithms, (C) Develop an algorithm 
1679:	      4.1.2.1 - There are standard algorithms to: (A) Identify if an integer is 
1680:	                 or is not evenly divisible by another integer, (B) Identify the individual 
1681:	                 digits in an integer, (C) Determine the frequency with which a specific criterion 
1682:	                 is met 
1683:	      4.1.2.2 - There are standard algorithms to: (A) Determine a minimum or maximum 
1684:	                 value, (B) Compute a sum, average, or mode
1685:	The word "Iteration" is another word for "Loop" or "Looping" which is a control 
1686:	struture to have code statements "repeat". Like conditional ("if") statements, iteration 
1687:	statements control the flow of a program's logic. Also like if statements, iteration 
1688:	statements are controlled by a Boolean expression (true or false). The result of the Boolean 
1689:	expression will result in the code executing zero or mulitple times (until the expression 
1690:	evaluates to false). The expression is evaluated each time through an iteration of the loop. 
1691:	A loop is called an "infinite" loop if the Boolean expression never evaluates to false 
1692:	(thus the loop never stops looping - or never stops running). It is possible a loop will 
1693:	never run if it evaluates to false before the body (block) of the loop. If you use the 
1694:	keyword "return" inside a loop body (block) then the loop will terminate (end) early and 
1695:	potentially exit any method the loop is written inside. The "while" loop is a event loop or 
1696:	non-deterministic loop, which means it is not usually used for counting but when you do 
1697:	not know how many times the loop needs to run (a certain event can cause the loop to 
1698:	end). Loops are used for a variety of reasons such as: repeating instructions, travelling 
1699:	(traversing) arrays and lists, and searching and sorting values. For example:
1700:	// Example of a simple while loop
1701:	int counter = 0;
1702:	while (counter < 10) {
1703:	    counter++;
1704:	}
1705:	4.2 - for Loops  ..........................................................................
1706:	   4.2.1 - Represent iterative processes using a for loop
1707:	      4.2.1.1 - There are three parts in a for loop header: the initialization, 
1708:	                 the Boolean expression, and the increment. The increment statement can also 
1709:	                 be a decrement statement 
1710:	      4.2.1.2 - In a for loop, the initialization statement is only executed once 
1711:	                 before the first Boolean expression evaluation. The variable being initialized 
1712:	                 is referred to as a loop control variable 
1713:	      4.2.1.3 - In each iteration of a for loop, the increment statement is executed 
1714:	                 after the entire loop body is executed and before the Boolean expression is 
1715:	                 evaluated again 
1716:	      4.2.1.4 - A for loop can be rewritten into an equivalent while loop and vice 
1717:	                 versa 
1718:	      4.2.1.5 - “Off by one” errors occur when the iteration statement loops one 
1719:	                 time too many or one time too few 
1720:	The "for" loop is another looping form. The for loop is a count controlled loop that 
1721:	generally is used when a loop needs to run a specific number of times. There are three 
1722:	parts to the for loop, that seperate the parts with two semi-colons. The 3 parts represent 
1723:	the starting, ending, and change of the loop. In a for loop a counting variable is 
1724:	generally declared right inside the loop to a starting value, then the Boolean condition 
1725:	to end the loop, then the change value increasing (increment) or decreasing (decrement) 
1726:	that value. A "for" loop can be rewritten as a "while" loop and vice versa. A "off 
1727:	by one" error occurs when a loop runs one too many or one too few times. For Example:
1728:	// Example of a for loop
1729:	for (int i = 0; i < 10; i++) {
1730:	    // potential code body...
1731:	}
1732:	4.3 - Developing Algorithms Using Strings  ................................................
1733:	   4.3.1 - For algorithms in the context of a particular specification that involves 
1734:	              String objects: (A) Identify standard algorithms, (B) Modify standard algorithms, 
1735:	              (C) Develop an Algorithm
1736:	      4.3.1.1 - There are standard algorithms that utilize String traversals to: 
1737:	                 (A) Find if one or more substrings has a particular property, (B) Determine 
1738:	                 the number of substrings that meet specific criteria, (C) Create a new string 
1739:	                 with the characters reversed 
1740:	The String class allows for several "built-in" methods of the String class to manipulate 
1741:	the string and the value it stores. Several of these methods could apply to the A.P. exam 
1742:	including travelling (traversing) string characters, pulling out substrings (parts 
1743:	of the string), reversing a string, etc. For example:
1744:	// Example of string methods with a loop
1745:	String word   = "completion";
1746:	String parts1 = word.substring(3);
1747:	String parts2 = word.substring(1,7);
1748:	for (int i = 0; i < word.length(); i++) {
1749:	    char character = word.charAt(i);
1750:	}
1751:	4.4 - Nested Iteration  ...................................................................
1752:	   4.4.1 - Represent nested iterative processes
1753:	      4.4.1.1 - Nested iteration statements are iteration statements that appear 
1754:	                 in the body of another iteration statement 
1755:	      4.4.1.2 - When a loop is nested inside another loop, the inner loop must complete 
1756:	                 all its iterations before the outer loop can continue 
1757:	Like conditional ("if") statements, looping ("iteration") statments can be "nested", 
1758:	This means you can place a iteration statement inside the block of another iteration 
1759:	statement. The inner loop must complete all of its iterations before the outer loop 
1760:	can continue. For example:
1761:	// Example of nested loops
1762:	for (int i = 0; i < 10; i++) {
1763:	    for (int j = 0; j < 10; j++) {
1764:	        int k = 10;
1765:	        while (k < 10) {
1766:	            // potential code body...
1767:	        }
1768:	    }
1769:	}
1770:	4.5 - Informal Code Analysis  .............................................................
1771:	   4.5.1 - Compute statement execution counts and informal run-time comparison of 
1772:	              iterative statements
1773:	      4.5.1.1 - A statement execution count indicates the number of times a statement 
1774:	                 is executed by the program 
1775:	Expect to "trace" loop values in A.P. exam questions. Examining, computing, and tracing 
1776:	loops are typical A.P. exam questions. You should practice these types of questions.
1777:	AP curriculum - Part 2.....................................................................
1778:	Unit 2 - Using Objects.....................................................................
1779:	2.1 - Objects: Instances of Classes........................................................
1780:	   2.1.1 - Explain the relationship between a class and an object
1781:	      2.1.1.1 - An object is a specific instance of a class with defined attributes 
1782:	      2.1.1.2 - A class is the formal implementation, or blueprint, of the attributes 
1783:	                 and behaviors of an object 
1784:	A "class" is the "blueprint" for creating an "object". In Java, the class is a way to 
1785:	use code to model "things" using properties and methods. The object is what the class 
1786:	"creates" when the class is made into a specific "object" of that class. The various 
1787:	terms used for this vary but all revolve around the same concepts. The term "object" 
1788:	can also be called a "instance" of the class. The term "properties" can also be 
1789:	called "things about the class", or "descriptors", or "adjectives", or 
1790:	"fields". The term "methods" could also be called "what the class can do", or 
1791:	"actions", or "verbs", or "functions". 
1792:	// Example of a simple class with properties and methods
1793:	class Person {
1794:	    String name;
1795:	    int age;
1796:	    void walk() {
1797:	        // code logic could go here
1798:	    }
1799:	    void talk() {
1800:	        // code logic could go here
1801:	    }
1802:	}
1803:	2.2 - Creating and Storing Objects (Instantiation).........................................
1804:	   2.2.1 - Identify, using its signature, the correct constructor being called
1805:	      2.2.1.1 - A signature consists of the constructor name and the parameter list 
1806:	      2.2.1.2 - The parameter list, in the header of a constructor, lists the types 
1807:	                 of the values that are passed and their variable names. These are often referred 
1808:	                 to as formal parameters 
1809:	      2.2.1.3 - A parameter is a value that is passed into a constructor. These 
1810:	                 are often referred to as actual parameters 
1811:	      2.2.1.4 - Constructors are said to be overloaded when there are multiple constructors 
1812:	                 with the same name but a different signature 
1813:	      2.2.1.5 - The actual parameters passed to a constructor must be compatible 
1814:	                 with the types identified in the formal parameter list 
1815:	      2.2.1.6 - Parameters are passed using call by value. Call by  value initializes 
1816:	                 the formal parameters with copies of the actual parameters 
1817:	   2.2.2 - For creating objects: a. Create objects by calling constructors without 
1818:	              parameters. b. Create objects by calling constructors with parameters
1819:	      2.2.2.1 - Every object is created using the keyword new followed by a call 
1820:	                 to one of the class’s constructors 
1821:	      2.2.2.2 - A class contains constructors that are invoked to create objects. 
1822:	                 They have the same name as the class 
1823:	      2.2.2.3 - Existing classes and class libraries can be utilized as appropriate 
1824:	                 to create objects 
1825:	      2.2.2.4 - Parameters allow values to be passed to the constructor to establish 
1826:	                 the initial state of the object 
1827:	   2.2.3 - Define variables of the correct types to represent reference data
1828:	      2.2.3.1 - The keyword null is a special value used to indicate that a reference 
1829:	                 is not associated with any object 
1830:	      2.2.3.2 - The memory associated with a variable of a reference type holds 
1831:	                 an object reference value or, if there is no object, null. This value is the 
1832:	                 memory address of the referenced object                
1833:	Methods are a way to break up code into logic modules and it also provides a way to avoid 
1834:	repeating code and be able to reuse sections of code logic. You can think of methods as 
1835:	analogous to "machines" that perform "actions" and you can reuse. They are also analogous to 
1836:	"functions" in math that may take a variable "input" and generate an "answer".  The term 
1837:	"parameter" (and you may have zero, one, or more than one) is the "input" (if needed) to a 
1838:	method that is passed to the method. The value(s) passed are called "argument(s)". When you 
1839:	define the method in the method "signature" line, the round brackets can contain 
1840:	parameters separated by comma (if needed). A method may also give an "output" in the form 
1841:	of its "return" value (which also might not be needed, in which case it is a "void" method).
1842:	A method is "overloaded" if you have more than one method with the exact same name but 
1843:	different parameters. Classes have "constructor" methods that are called when 
1844:	a class is instantiated into an object. Constructor methods do not have a return type 
1845:	(not even the keyword "void"). They must have the exact same name as the class (including a 
1846:	capital letter). They are used to set the properties of the class to starting (or 
1847:	"default") values. If a class has multiple constructor methods, they are said to be 
1848:	overloaded constructors. When a line of code is used to instantiate a class into an instance 
1849:	of that class, the line includes the name of the class, the identifier name of the object, 
1850:	then an equals ("="), then the keyword "new" (which allots new memory for this 
1851:	advanced data type), then a call to a constructor method. If not constructor method 
1852:	is called, then the object references a "null" value until such time it is given a value to 
1853:	reference.
1854:	// Example of a class with constructors and instantiation
1855:	class Person {
1856:	    Person() {
1857:	        // code logic
1858:	    }
1859:	    Person(int age) {
1860:	        // code logic
1861:	    }
1862:	}
1863:	Person person1 = new Person();
1864:	Person person2 = new Person(5);
1865:	2.3 - Calling a Void Method................................................................
1866:	   2.3.1 - Call non-static void methods without parameters
1867:	      2.3.1.1 - An object’s behavior refers to what the object can do (or what can 
1868:	                 be done to it) and is defined by methods 
1869:	      2.3.1.2 -  Procedural abstraction allows a programmer to use a method by knowing 
1870:	                 what the method does even if they do not know how the method was written 
1871:	      2.3.1.3 -  A method signature for a method without parameters consists of 
1872:	                 the method name and an empty parameter list
1873:	      2.3.1.4 -  A method or constructor call interrupts the sequential execution 
1874:	                 of statements, causing the program to first execute the statements in the 
1875:	                 method or constructor before continuing. Once the last statement in the method 
1876:	                 or constructor has executed or a return statement is executed, flow of control 
1877:	                 is returned to the point immediately following where the method or constructor 
1878:	                 was called 
1879:	      2.3.1.5 -  Non-static methods are called through objects of the Class 
1880:	      2.3.1.6 -  The dot operator is used along with the object name to call non-static 
1881:	                 methods 
1882:	      2.3.1.7 -  Void methods do not have return values and are therefore not called 
1883:	                 as part of an expression 
1884:	      2.3.1.8 -  Using a null reference to call a method or access an instance variable 
1885:	                 causes a NullPointerException to be thrown 
1886:	A "non-static" method is a method (meaning a "action", "behaviour", "procedure", 
1887:	or "verb") that does not use the "static" modifier word in the method signature line. 
1888:	A method with no prameters (or "inputs") means the method is defined with empty round 
1889:	brackets "( )". The "behavior" or action the method performs is defined in the body 
1890:	block of the method (between the two curly "{ }" brackets). The A.P. term "procedural 
1891:	abstraction" refers to a programmer being able to call a method without knowing how the 
1892:	method was written (also known as "black box" programming). When methods are "called" 
1893:	the execution flow stops, jumps and runs all the method body (or until a "return" 
1894:	statement) and then returns to the next line of execution after the method call line 
1895:	(or part of a code expression line). Methods can also be called from objects (or 
1896:	"instances") of a class using the dot "." operator. Void method do not return anthing 
1897:	(no "outputs") and use the keyword modifier "void" in the method signature in place of 
1898:	the return type.
1899:	// Examples of methods, parameters, return, and calling
1900:	public void show() {
1901:	    System.out.println("*")
1902:	}
1903:	public void show(char value) {
1904:	    System.out.println(value);
1905:	}
1906:	public int double(int number) {
1907:	    return number * 2;
1908:	} 
1909:	show();
1910:	show('A');
1911:	int answer = double(5);
1912:	2.4 - Calling a Void Method with Parameters ...............................................
1913:	   2.4.1 -  Call non-static void methods with parameters
1914:	      2.4.1.1 -  A method signature for a method with parameters consists of the 
1915:	                 method name and the ordered list of parameter types 
1916:	      2.4.1.2 -  Values provided in the parameter list need to correspond to the 
1917:	                 order and type in the method Signature 
1918:	      2.4.1.3 -  Methods are said to be overloaded when there are multiple methods 
1919:	                 with the same name but a different Signature 
1920:	A "non-static void" methods with parameters is a method with no outputs, but has input(s). 
1921:	This means the method signature has defined parameter(s) within the round brackets "( )" 
1922:	seperated by commas (if necessary). When this type of method is called, the "arguments" 
1923:	passed to this method must be in the same order in terms of data type. A method is 
1924:	"overloaded" when you have two or more methods with the same name but different and 
1925:	distinct parameter lists.
1926:	// Examples of method overloading
1927:	public void show() {
1928:	    System.out.println("*")
1929:	}
1930:	public void show(char value) {
1931:	    System.out.println(value);
1932:	}
1933:	public void show(int value) {
1934:	    System.out.println(value);
1935:	}
1936:	2.5 - Calling a Non-void Method  ..........................................................
1937:	   2.5.1 -  Call non-static non-void methods with or without parameters
1938:	      2.5.1.1 -  Non-void methods return a value that is the same type as the return 
1939:	                 type in the signature. To use the return value when calling a non-void method, 
1940:	                 it must be stored in a variable or used as part of an expression 
1941:	A method that does return a value, defines the return "type" in the method signature and 
1942:	the keyword "return" somewhere in the method body (at least once). When calling a return 
1943:	method, the value returned must be stored (in a variable) or used as part of an expression.
1944:	2.6 - String Objects: Concatenation, Literals, and More  ..................................
1945:	   2.6.1 -  For String class: a. Create String objects. b. Call String Methods
1946:	      2.6.1.1 -  String objects can be created by using string literals or by calling 
1947:	                 the String class constructor 
1948:	      2.6.1.2 -  String objects are immutable, meaning that String methods do not 
1949:	                 change the String object 
1950:	      2.6.1.3 -  String objects can be concatenated using the + or += operator, 
1951:	                 resulting in a new String object 
1952:	      2.6.1.4 -  Primitive values can be concatenated with a String object. This 
1953:	                 causes implicit conversion of the values to String objects 
1954:	      2.6.1.5 -  Escape sequences start with a \ and have a special meaning in Java. 
1955:	                 Escape sequences used in this course include \", \\, and \n 
1956:	The "String" class allows you to create String variables, concatenate them (join) 
1957:	together and use "built-in" methods of the String class. String literals (contained in 
1958:	quotes "") can be assigned to String variables or concatenated with Strings. String methods 
1959:	do not change the String ("immutable") object. The "+" or the "+=" operators can be used 
1960:	to concatenate Strings (resulting in a new String object). Primitives (like int, double, 
1961:	etc.) can also be concatenated with String objects. Those are now automatically converted 
1962:	to Strings and then concatenated. Escape sequences is the character "\" followed 
1963:	by another character to make certain outputs or changes to a String object. These include: 
1964:	\" for a quote, \\ for a slash, and \n for a new line.
1965:	// Examples of Strings and escape sequences
1966:	String str1 = "cat";
1967:	String str2 = str1 + "ty";
1968:	str1 += str2;
1969:	str2 = "\n" + str1 + "\\" + "\" dog";
1970:	2.7 - String Methods.......................................................................
1971:	   2.7.1 -  For String class: a. Create String objects. b. Call String methods
1972:	      2.7.1.1 -  Application program interfaces (APIs) and libraries simplify complex 
1973:	                 programming tasks 
1974:	      2.7.1.2 -  Documentation for APIs and libraries are essential to understanding 
1975:	                 the attributes and behaviors of an object of a class 
1976:	      2.7.1.3 -  Classes in the APIs and libraries are grouped into Packages 
1977:	      2.7.1.4 -  The String class is part of the java.lang package. Classes in the 
1978:	                 java.lang package are available by Default 
1979:	      2.7.1.5 -  A String object has index values from 0 to length – 1. Attempting 
1980:	                 to access indices outside this range will result in an IndexOutOfBoundsException 
1981:	      2.7.1.6 -  A String object can be concatenated with an object reference, which 
1982:	                 implicitly calls the referenced object's toString method 
1983:	      2.7.1.7 -  The following String methods and constructors—including what they 
1984:	                 do and when they are used—are part of the Java Quick Reference: (A) String(String 
1985:	                 str) — Constructs a new String object that represents the same sequence of 
1986:	                 characters as str (B) int length() — Returns the number of characters in a 
1987:	                 String object (C) String substring(int from) — Returns substring(from, length()) 
1988:	                 (D) int indexOf(String str) — Returns the index of the first occurrence of 
1989:	                 str; returns -1 if not found (E) boolean equals(String other) — Returns true 
1990:	                 if this is equal to other; returns false otherwise (F) int compareTo(String 
1991:	                 other) — Returns a value < 0 if this is less than other; returns zero if this 
1992:	                 is equal to other; returns a value > 0 if this is greater than other  
1993:	      2.7.1.8 -  A string identical to the single element substring at position 
1994:	                 index can be created by calling substring(index, index + 1) 
1995:	The "API" or Application Program Interface is a "library" of code that could be imported 
1996:	into a Java project or it could automatically be part of every Java project without needing 
1997:	an import. Classes and libraries are organized into "packages" in Java (also known as 
1998:	"namespaces"). The String class is in the "java.lang" package. Strings are collections 
1999:	of "char" values index from 0 up to the length of the String minus 1 (just like arrays 
2000:	are indexed). String methods used are: the String constructor "String s = new String();", 
2001:	the "length()" method, the "substring(int)" and "substring(int,int)" methods, the 
2002:	"indexOf(String)" method, the "equals(String)" method, and the 
2003:	"compareTo(String)" method.
2004:	// Examples of String methods
2005:	String str3 = new String("chatty");
2006:	// Constructs object with same sequence of characters as str3
2007:	int length = str3.length();
2008:	// Returns the number of characters in a String object
2009:	String str4 = str3.substring(1);
2010:	// Returns substring(from) starting at index "from" to the end
2011:	String str5 = str3.substring(1,3);
2012:	// Returns substring(from, to) starting at index "from" to index "to"
2013:	int index = str3.indexOf("hat");
2014:	// Returns the index of the first occurrence (returns -1 if not found)
2015:	boolean result1 = str3.equals(str4);
2016:	// Returns true if this is equal to other (returns false otherwise)
2017:	int result2 = str3.compareTo(str5);
2018:	// Returns value < 0 if less than other, returns 0 if equal to other,
2019:	// and returns value > 0 if greater than other
2020:	2.8 - Wrapper Classes: Integer and Double  ................................................
2021:	   2.8.1 -  For wrapper classes: a. Create Integer objects, b. Call Integer methods, 
2022:	              c. Create Double objects, d. Call Double Methods
2023:	      2.8.1.1 -  The Integer class and Double class are part of the java.lang package 
2024:	      2.8.1.2 -  The following Integer methods and constructors — including what 
2025:	                 they do and when they are used—are part of the Java Quick Reference: (A) Integer(int 
2026:	                 value) — Constructs a new Integer object that represents the specified int 
2027:	                 value (B) Integer.MIN_VALUE — The minimum value represented by an int or Integer 
2028:	                 (C) Integer.MAX_VALUE — The maximum value represented by an int or Integer 
2029:	                 (D) int intValue() — Returns the value of this Integer as an Int 
2030:	      2.8.1.3 -  The following Double methods and constructors— including what they 
2031:	                 do and when they are used—are part of the Java Quick Reference: (A) double 
2032:	                 doubleValue() — Returns the value of this Double as a double 
2033:	      2.8.1.4 -  Autoboxing is the automatic conversion that the Java compiler makes 
2034:	                 between primitive types and their corresponding object wrapper classes. This 
2035:	                 includes converting an int to an Integer and a double to a Double 
2036:	      2.8.1.5 -  The Java compiler applies autoboxing when a primitive value is: 
2037:	                 (A) Passed as a parameter to a method that expects an object of the corresponding 
2038:	                 wrapper class. (B) Assigned to a variable of the corresponding wrapper class 
2039:	      2.8.1.6 -  Unboxing is the automatic conversion that the Java compiler makes 
2040:	                 from the wrapper class to the primitive type. This includes converting an 
2041:	                 Integer to an int and a Double to a double 
2042:	      2.8.1.7 -  The Java compiler applies unboxing when a wrapper class object 
2043:	                 is: (A) Passed as a parameter to a method that expects a value of the corresponding 
2044:	                 primitive type (B) Assigned to a variable of the corresponding primitive type 
2045:	A "wrapper class" is a class type that is based in a primitive data type. For example the 
2046:	primitive data type "int" has the wrapper class "Integer". Similarily, the "Double" 
2047:	wrapper class, wraps around the "double" primitive type. The wrapper classes (using a 
2048:	capital letter) are part of java.lang and have built-in methods like "parseInt()" and 
2049:	"parseDouble()". Other methods include: "Integer(int)" a constructor, 
2050:	"Double(double)" a constructor, "MIN_VALUE" a constant, "MAX_VALUE", "intValue()", and 
2051:	"doubleValue()". Boxing and unboxing can be done between the wrapper classes and the 
2052:	primitive types (known as "autoboxing"). The term "boxing" means the conversion between 
2053:	primitive types and corresponding wrapper. The term "unboxing" means the conversion 
2054:	from the wrapper class to the primitive type.
2055:	// Example of wrapper classes and methods...
2056:	int     integerPrimitive1 = Integer.parseInt("10");
2057:	double  doublePrimitive1  = Double.parseDouble("1.2");
2058:	Integer integerObject     = new Integer("10");
2059:	Double  doubleObject      = new Double("1.2");
2060:	int     integerPrimitive2 = integerObject.intValue();
2061:	double  doublePrimitive2  = doubleObject.doubleValue();
2062:	int     minInteger        = Integer.MIN_VALUE;
2063:	int     maxInteger        = Integer.MAX_VALUE;
2064:	double  minDouble         = Double.MIN_VALUE;
2065:	double  maxDouble         = Double.MAX_VALUE;
2066:	// Boxing and unboxing...
2067:	int     integerPrimitive3 = integerObject1;
2068:	double  doublePrimitive3  = doubleObject1;
2069:	Integer integerObject2    = integerPrimitive3;
2070:	Double  doubleObject2     = doublePrimitive3;
2071:	2.9 - Using the Math Class  ...............................................................
2072:	   2.9.1 -  Call static methods
2073:	      2.9.1.1 - Static methods are called using the dot operator along with the 
2074:	                 class name unless they are defined in the enclosing class 
2075:	   2.9.2 -  Evaluate expressions that use the Math class methods
2076:	      2.9.2.1 -  The Math class is part of the java.lang package 
2077:	      2.9.2.2 -  The Math class contains only static methods 
2078:	      2.9.2.3 -  The following static Math methods—including what they do and when 
2079:	                 they are used—are part of the Java Quick Reference: (A) int abs(int x) — Returns 
2080:	                 the absolute value of an int value (B) double abs(double x) — Returns the 
2081:	                 absolute value of a double value (C) double pow(double base, double exponent) 
2082:	                 — Returns the value of the first parameter raised to the power of the second 
2083:	                 parameter (D) double sqrt(double x) — Returns the positive square root of 
2084:	                 a double value (E) double random() — Returns a double value greater than or 
2085:	                 equal to 0.0 and less than 1.0 
2086:	      2.9.2.4 -  The values returned from Math.random can be manipulated to produce 
2087:	                 a random int or double in a defined range 
2088:	The "Math" class is part of the java.lang package and has built-in static methods that can 
2089:	be called. Useful methods include: abs, pow, sqrt, and random. Including manipulating the 
2090:	random method in a formula to define random numbers in a range. Examples of this follow...
2091:	// Examples of the Math class methods and randoms...
2092:	int    value1 = Math.abs(-1);
2093:	double value2 = Math.abs(-1.2);
2094:	double value3 = Math.pow(2,3);
2095:	double value4 = Math.sqrt(9);
2096:	double value5 = Math.random();
2097:	final double HIGH = 10.9d;
2098:	final double LOW  = 5.5d;
2099:	double value6 = (HIGH - LOW + 1.0d) * Math.random() + LOW;
2100:	Unit 5 - Writing Classes...................................................................
2101:	5.1 - Anatomy of a Class  .................................................................
2102:	   5.1.1 - Designate access and visibility constraints to classes, data, constructors, 
2103:	              and methods
2104:	      5.1.1.1 - The keywords public and private affect the access of  classes, data, 
2105:	                  constructors, and methods 
2106:	      5.1.1.2 - The keyword private restricts access to the declaring class, while 
2107:	                 the keyword public allows access from classes outside the declaring class 
2108:	      5.1.1.3 - Classes are designated public 
2109:	      5.1.1.4 - Access to attributes should be kept internal to the class. Therefore, 
2110:	                 instance variables are designated  as private 
2111:	      5.1.1.5 - Constructors are designated public 
2112:	      5.1.1.6 - Access to behaviors can be internal or external to the class. Therefore, 
2113:	                 methods can be designated as either public or private 
2114:	   5.1.2 - Designate private visibility of instance variables to encapsulate the 
2115:	              attributes of an object
2116:	      5.1.2.1 - Data encapsulation is a technique in which the implementation details 
2117:	                 of a class are kept hidden from the user 
2118:	      5.1.2.2 - When designing a class, programmers make decisions about what data 
2119:	                 to make accessible and modifiable from an external class. Data can be either 
2120:	                 accessible or modifiable, or it can be both or neither 
2121:	      5.1.2.3 - Instance variables are encapsulated by using the private access 
2122:	                 modifier 
2123:	      5.1.2.4 - The provided accessor and mutator methods in a class allow client 
2124:	                 code to use and modify data 
2125:	The properties (attributes) and methods (actions) of a class can be defined in terms of 
2126:	visibility. This means that the keywords "public" and "private" can be used as a 
2127:	modifier in the front of a method signature or at the front of a property declaration line 
2128:	to define the encapsulation level. The public keyword means the property can be accessed (and 
2129:	modified) both inside the class and from other classes outside the class. In terms of methods 
2130:	it means the method can be called within the class (by other methods) and outside the class 
2131:	from other classes using the dot "." operator. Classes and constructor methods are 
2132:	designated public. The concept of "encapsulation" is used to make certain data and actions 
2133:	private and protect them from outside classes and perhaps only allow access through accessor 
2134:	and modifier ("getter" and "setter") methods.
2135:	// Class example private/public properties and methods
2136:	class Apple { 
2137:	    public int number;
2138:	    private double price;
2139:	    public void eat() {
2140:	        // logic here
2141:	    }
2142:	    private void spoil() {
2143:	        // logic here
2144:	    }
2145:	}
2146:	5.2 - Constructors  .......................................................................
2147:	   5.2.1 - Define instance variables for the attributes to be initialized through 
2148:	              the constructors of a class
2149:	      5.2.1.1 - An object’s state refers to its attributes and their values at a 
2150:	                 given time and is defined by instance variables belonging to the object. This 
2151:	                 creates a  "has-a" relationship between the object and its instance variables 
2152:	      5.2.1.2 - Constructors are used to set the initial state of an object, which 
2153:	                 should include initial values for all instance variables 
2154:	      5.2.1.3 - Constructor parameters are local variables to the constructor and 
2155:	                 provide data to initialize instance variables 
2156:	      5.2.1.4 - When a mutable object is a constructor parameter, the instance variable 
2157:	                 should be initialized with a copy of the referenced object. In this way, the 
2158:	                 instance variable is not an alias of the original object, and methods are 
2159:	                 prevented from modifying the state of the original object 
2160:	      5.2.1.5 - When no constructor is written, Java provides a no-argument constructor, 
2161:	                 and the instance variables are set to default values 
2162:	A constructor method is a special method defined in a class that is called when a class is 
2163:	instantiated into an instance (or "object") of that class. The constructor method has to have 
2164:	the exact same name as the class (including letter case) and no return type (not even the 
2165:	word void). Constructors are usually used to set the initial (or "default") values for the 
2166:	class properties. This can be said to be setting the "state" of the object. If any of the 
2167:	properties (attributes) are another class level instance variable (not a primitive type), 
2168:	then this class is said to have a "has-a" relationship with that class. This can also be 
2169:	called "association" or "composition" between the classes. Constructors can have 
2170:	parameters passed to the class that can be used in setting the initial state. When no 
2171:	constructor is written, Java provides a no-argument constructor, and the instance 
2172:	variables are set to default values.
2173:	// Class example association and constructors
2174:	class Basket {
2175:	    public Apple apple;
2176:	    public Basket() {
2177:	        // logic here
2178:	    }
2179:	    public Basket(Apple apple) {
2180:	        // logic here
2181:	    }
2182:	}
2183:	5.3 - Documentation with Comments  ........................................................
2184:	   5.3.1 - Describe the functionality and use of program code through comments
2185:	      5.3.1.1 - Comments are ignored by the compiler and are not executed when the 
2186:	                 program is run 
2187:	      5.3.1.2 - Three types of comments in Java include /* */, which generates a 
2188:	                 block of comments, //, which generates a comment on one line, and /** */, 
2189:	                 which are Javadoc comments and are used to create API documentation 
2190:	      5.3.1.3 - A precondition is a condition that must be true just prior to the 
2191:	                 execution of a section of program code in order for the method to behave as 
2192:	                 expected. There is no expectation that the method will check to ensure preconditions 
2193:	                 are satisfied 
2194:	      5.3.1.4 - A postcondition is a condition that must always be true after the 
2195:	                 execution of a section of program code. Postconditions describe the outcome 
2196:	                 of the execution in terms of what is being returned or the state of an object 
2197:	      5.3.1.5 - Programmers write method code to satisfy the postconditions when 
2198:	                 preconditions are met 
2199:	Comments are a documentation system that allows programmers to leave notes for themselves or 
2200:	other programmers. This can serve several purposes including (but not limited to) 
2201:	documenting names and dates, explaining code logic, working through problem solving logic, 
2202:	and others. In Java, the two forward slashes // allows a comment at the end of a line of code or 
2203:	on its own line. A slash and a star /* opens a comment block which will continue until a star 
2204:	and slash */ closes the comment block. The slash and two stars /** open the JavaDoc style of 
2205:	comment block which many IDEs (e.g. NetBeans) recognize and help with commenting and to create 
2206:	API documentation. Methods should be commented with the method's purpose (a brief description), 
2207:	any pre-conditions (the parameters if any), and post-conditions (the return type if any) of the 
2208:	method.
2209:	// Comments...
2210:	// a standard comment
2211:	/* opens a comment block */
2212:	/** JavaDoc comment block */
2213:	5.4 - Accessor Methods  ...................................................................
2214:	   5.4.1 - Define behaviors of an object through non-void methods without parameters 
2215:	              written in a class
2216:	      5.4.1.1 - An accessor method allows other objects to obtain the  value of 
2217:	                 instance variables or static variables 
2218:	      5.4.1.2 - A non-void method returns a single value. Its header includes the 
2219:	                 return type in place of the keyword void 
2220:	      5.4.1.3 - In non-void methods, a return expression compatible with the return 
2221:	                 type is evaluated, and a copy of that value is returned. This is referred 
2222:	                 to as "return by  value."  
2223:	      5.4.1.4 - When the return expression is a reference to an object, a copy of 
2224:	                 that reference is returned, not a copy of the object 
2225:	      5.4.1.5 - The return keyword is used to return the flow of control to the 
2226:	                 point immediately following where the method or constructor was called 
2227:	      5.4.1.6 - The toString method is an overridden method that is included in 
2228:	                 classes to provide a description of a specific object. It generally includes 
2229:	                 what values are stored in the instance data of the object 
2230:	      5.4.1.7 - If System.out.print or System.out.println is passed an object, that 
2231:	                 object’s toString method is called, and the returned string is printed 
2232:	Accessor methods are the names given to methods in a class that "access" data. this usually 
2233:	means properties of the class that are encapsulated (private). Other names for 
2234:	accessors are "getters" or "get" methods. The method (behaviours, actions, functions, 
2235:	procedures) of a class are accessed with the dot operator (".") after the name of the 
2236:	object (instance of the class). Non-void methods that return a value can then be used as 
2237:	part of a code line expression. The return type of the method must be compatible with any 
2238:	data types (e.g. variables) being used in the expression. If the return type is a class level 
2239:	type then the method returns a reference to the actual object ("return by reference") not a 
2240:	reference to a copy ("return by value") of the actual object. If the "System.out.print" 
2241:	or "System.out.println" methods are called and an object is passed to those methods, the 
2242:	object's "toString()" method is automatically 
2243:	invoked (called) in the output.
2244:	// Examples of calling methods in a class
2245:	class Fighter {
2246:	    private int health;
2247:	    private Weapon weapon;
2248:	    public int getHealth() {
2249:	        return health;
2250:	    }
2251:	    public Weapon getWeapon() {
2252:	        return weapon;
2253:	    }
2254:	}
2255:	Fighter fighter = new Fighter();
2256:	int hp = fighter.health;
2257:	Weapon club = fighter.getWeapon();
2258:	5.5 - Mutator Methods  ....................................................................
2259:	   5.5.1 - Define behaviors of an object through void methods with or without parameters 
2260:	              written in a class
2261:	      5.5.1.1 - A void method does not return a value. Its header contains the keyword 
2262:	                 void before the method name 
2263:	      5.5.1.2 - A mutator (modifier) method is often a void method that changes 
2264:	                 the values of instance variables or static variables 
2265:	Mutator methods are the name given to methods that "change" a property of a class (usually 
2266:	an encapsulated property). These can be void methods (but are sometimes boolean methods to 
2267:	indicate success or not).
2268:	// Examples of calling mutator methods in a class
2269:	class Fighter {
2270:	    private int health;
2271:	    public int setHealth(int health) {
2272:	        this.health = health;
2273:	    }
2274:	}
2275:	Fighter fighter = new Fighter();
2276:	fighter.setHealth(10);
2277:	5.6 - Writing Methods  ....................................................................
2278:	   5.6.1 - Define behaviors of an object through non-void methods with parameters 
2279:	              written in a class
2280:	      5.6.1.1 - Methods can only access the private data and methods of a parameter 
2281:	                 that is a reference to an object when the parameter is the same type as the 
2282:	                 method’s enclosing class 
2283:	      5.6.1.2 - Non-void methods with parameters receive values through parameters, 
2284:	                 use those values, and return a computed value of the specified type 
2285:	      5.6.1.3 - It is good programming practice to not modify mutable objects that 
2286:	                 are passed as parameters unless required in the specification 
2287:	      5.6.1.4 - When an actual parameter is a primitive value, the formal parameter 
2288:	                 is initialized with a copy of that value. Changes to the formal parameter 
2289:	                 have no effect on the corresponding actual parameter 
2290:	      5.6.1.5 - When an actual parameter is a reference to an object, the formal 
2291:	                 parameter is initialized with a copy of that reference, not a copy of the 
2292:	                 object. If the reference is to a mutable object, the method or constructor 
2293:	                 can use this reference to alter the state of the object 
2294:	      5.6.1.6 - Passing a reference parameter results in the formal parameter and 
2295:	                 the actual parameter being aliases. They both refer to the same object 
2296:	Methods are written to model an "action". Also known as functions or procedures, methods may 
2297:	or may not have zero, one, or more than one "input(s)" called "parameters" (or empty round 
2298:	brackets if no inputs are required). Methods may have zero (a "void" method) or one "output" 
2299:	known as the return type. If the parameter is a primitive data type, then a copy of the data 
2300:	from the original primitive type is passed to the method ("pass by value"). If the parameter 
2301:	is an advanced data type ("class" level data) then a reference to that object is passed. This 
2302:	means that any changes the method makes to the object will be reflected (unless the object 
2303:	was an immutable object). Because the passed reference object parameter and the original 
2304:	argument object are "linked" they can be referred to as "aliases".
2305:	5.7 - Static Variables and Methods  .......................................................
2306:	   5.7.1 - Define behaviors of a class through static methods
2307:	      5.7.1.1 - Static methods are associated with the class, not objects of the 
2308:	                 class 
2309:	      5.7.1.2 - Static methods include the keyword static in the header before the 
2310:	                 method name 
2311:	      5.7.1.3 - Static methods cannot access or change the values of instance variables 
2312:	      5.7.1.4 - Static methods can access or change the values of static variables 
2313:	      5.7.1.5 - Static methods do not have a this reference and are unable to use 
2314:	                 the class’s instance variables or call non-static methods 
2315:	   5.7.2 - Define the static variables that belong to the class 
2316:	      5.7.2.1 - Static variables belong to the class, with all objects of a class 
2317:	                 sharing a single static variable 
2318:	      5.7.2.2 - Static variables can be designated as either public or private and 
2319:	                 are designated with the static keyword before the variable type 
2320:	      5.7.2.3 - Static variables are used with the class name and the dot operator, 
2321:	                 since they are associated with a class, not objects of a class 
2322:	Although they can be called from an object of a class, "static" methods are generally called 
2323:	from the class name itself. Static methods "belong" to the class itself and therefore 
2324:	do not require you to instantiate an object to call a method from that class. The keyword 
2325:	"static" is included as a modifier word in the method signature line. Static methods 
2326:	cannot access or change the values of instance properties of a class but can change/access 
2327:	static properties. Static properties (variables) also "belong" to the class itself 
2328:	and are "shared" by all objects of the class. Static properties can be either public or 
2329:	private and are also declared using the "static" keyword as a modifier for the 
2330:	property. Static properties are used with the class name and then the dot operator and then 
2331:	the name of the property (although they can also be accessed from an object name). 
2332:	// Static properties and methods
2333:	class Fighter {
2334:	    public static int number;
2335:	    public static void attack() {
2336:	        // logic here
2337:	    }
2338:	}
2339:	Fighter.number = 10;
2340:	Fighter.attack();
2341:	5.8 - Scope and Access  ...................................................................
2342:	   5.8.1 - Explain where variables can be used in the program code
2343:	      5.8.1.1 - Local variables can be declared in the body of constructors and 
2344:	                 methods. These variables may only be used within the constructor or method 
2345:	                 and cannot be declared to be public or private 
2346:	      5.8.1.2 - When there is a local variable with the same name as an instance 
2347:	                 variable, the variable name will refer to the local variable instead of the 
2348:	                 instance variable 
2349:	      5.8.1.3 - Formal parameters and variables declared in a method or constructor 
2350:	                 can only be used within that method or constructor 
2351:	      5.8.1.4 - Through method decomposition, a programmer breaks down a large problem 
2352:	                 into smaller subproblems by creating methods to solve each individual subproblem 
2353:	Variables can be used throughout code in classes and methods and have a "scope" defining where 
2354:	the variable can be accessed and modified. A "local" variable is one which is defined in a 
2355:	code block like a control structure (a loop or if statement) or a method. The scope of that 
2356:	variable is that internal code block and no other variables can have the same name within 
2357:	that scope. A "global" variable is one declared at the class level and its scope is 
2358:	the entire code module (class). When there is a local variable with the same name as a global 
2359:	variable, the variable name will reference the local variable over the global variable. This 
2360:	could be a potential name conflict. The keyword "this" with the dot operator can make an 
2361:	explicit reference to the global variable over the local variable. 
2362:	// Local and global variable scopes
2363:	class Fighter {
2364:	    public int number;
2365:	    public void attack(int number) {
2366:	        this.number = number;
2367:	    }
2368:	}
2369:	5.9 - this Keyword  .......................................................................
2370:	   5.9.1 - Evaluate object reference expressions that use the keyword this
2371:	      5.9.1.1 - Within a non-static method or a constructor, the keyword this is 
2372:	                 a reference to the current object the object whose method or constructor is 
2373:	                 being called 
2374:	      5.9.1.2 - The keyword this can be used to pass the current object as an actual 
2375:	                 parameter in a method call 
2376:	The keyword "this" is an explicit reference to the (eventual) object within a class. It 
2377:	refers to the name of an object that will later be instantiated by the class the word this 
2378:	is used within. The word "this" can be used to give explicit control to a global variable 
2379:	or call a class method. The keyword "this" can also be used to pass the current object 
2380:	as an actual parameter in a method call.
2381:	5.10 - Ethical and Social Implications of Computing Systems  ..............................
2382:	   5.10.1 - Explain the ethical and social implications of computing systems
2383:	      5.10.1.1 - System reliability is limited. Programmers should make an effort 
2384:	                 to maximize system reliability 
2385:	      5.10.1.2 - Legal issues and intellectual property concerns arise when creating 
2386:	                 programs 
2387:	      5.10.1.3 - The creation of programs has impacts on society, economies, and 
2388:	                 culture. These impacts can be beneficial and/or harmful 
2389:	The social and ethical considerations of computing and Computer Science are things as 
2390:	an A.P. student you should be aware of. These are not necessarily testable concepts on the 
2391:	A.P. exam. The general ideas of legality, impact, and reliability of computing systems 
2392:	and software should always be considered by programers and Computer Scientists.
2393:	Unit 9 - Inheritance           ............................................................
2394:	9.1 - Creating Superclasses and Subclasses  ...............................................
2395:	   9.1.1 -  Create an inheritance relationship from a subclass to the superclass
2396:	      9.1.1.1 - A class hierarchy can be developed by putting common attributes 
2397:	                 and behaviors of related classes into a single class called a superclass 
2398:	      9.1.1.2 - Classes that extend a superclass, called subclasses, can draw upon 
2399:	                 the existing attributes and behaviors  of the superclass without repeating 
2400:	                 these in the code 
2401:	      9.1.1.3 - Extending a subclass from a superclass creates an "is-a" relationship 
2402:	                 from the subclass to the superclass 
2403:	      9.1.1.4 - The keyword extends is used to establish an inheritance relationship 
2404:	                 between a subclass and a superclass. A class can extend only one superclass 
2405:	Add your own example(s) here...
2406:	9.2 - Writing Constructors for Subclasses..................................................
2407:	   9.2.1- Create an inheritance relationship from a subclass to the Superclass
2408:	      9.2.1.1 - Constructors are not inherited 
2409:	      9.2.1.2 - The superclass constructor can be called from the first line of 
2410:	                 a subclass constructor by using the keyword super and passing appropriate 
2411:	                 parameters 
2412:	      9.2.1.3 - The actual parameters passed in the call to the superclass constructor 
2413:	                 provide values that the constructor can use to initialize the object’s instance 
2414:	                 variables 
2415:	      9.2.1.4 - When a subclass’s constructor does not explicitly call a superclass’s 
2416:	                 constructor using super, Java inserts a call to the superclass’s no-argument 
2417:	                 constructor
2418:	      9.2.1.5 - Regardless of whether the superclass constructor is called implicitly 
2419:	                 or explicitly, the process of calling superclass constructors continues until 
2420:	                 the Object constructor is called. At this  point, all of the constructors 
2421:	                 within the hierarchy execute beginning with the Object constructor 
2422:	Add your own example(s) here...
2423:	9.3 - Overriding Methods  .................................................................
2424:	   9.3.1 - Create an inheritance relationship from a subclass to the Superclass
2425:	      9.3.1.1 - Method overriding occurs when a public method in a subclass has 
2426:	                 the same method signature as a public method in the superclass 
2427:	      9.3.1.2 - Any method that is called must be defined within its own class or 
2428:	                 its superclass 
2429:	      9.3.1.3 - A subclass is usually designed to have modified (overridden) or 
2430:	                 additional methods or instance Variables 
2431:	      9.3.1.4 - A subclass will inherit all public methods from the superclass; 
2432:	                 these methods remain public in the subclass 
2433:	Add your own example(s) here...
2434:	9.4 - super Keyword  ......................................................................
2435:	   9.4.1 - Create an inheritance relationship from a subclass to the superclass
2436:	      9.4.1.1 - The keyword super can be used to call a superclass's constructors 
2437:	                 and methods 
2438:	      9.4.1.2 - The superclass method can be called in a subclass by using the keyword 
2439:	                 super with the method name and passing appropriate parameters 
2440:	Add your own example(s) here...
2441:	9.5 - Creating References Using Inheritance Hierarchies  ..................................
2442:	   9.5.1 - Define reference variables of a superclass to be assigned to an object 
2443:	              of a subclass in the same hierarchy
2444:	      9.5.1.1 - When a class S “is-a” class T, T is referred to as a superclass, 
2445:	                 and S is referred to as a subclass 
2446:	      9.5.1.2 - If S is a subclass of T, then assigning an object of type S to a 
2447:	                 reference of type T facilitates Polymorphism 
2448:	      9.5.1.3 - If S is a subclass of T, then a reference of type T can be used 
2449:	                 to refer to an object of type T or S 
2450:	      9.5.1.4 - Declaring references of type T, when S is a subclass of T, is useful 
2451:	                 in the following declarations: (a) Formal method parameters, (b) arrays — 
2452:	                 T[] var ArrayList<T> var 
2453:	Add your own example(s) here...
2454:	9.6 - Polymorphism  .......................................................................
2455:	   9.6.1 - Call methods in an inheritance relationship
2456:	      9.6.1.1 - Utilize the Object class through inheritance
2457:	      9.6.1.2 - At compile time, methods in or inherited by the declared type determine 
2458:	                 the correctness of a non-static method call 
2459:	      9.6.1.3 - At run-time, the method in the actual object type is executed for 
2460:	                 a non-static method call 
2461:	Add your own example(s) here...
2462:	9.7 - Object Superclass  ..................................................................
2463:	   9.7.1 - Call Object class methods through inheritance
2464:	      9.7.1.1 - The Object class is the superclass of all other classes in Java 
2465:	      9.7.1.2 - The Object class is part of the java.lang package 
2466:	      9.7.1.3 - The following Object class methods and constructors—including what 
2467:	                 they do and when they are used—are part of the Java Quick Reference: (a) boolean 
2468:	                 equals(Object other), (b) String toString() 
2469:	      9.7.1.4 - Subclasses of Object often override the equals and toString methods 
2470:	                 with class specific implementations 
2471:	Add your own example(s) here...
2472:	AP curriculum - Part 3.....................................................................
2473:	Unit 6 - Arrays............................................................................
2474:	6.1 - Array Creation and Access  ..........................................................
2475:	   6.1.1 - Represent collections of related primitive or object reference data using 
2476:	              one dimensional (1D - array objects)
2477:	      6.1.1.1 - The use of array objects allows multiple related items to be represented 
2478:	                 using a single variable 
2479:	      6.1.1.2 - The size of an array is established at the time of creation and 
2480:	                 cannot be changed 
2481:	      6.1.1.3 - Arrays can store either primitive data or object reference data 
2482:	      6.1.1.4 - When an array is created using the keyword new, all of its elements 
2483:	                 are initialized with a specific value based on the type of  elements: (a) 
2484:	                 Elements of type int are initialized to 0, (b) Elements of type double are 
2485:	                 initialized to 0.0, (c) Elements of type boolean are initialized to false, 
2486:	                 (d) Elements of a reference type are initialized to the reference value null. 
2487:	                 No objects are automatically created 
2488:	      6.1.1.5 - Initializer lists can be used to create and initialize arrays 
2489:	      6.1.1.6 - Square brackets [ ] are used to access and modify an element in 
2490:	                 a 1D array using an index 
2491:	      6.1.1.7 - The valid index values for an array are 0 through one less than 
2492:	                 the number of elements in the array, inclusive. Using an index value outside 
2493:	                 of this range will result in an ArrayIndexOutOfBoundsException being thrown 
2494:	Add your own example(s) here...
2495:	6.2 - Traversing Arrays  ..................................................................
2496:	   6.2.1 - Traverse the elements in a 1D array
2497:	      6.2.1.1 - Iteration statements can be used to access all the elements in an 
2498:	                 array. This is called traversing the array 
2499:	      6.2.1.2 - Traversing an array with an indexed for loop or while loop requires 
2500:	                 elements to be accessed using their indices 
2501:	      6.2.1.3 - Since the indices for an array start at 0 and end at the number 
2502:	                 of elements − 1, “off by one” errors are easy to make when traversing an array, 
2503:	                 resulting in an ArrayIndexOutOfBoundsException being thrown 
2504:	Add your own example(s) here...
2505:	6.3 - Enhanced for Loop for Arrays  .......................................................
2506:	   6.3.1 - Traverse the elements in a 1D array object using an enhanced for loop
2507:	      6.3.1.1 - An enhanced for loop header includes a variable, referred to as 
2508:	                 the enhanced for loop variable 
2509:	      6.3.1.2 - For each iteration of the enhanced for loop, the enhanced for loop 
2510:	                 variable is assigned a copy of an element without using its index 
2511:	      6.3.1.3 - Assigning a new value to the enhanced for loop variable does not 
2512:	                 change the value stored in the array 
2513:	      6.3.1.4 - Program code written using an enhanced for loop to traverse and 
2514:	                 access elements in an array can be rewritten using an indexed for loop or 
2515:	                 a while loop 
2516:	Add your own example(s) here...
2517:	6.4 - Developing Algorithms Using Arrays  .................................................
2518:	   6.4.1 - For algorithms in the context of a particular specification that requires 
2519:	              the use of array traversals: (a) Identify standard algorithms, (b) Modify standard 
2520:	              algorithms, (c) Develop an algorithm
2521:	      6.4.1.1 - There are standard algorithms that utilize array traversals to: 
2522:	                 (a) Determine a minimum or maximum value, (b) Compute a sum, average, or mode, 
2523:	                 (c) Determine if at least one element has a particular property, (d) Determine 
2524:	                 if all elements have a particular property, (e) Access all consecutive pairs 
2525:	                 of elements, (f) Determine the presence or absence of  duplicate elements, 
2526:	                 (g) Determine the number of elements meeting specific criteria 
2527:	      6.4.1.2 - There are standard array algorithms that utilize traversals to: 
2528:	                 (a) Shift or rotate elements left or right, (b) Reverse the order of the elements 
2529:	Add your own example(s) here...
2530:	Unit 8 - 2D Arrays       ..................................................................
2531:	8.1 - 2D Arrays  ..........................................................................
2532:	   8.1.1 - Represent collections of related primitive or object reference data using 
2533:	              two-dimensional (2D) array objects
2534:	      8.1.1.1 - 2D arrays are stored as arrays of arrays. Therefore, the way 2D 
2535:	                 arrays are created and indexed is similar to 1D array objects 
2536:	      8.1.1.2 - For the purposes of the exam, when accessing the element at arr[first][second], 
2537:	                 the first index is used for rows, the second index is used for columns 
2538:	      8.1.1.3 - The initializer list used to create and initialize a 2D array consists 
2539:	                 of initializer lists that represent 1D arrays 
2540:	      8.1.1.4 - The square brackets [row][col] are used to access and modify an 
2541:	                 element in a 2D array 
2542:	      8.1.1.5 - “Row-major order” refers to an ordering of 2D array elements where 
2543:	                 traversal occurs across each row, while “column-major order” traversal occurs 
2544:	                 down each column 
2545:	Add your own example(s) here...
2546:	8.2 - Traversing 2D Arrays  ...............................................................
2547:	   8.2.1 - For 2D array objects: (a) Traverse using nested for loops, (b) Traverse 
2548:	              using nested enhanced for loops
2549:	      8.2.1.1 - Nested iteration statements can be written to traverse the 2D array 
2550:	                 in “row-major order” or “column-major Order.” 
2551:	      8.2.1.2 - The outer loop of a nested enhanced for loop used to traverse a 
2552:	                 2D array traverses the rows. Therefore, the enhanced for loop variable must 
2553:	                 be the type of each row, which is a 1D array. The inner loop traverses a single 
2554:	                 row.  Therefore, the inner enhanced for loop variable must be the same type 
2555:	                 as the elements stored in the 1D array       
2556:	Add your own example(s) here...
2557:	AP curriculum - Part 4.....................................................................
2558:	Unit 7 - Array List........................................................................
2559:	7.1 - Introduction to ArrayList  ..........................................................
2560:	   7.1.1 - Represent collections of related object reference data using ArrayList 
2561:	              objects
2562:	      7.1.1.1 - An ArrayList object is mutable and contains object references
2563:	      7.1.1.2 - The ArrayList constructor ArrayList() constructs an empty list 
2564:	      7.1.1.3 - Java allows the generic type ArrayList<E>, where the generic type 
2565:	                 E specifies the type of the elements 
2566:	      7.1.1.4 - When ArrayList<E> is specified, the types of the reference parameters 
2567:	                 and return type when using the methods are type E 
2568:	      7.1.1.5 - ArrayList<E> is preferred over ArrayList because it allows the compiler 
2569:	                 to find errors that would otherwise be found at run-time 
2570:	Add your own example(s) here...
2571:	7.2 - ArrayList Methods  ..................................................................
2572:	   7.2.1 - Represent collections of related object reference data using ArrayList 
2573:	              objects
2574:	      7.2.1.1 - The ArrayList class is part of the java.util package.  An import 
2575:	                 statement can be used to make this class available for use in the program 
2576:	      7.2.1.2 - The following ArrayList methods—including what they do and when 
2577:	                 they are used—are part of the Java Quick Reference: (a) int size() - Returns 
2578:	                 the number of elements in the list, (b) boolean add(E obj) - Appends obj to 
2579:	                 end of list; returns true, (c) void add(int index, E obj) - Inserts obj at 
2580:	                 position index (0 <= index <= size), moving elements at position index and 
2581:	                 higher to the right (adds 1 to their indices) and adds 1 to size, (d) E get(int 
2582:	                 index) - Returns the element at position index in the list, (e) E set(int 
2583:	                 index, E obj) — Replaces the element at position index with obj; returns the 
2584:	                 element formerly at position index E remove(int index) — Removes element from 
2585:	                 position index, moving elements at position index + 1 and higher to the left 
2586:	                 (subtracts 1 from their indices) and subtracts 1 from  size;  returns the 
2587:	                 element formerly at position index 
2588:	Add your own example(s) here...
2589:	7.3 - Traversing ArrayLists  ..............................................................
2590:	   7.3.1 - For ArrayList objects: (a) Traverse using a for or while loop, (b) Traverse 
2591:	              using an enhanced for loop
2592:	      7.3.1.1 - Iteration statements can be used to access all the elements in an 
2593:	                 ArrayList. This is called traversing the ArrayList 
2594:	      7.3.1.2 - Deleting elements during a traversal of an ArrayList requires using 
2595:	                 special techniques to avoid skipping elements 
2596:	      7.3.1.3 - Since the indices for an ArrayList start at 0 and end at the number 
2597:	                 of elements − 1, accessing an index value outside of this range will result 
2598:	                 in an ArrayIndexOutOfBoundsException being thrown 
2599:	      7.3.1.4 - Changing the size of an ArrayList while traversing it using an enhanced 
2600:	                 for loop can result in a ConcurrentModificationException being thrown. Therefore, 
2601:	                 when using an enhanced for loop to traverse an ArrayList, you should not add 
2602:	                 or remove elements 
2603:	Add your own example(s) here...
2604:	7.4 - Developing Algorithms Using ArrayLists  .............................................
2605:	   7.4.1 - For algorithms in the context of a particular specification that requires 
2606:	              the use of ArrayList traversals: (a) Identify standard algorithms, (b) Modify 
2607:	              standard algorithms, (c) Develop an algorithm
2608:	      7.4.1.1 - There are standard ArrayList algorithms that utilize traversals 
2609:	                 to: (a) Insert elements, (b) Delete elements, (c) Apply the same standard 
2610:	                 algorithms that are used with 1D arrays 
2611:	      7.4.1.2 - Some algorithms require multiple String, array, or ArrayList objects 
2612:	                 to be traversed simultaneously
2613:	Add your own example(s) here...
2614:	7.5 - Searching  ..........................................................................
2615:	   7.5.1 - Apply sequential/linear search algorithms to search for specific information 
2616:	              in array or ArrayList objects
2617:	      7.5.1.1 - There are standard algorithms for searching 
2618:	      7.5.1.2 - Sequential/linear search algorithms check each element in order 
2619:	                 until the desired value is found or all elements in the array or ArrayList 
2620:	                 have been checked 
2621:	Add your own example(s) here...
2622:	7.6 - Sorting  ............................................................................
2623:	   7.6.1 - Apply selection sort and insertion sort algorithms to sort the elements 
2624:	              of array or ArrayList objects
2625:	      7.6.1.1 - Selection sort and insertion sort are iterative sorting algorithms 
2626:	                 that can be used to sort elements in an array or ArrayList 
2627:	   7.6.2 - Compute statement execution counts and informal run-time comparison of 
2628:	              sorting algorithms
2629:	      7.6.2.1 - Informal run-time comparisons of program code segments  can be made 
2630:	                 using statement execution counts 
2631:	Add your own example(s) here...
2632:	7.7 - Ethical Issues Around Data Collection  ..............................................
2633:	   7.7.1 - Explain the risks to privacy from collecting and storing personal data 
2634:	              on computer systems
2635:	      7.7.1.1 - When using the computer, personal privacy is at risk.  Programmers 
2636:	                 should attempt to safeguard personal privacy 
2637:	      7.7.1.2 - Computer use and the creation of programs have an impact on personal 
2638:	                 security. These impacts can be beneficial and/or harmful 
2639:	Add your own example(s) here...
2640:	Unit 10 - Recursion........................................................................
2641:	10.1 - Recursion  .........................................................................
2642:	   10.1.1 - Determine the result of executing recursive methods
2643:	      10.1.1.1 - A recursive method is a method that calls itself 
2644:	      10.1.1.2 - Recursive methods contain at least one base case, which halts the 
2645:	                 recursion, and at least one recursive call 
2646:	      10.1.1.3 - Each recursive call has its own set of local variables, including 
2647:	                 the formal parameters 
2648:	      10.1.1.4 - Parameter values capture the progress of a recursive process, much 
2649:	                 like loop control variable values capture the progress of a loop 
2650:	      10.1.1.5 - Any recursive solution can be replicated through the use of an 
2651:	                 iterative approach 
2652:	      10.1.1.6 - Recursion can be used to traverse String, array, and ArrayList 
2653:	                 objects 
2654:	Add your own example(s) here...
2655:	10.2 - Recursive Searching and Sorting  ...................................................
2656:	   10.2.1 - Apply recursive search algorithms to information in String, 1D array, 
2657:	              or ArrayList objects
2658:	      10.2.1.1 - Data must be in sorted order to use the binary search algorithm 
2659:	      10.2.1.2 - The binary search algorithm starts at the middle of a sorted array 
2660:	                 or ArrayList and eliminates half of the array or ArrayList in each iteration 
2661:	                 until the desired value is found or all elements have been eliminated 
2662:	      10.2.1.3 - Binary search can be more efficient than sequential/linear search 
2663:	      10.2.1.4 - The binary search algorithm can be written either iteratively or 
2664:	                 recursively 
2665:	   10.2.2 - Apply recursive algorithms to sort elements of array or ArrayList objects
2666:	      10.2.2.1 - Merge sort is a recursive sorting algorithm that can be used to 
2667:	                 sort elements in an array or ArrayList  
2668:	Add your own example(s) here...
2669:	Computer Science 42SAP practice tests......................................................
2670:	AP Practice Test 1.........................................................................
2671:	// Question 1...
2672:	Consider the following code segment.
2673:	int a = 5;
2674:	int b = 2;
2675:	double c = 3.0;
2676:	System.out.println(5 + a / b * c - 1);
2677:	What is printed when the code segment is executed?
2678:	(A) 0.666666666666667
2679:	(B) 9.0
2680:	(C) 10.0
2681:	(D) 11.5
2682:	(E) 14.0
2683:	// Answer 1...
2684:	C
2685:	// Question 2...
2686:	Which of the following statements assigns a random
2687:	integer between 25 and 60, inclusive to rn?
2688:	(A) int rnA = (int)(Math.random() * 25) + 36;
2689:	(B) int rnB = (int)(Math.random() * 25) + 60;
2690:	(C) int rnC = (int)(Math.random() * 26) + 60;
2691:	(D) int rnD = (int)(Math.random() * 36) + 25;
2692:	(E) int rnE = (int)(Math.random() * 60) + 25;
2693:	// Answer 2...
2694:	A
2695:	D
2696:	// Question 3...
2697:	Which of the following best describes the value
2698:	of the Boolean expression shown below?
2699:	a && !(b || a)
2700:	(A) The value is always true
2701:	(B) The value is always false
2702:	(C) The value is true when a has the value 
    false, and is false otherwise
2703:	(D) The value is true when b has the value 
    false, and is false otherwise
2704:	(E) The value is true when either a or b has 
    the value true, and is false otherwise
2705:	// Answer 3...
2706:	B
2707:	// Question 4...
2708:	Consider the following code segment
2709:	int val = 48;
2710:	int div = 6;
2711:	while((val % 2 == 0) && div > 0) {
2712:	    if (val % div == 0) {
2713:	        System.out.print(val + " ");
2714:	    }
2715:	    val /= 2;
2716:	    div--;
2717:	}
2718:	What is printed when the code segment is executed?
2719:	(A) 48 12 6
2720:	(B) 48 12 6 3
2721:	(C) 48 12 6 3 1
2722:	(D) 48 24 12 6
2723:	(E) 48 24 12 6 3
2724:	// Answer 4...
2725:	A
2726:	// Question 5...
2727:	Which of the following code segments is equivalent to the code below
2728:	if (x >= 1) x = x * 3;
2729:	if (x > 3) x = 0;
2730:	(A) x = 0
2731:	(B) if (x > 1) x = 0;
2732:	(C) if (x > 3) x = 0;
2733:	(D) if (x >= 1) x = 0;
2734:	(E) none of the above
2735:	// Answer 5...
2736:	B
2737:	// Question 6...
2738:	When is the following Boolean expression true
2739:	(a and b are integers)?
2740:	(a < b) && !(b > a)
2741:	(A) Always true
2742:	(B) Never true
2743:	(C) a = b
2744:	(D) a < b
2745:	(E) a > b
2746:	// Answer 6...
2747:	B
2748:	// Question 7...
2749:	Consider the following code segment
2750:	int i = a random number such that 1 <= i <= n;
2751:	for (int a = 2; a <= i; a++)
2752:	    for (int b = 1; b < i; b++)
2753:	        System.out.println("*");
2754:	(A) 0
2755:	(B) 1
2756:	(C) 2
2757:	(D) n - 1
2758:	(E) n - 2
2759:	// Answer 7...
2760:	B
2761:	// Question 8...
2762:	Consider the following code segment
2763:	int p = 5;
2764:	int q = 2;
2765:	int sum = 0;
2766:	while (p <= 8) {
2767:	    sum += p % q;
2768:	    p++;
2769:	    q++;
2770:	}
2771:	(A) 1
2772:	(B) 0
2773:	(C) 13
2774:	(D) 7
2775:	(E) 4
2776:	// Answer 8...
2777:	D
2778:	// Question 9...
2779:	Consider the following code segment
2780:	for (int i = 0; i <= 3; i++) {
2781:	    for (int j = 1; j <= 5; j+=2) {
2782:	        System.out.println("*");
2783:	    }
2784:	}
2785:	(A) 3
2786:	(B) 6
2787:	(C) 9
2788:	(D) 12
2789:	(E) 15
2790:	// Answer 9...
2791:	D
2792:	// Question 10...
2793:	What are the values of a and b after the for loop
2794:	finishes?
2795:	int a = 10;
2796:	int b = 3;
2797:	int t = 0;
2798:	for (int i = 1; i < 4; i++) {
2799:	    t = a;
2800:	    a = i + b;
2801:	    b = t - i;
2802:	}
2803:	(A) a = 5 and b = -2
2804:	(B) a = 6 and b = 7
2805:	(C) a = 6 and b = 3
2806:	(D) a = 12 and b = 1
2807:	(E) a = 5 and b = 8
2808:	// Answer 10...
2809:	E
2810:	AP Practice Test 2.........................................................................
2811:	// Question 1...
2812:	Consider the following class definition
2813:	public class Example
2814:	{
2815:	     private int x;
2816:	     // constructor not shown
2817:	}
2818:	Which of the following is a correct header for a
2819:	method that would return the value of the private
2820:	instance variable x so that it can be used in a
2821:	class other than Example?
2822:	(A) private int getX()
2823:	(B) private void getX()
2824:	(C) public int getX()
2825:	(D) public void getX()
2826:	(E) public void getX(int x)
2827:	// Answer 1...
2828:	C
2829:	// Question 2...
2830:	Consider the following class definitions
2831:	public class Thing1 {
2832:	     public void calc(int n) {
2833:	          n *= 3;
2834:	          System.out.print(n);
2835:	     }
2836:	}
2837:	public class Thing2 extends Thing1 {
2838:	     public void calc(int n) {
2839:	          n += 2;
2840:	          super.calc(n);
2841:	          System.out.print(n);
2842:	     }
2843:	}
2844:	The following code seqment appears in a class
2845:	other than Thing1 or Thing2
2846:	Thing1 t = new Thing2();
2847:	t.calc(2);
2848:	What is printed as a result of executing the
2849:	code segment?
2850:	(A) 4
2851:	(B) 6
2852:	(C) 68
2853:	(D) 124
2854:	(E) 1212
2855:	// Answer 2...
2856:	D
2857:	// Question 3...
2858:	Consider the following class definitions.
2859:	public class Student {
2860:	    public String getFood() {
2861:	        return "Pizza";
2862:	    }
2863:	    public String getInfo() {
2864:	        return "Studying";
2865:	    }
2866:	}
2867:	public class GradStudent extends Student {
2868:	    public String getFood() {
2869:	        return "Taco";
2870:	    }
2871:	    public String getInfo() {
2872:	        super.getInfo();
2873:	        return "Eating";
2874:	    }
2875:	}
2876:	What is printed when the following code is
2877:	executed?
2878:	Student s = new GradStudent();
2879:	System.out.println(s.getInfo());
2880:	(A) Pizza
2881:	(B) Taco
2882:	(C) Studying
2883:	(D) Eating
2884:	(E) Studying
2885:	    Eating
2886:	// Answer 3...
2887:	D
2888:	// Question 4...
2889:	Given the following class declarations:
2890:	public class Car {
2891:	    private String make;
2892:	    public Car(String theMake) {
2893:	        make = theMake;
2894:	    }
2895:	    public String getMake() {
2896:	        return make;
2897:	    }
2898:	}
2899:	public class ElectricCar extends Car {
2900:	    public ElectricCar() {
2901:	        super("Ford");
2902:	    }
2903:	    public ElectricCar(String theMake) {
2904:	        super(theMake);
2905:	    } 
2906:	}
2907:	Which of the following will cause a compile
2908:	time error?
2909:	(A) Car myCar = new Car();
2910:	(B) Car myCar1 = new ElectricCar();
2911:	(C) ElectricCar myCar2 = new ElectricCar("Ford");
2912:	(D) Car myCar3 = new Car("Ford");
2913:	(E) Car myCar4 = new ElectricCar("Ford");
2914:	// Answer 4...
2915:	A
2916:	// Question 5...
2917:	Given the following declarations.
2918:	public class Vehicle {
2919:	    public void test(Car x, SportsCar y) { }
2920:	}
2921:	public class Car extends Vehicle {
2922:	}
2923:	public class SportsCar extends Car {
2924:	}
2925:	Also consider the following code that appears
2926:	in a different class.
2927:	Vehicle v = new Vehicle();
2928:	Car c = new Car();
2929:	SportsCar sporty = new SportsCar();
2930:	Which of the following is a correct call to test ?
2931:	(A) v.test(sporty, v);
2932:	(B) sporty.test(c, c);
2933:	(C) v.test(sporty, c);
2934:	(D) sporty.test(sporty, v);
2935:	(E) c.test(sporty, sporty);
2936:	// Answer 5...
2937:	E
2938:	// Question 6...
2939:	Class C extends class B, which extends class A. 
2940:	Also, all of the three classes implement a public
2941:	method test(). How can a method in an object of
2942:	class C invoke the test() method defined in class
2943:	A (without creating a new instance of class A)?
2944:	(A) test();
2945:	(B) super.super.test();
2946:	(C) super.test();
2947:	(D) this.test();
2948:	(E) There is no way to call a method in a 
2949:	    grandparent class from a grandchild class
2950:	// Answer 6...
2951:	E
2952:	// Question 7...
2953:	Given the following class declarations. Assume
2954:	that Parent p = new Child(); appears in a client
2955:	program. What is the result of the call p.m1();
2956:	public class Parent {
2957:	    public void m1() {
2958:	        System.out.print("pm1");
2959:	        m2();
2960:	    }
2961:	    public void m2() {
2962:	        System.out.print("pm2");
2963:	    }
2964:	}
2965:	public class Child extends Parent {
2966:	    public void m1() {
2967:	        super.m1();
2968:	        System.out.print("cm1");
2969:	    }
2970:	    public void m2() {
2971:	        super.m2();
2972:	        System.out.print("cm2");
2973:	    }
2974:	}
2975:	(A) pm1pm2cm2cm1
2976:	(B) pm1pm2
2977:	(C) pm1pm2cm1cm2
2978:	(D) pm1cm1
2979:	(E) pm1
2980:	// Answer 7...
2981:	pm1pm2cm2cm1// Question 8...
2982:	Given the following class declarations.
2983:	public class Animal {
2984:	    public void eat() {
2985:	        System.out.println("AE");
2986:	    }
2987:	}
2988:	public class Bear extends Animal {
2989:	    public void growl() {
2990:	        System.out.println("BG");
2991:	    }
2992:	}
2993:	Assume the following declaration is in a 
2994:	different class.
2995:	Animal b = new Bear();
2996:	Which of the following will compile without error?
2997:	I.   b.eat();
2998:	II.  b.growl();
2999:	III. ((Bear)b).growl();
3000:	(A) I only
3001:	(B) II only
3002:	(C) III only
3003:	(D) I and III only
3004:	(E) I, II, and III
3005:	// Answer 8...
3006:	B
3007:	// Question 9...
3008:	Consider the following partial class definitions.
3009:	public class C1 {
3010:	    private int num;
3011:	    private String name;
3012:	    public C1(int theNum) {
3013:	        num = theNum
3014:	    } 
3015:	    public C1(String theName) {
3016:	        name = theName;
3017:	    }
3018:	}
3019:	public class C2 extends C1 {
3020:	    // methods not shown
3021:	}
3022:	Which of the following constructors are valid for
3023:	C2?
3024:	I. public C2() { }
3025:	II. public C2(int quan) { super(quan); }
3026:	III. public C2(String label) { super(label); }
3027:	(A) All three are valid
3028:	(B) II only
3029:	(C) III only
3030:	(D) II and III
3031:	(E) None are valid
3032:	// Answer 9...
3033:	D
3034:	// Question 10...
3035:	Given the following class definition. What are 
3036:	the values of x, y, and z just before method2
3037:	returns?
3038:	public class Class1 {
3039:	    public int method1(int a, int b) {
3040:	        int temp = a;
3041:	        a = b;
3042:	        b = temp;
3043:	        return b;
3044:	    }  
3045:	    public void method2() {
3046:	        int x = 3;
3047:	        int y = 5;
3048:	        int z = method1(x, y);
3049:	    }
3050:	}
3051:	(A) x=3,y=3,z=3
3052:	(B) x=3,y=5,z=3
3053:	(C) x=5,y=3,z=5
3054:	(D) x=5,y=3,z=3
3055:	(E) x=3,y=5,z=5
3056:	// Answer 10...
3057:	B
3058:	AP Practice Test 3.........................................................................
3059:	// Section 1...
3060:	For the next two Free response questions, 
3061:	refer to the description below...
3062:	A travel agency maintains a list of information 
3063:	about airline flights. Flight information 
3064:	includes a departure time and an arrival time.
3065:	You may assume that the two times occur on the 
3066:	same day. These times are represented by 
3067:	objects of the Time class. The declaration for
3068:	the Time class is shown below. It includes a 
3069:	method which returns the difference (in minutes)
3070:	between the current Time object and another Time
3071:	object. 
3072:	public class Time {
3073:	     /** 
3074:	      * @return difference, in minutes, between this
3075:	      * time and other; difference is negative
3076:	      * if other is earlier than this time
3077:	      */
3078:	     public int minutesUntil(Time other) {
3079:	          /* implementation not shown */
3080:	     }
3081:	     // There may be instance variables, constructors,
3082:	     // and methods that are not shown.
3083:	}
3084:	For example, assume that t1 and t2 are Time 
3085:	objects where t1 represents 1:00 p.m. and t2 
3086:	represents 2:15 p.m. The call t1.minutesUntil(t2) 
3087:	will return 75 and the call t2.minutesUntil(t1) 
3088:	will return -75. The declaration for the Flight class 
3089:	is shown below. It has methods to access the 
3090:	departure time and the arrival time of a flight. 
3091:	You may assume that the departure time of a 
3092:	flight is earlier than its arrival time.
3093:	public class Flight {
3094:	      /** @return time at which the flight departs */
3095:	      public Time getDepartureTime() {
3096:	           /* implementation not shown */ 
3097:	      }
3098:	      /** @return time at which the flight arrives */
3099:	      public Time getArrivalTime() {
3100:	           /* implementation not shown */ 
3101:	      }
3102:	      // There may be instance variables, constructors, 
3103:	      // and methods that are not shown.
3104:	}
3105:	A trip consists of a sequence of flights and is 
3106:	represented by the Trip class. The Trip class 
3107:	contains a List of Flight objects that are stored 
3108:	in chronological order. You may assume that for 
3109:	each flight after the first flight in the list, 
3110:	the departure time of the flight is later than 
3111:	the arrival time of the preceding flight in the 
3112:	list. A partial declaration of the Trip class is 
3113:	shown below. You will write two methods for the 
3114:	Trip class.
3115:	public class Trip {
3116:	     /** 
3117:	       * The list of flights (if any) that make up 
3118:	       * this trip, stored in chronological order
3119:	       */
3120:	     private List<Flight> flights;
3121:	     /** 
3122:	       * @return the number of minutes from the 
3123:	       * departure of the first flight to the arrival 
3124:	       * of the last flight if there are one or more 
3125:	       * flights in the trip; 0, if there are no 
3126:	       * flights in the trip
3127:	       */
3128:	     public int getDuration() {
3129:	          /* to be implemented in part (a) */ 
3130:	     }
3131:	     /** 
3132:	       * Precondition: the departure time for each 
3133:	       * flight is later than the arrival time of its 
3134:	       * preceding flight
3135:	       * @return the smallest number of minutes 
3136:	       * between the arrival of a flight and the 
3137:	       * departure of the flight immediately after it, 
3138:	       * if there are two or more flights in the 
3139:	       * trip; -1, if there are fewer than two flights 
3140:	       * in the trip
3141:	       */
3142:	     public int getShortestLayover() {
3143:	          /* to be implemented in part (b) */
3144:	     }
3145:	       // There may be instance variables, constructors,
3146:	       // and methods that are not shown
3147:	}
3148:	// Question 1...
3149:	Complete method getDuration below.  
3150:	// An answer could be...
3151:	public int getDuration() {
3152:	    int totalDuration = 0;
3153:	    for (Flight flight : flights) {
3154:	        Time departure = flight.getDepartureTime();
3155:	        Time arrival   = flight.getArrivalTime();
3156:	        int  duration  = departure.minutesUntil(arrival);
3157:	        totalDuration  = totalDuration + duration;
3158:	    }
3159:	    return totalDuration;
3160:	}
3161:	// Question 2...
3162:	Write the Trip method getShortestLayover. A 
3163:	layover is the number of minutes from the arrival 
3164:	of one flight in a trip to the departure of the 
3165:	flight immediately after it. If there are two or 
3166:	more flights in the trip, the method should return 
3167:	the shortest layover of the trip; otherwise, it 
3168:	should return -1. For example, assume that the 
3169:	instance variable flights of a Trip object vacation 
3170:	contains the following flight information.
3171:	          Departure   Arrival   Layover
3172:	            Time      Time     (minutes)
3173:	         +---------+----------+
3174:	Flight 0 | 11:30am |  12:15pm |
3175:	         +---------+----------+ }  60
3176:	Flight 1 |  1:15pm |   3:45pm |
3177:	         +---------+----------+ }  15
3178:	Flight 2 |  4:00pm |   6:45pm |
3179:	         +---------+----------+ }  210
3180:	Flight 3 | 10:15pm |  11:00pm |
3181:	         +---------+----------+
3182:	The call vacation.getShortestLayover() should 
3183:	return 15. Complete method getShortestLayover() 
3184:	below.
3185:	public int getShortestLayover()
3186:	// An answer could be...
3187:	public int getShortestLayover() {
3188:	    if (flights.isEmpty()) return -1;
3189:	    int shortestLayover = Integer.MAX_VALUE;
3190:	    int i = 0;
3191:	    while (i < flights.size()) {
3192:	        Flight currentFlight = flights.get(i);
3193:	        i++;
3194:	        Flight nextFlight    = flights.get(i);
3195:	        Time arrival         = currentFlight.getArrivalTime();
3196:	        Time departure       = nextFlight.getDepartureTime();
3197:	        int layover = Math.abs(arrival.minutesUntil(departure));
3198:	        if (layover < shortestLayover) {
3199:	            shortestLayover = layover;
3200:	        }
3201:	        i++;
3202:	    }
3203:	    return shortestLayover;
3204:	}
3205:	// Section 1...
3206:	For the next three Free response questions, refer 
3207:	to the description below...
3208:	Consider the hierarchy of classes shown in the 
3209:	following diagram
3210:	         +----------+ 
3211:	         |    Pet   |
3212:	         +----------+
3213:	            /    \
3214:	 +----------+    +----------+
3215:	 |    Cat   |    |    Dog   |
3216:	 +----------+    +----------+
3217:	                       \
3218:	                       +----------+
3219:	                       | Loud Dog |
3220:	                       +----------+
3221:	Note that a Cat 'is-a' Pet, a Dog 'is-a' Pet, and 
3222:	a LoudDog 'is-a' Dog. The class Pet is specified 
3223:	as an abstract class as shown in the following 
3224:	declaration. Each Pet has a name that is 
3225:	specified when it is constructed.
3226:	public abstract class Pet {
3227:	    private String name;
3228:	    public Pet(String petName) {
3229:	        name = petName;
3230:	    }
3231:	    public String getName() {
3232:	        return name;
3233:	    }
3234:	    public abstract String speak();
3235:	}
3236:	The subclass Dog has the partial class 
3237:	declaration shown below.
3238:	public class Dog extends Pet {
3239:	    public Dog(String petName) {
3240:	        /* implementation not shown */
3241:	    }
3242:	    public String speak() {
3243:	        /* implementation not shown */
3244:	    }
3245:	}
3246:	// Question 3...
3247:	Given the class hierarchy shown above, write a 
3248:	complete class declaration for the class Cat, 
3249:	including implementations of its constructor 
3250:	and method(s). The Cat method speak returns 
3251:	'meow' when it is invoked.
3252:	// An answer could be...
3253:	public class Cat extends Pet {
3254:	    public Cat(String petName) {
3255:	        super(petName);
3256:	    }
3257:	    public String speak() {
3258:	        return "meow";
3259:	    }
3260:	}
3261:	// Question 4...
3262:	Assume that class Dog has been declared as shown 
3263:	at the beginning of the question. If the String 
3264:	dog-sound is returned by the Dog method speak, 
3265:	then the LoudDog method method speak returns a 
3266:	String containing dog-sound repeated two times. 
3267:	Given the class hierarchy shown previously, 
3268:	write a complete class declaration for the class 
3269:	LoudDog including implementations of its 
3270:	constructor and method(s).
3271:	// An answer could be...
3272:	public class LoudDog extends Dog {
3273:	    public LoudDog(String petName) {
3274:	        super(petName);
3275:	    }
3276:	    public String speak() {
3277:	        return super.speak() + super.speak();
3278:	    }
3279:	}
3280:	// Question 5...
3281:	Consider the following partial declaration of 
3282:	class Kennel
3283:	public class Kennel {
3284:	    private ArrayList<Pet> petList;
3285:	     /**
3286:	      * For every Pet in the kennel, prints the name 
3287:	      * followed by the result of a call to its speak 
3288:	      * method, one line per Pet
3289:	      */
3290:	     public void allSpeak() {
3291:	        /* to be implemented */
3292:	     }
3293:	     // There may be instance variables, constructors, 
3294:	     // and methods that are not shown
3295:	}
3296:	Write the Kennel method allSpeak For each Pet in 
3297:	the kennel, allSpeak prints a line with the name 
3298:	of the Pet followed by the result of a call to 
3299:	its speak method. In writing allSpeak you may use 
3300:	any of the methods defined for any of the classes 
3301:	specified for this problem. Assume that these 
3302:	methods work as specified, regardless of what 
3303:	you wrote in previous questions. Complete method
3304:	allSpeak below
3305:	public void allSpeak()
3306:	// An answer could be...
3307:	public void allSpeak() {
3308:	    for (Pet pet : petList) {
3309:	        System.out.println(pet.getName() + pet.speak());
3310:	    }
3311:	}
3312:	AP Practice Test 4.........................................................................
3313:	// Question 1...
3314:	(A) 
3315:	(B) 
3316:	(C) 
3317:	(D) 
3318:	(E) 
3319:	// Answer 1...
3320:	// Question 2...
3321:	(A) 
3322:	(B) 
3323:	(C) 
3324:	(D) 
3325:	(E) 
3326:	// Answer 2...
3327:	// Question 3...
3328:	(A) 
3329:	(B) 
3330:	(C) 
3331:	(D) 
3332:	(E) 
3333:	// Answer 3...
3334:	// Question 4...
3335:	(A) 
3336:	(B) 
3337:	(C) 
3338:	(D) 
3339:	(E) 
3340:	// Answer 4...
3341:	// Question 5...
3342:	(A) 
3343:	(B) 
3344:	(C) 
3345:	(D) 
3346:	(E) 
3347:	// Answer 5...
3348:	// Question 6...
3349:	(A) 
3350:	(B) 
3351:	(C) 
3352:	(D) 
3353:	(E) 
3354:	// Answer 6...
3355:	// Question 7...
3356:	(A) 
3357:	(B) 
3358:	(C) 
3359:	(D) 
3360:	(E) 
3361:	// Answer 7...
3362:	// Question 8...
3363:	(A) 
3364:	(B) 
3365:	(C) 
3366:	(D) 
3367:	(E) 
3368:	// Answer 8...
3369:	// Question 9...
3370:	(A) 
3371:	(B) 
3372:	(C) 
3373:	(D) 
3374:	(E) 
3375:	// Answer 9...
3376:	// Question 10...
3377:	(A) 
3378:	(B) 
3379:	(C) 
3380:	(D) 
3381:	(E) 
3382:	// Answer 10...
3383:	Computer Science 42SAP Post Secondary Content:.............................................
3384:	AP Student Driven 'fun' Days Learning:.....................................................
3385:	More post secondary content:...............................................................
3386:	Permanent Storage Post Secondary Content:..................................................
3387:	// Learn about 'error traps'
3388:	Divide by zero -> java.lang.ArithmeticException: / by zero
3389:	// Create sample data to use
3390:	// Save ONE piece of data to that permanent file
3391:	// Now involve the user to get a file name
3392:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
3393:	File already exists!
3394:	// Open file with one line (no user involvment)
3395:	line read was Defenestration
3396:	// Open file with multiple lines (user picks file)
3397:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
3398:	This line read was �� sr utility.collections.LinkedList�̉-�� I 	NOT_FOUNDI lengthI longestWordL headt Lutility/collections/Node;L tailq ~ xp����   d   +sr utility.collections.Node5�����2 ... (line shortened) ...
3399:	This line read was opponentScoreL opponentNamet Ljava/lang/String;xp           t  sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~  ... (line shortened) ...
3400:	This line read was q ~ pq ~ �
3401:	// Class to save/open one line (no user)
3402:	Before: Defenestration
3403:	After : Defenestration
3404:	// Class to save/open multiple lines (with user)
3405:	Before: [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
3406:	After:  [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
3407:	// Now save/open on a complex data type
3408:	Before: Athlete: Husky: HighSchool: Student: Person
3409:	After:  Athlete: Husky: HighSchool: Student: Person
3410:	Before: Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
3411:	After:  Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
3412:	Stacks and Queues Post Secondary Content:..................................................
3413:	// Create objects for testing...
3414:	// Create and Test a stack object...
3415:	// Test toString, size, isEmpty, and push methods...
3416:	Empty = true	Size = 0	Empty Stack
3417:	// Loop through adding random values
3418:	Empty = false	Size = 1	Stack top -> [Rossi] <- bottom
3419:	Empty = false	Size = 2	Stack top -> [ditty,Rossi] <- bottom
3420:	Empty = false	Size = 3	Stack top -> [Nexis,ditty,Rossi] <- bottom
3421:	Empty = false	Size = 4	Stack top -> [Heall,Nexis,ditty,Rossi] <- bottom
3422:	Empty = false	Size = 5	Stack top -> [Felix,Heall,Nexis,ditty,Rossi] <- bottom
3423:	Empty = false	Size = 6	Stack top -> [sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3424:	Empty = false	Size = 7	Stack top -> [addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3425:	Empty = false	Size = 8	Stack top -> [Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3426:	Empty = false	Size = 9	Stack top -> [condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3427:	Empty = false	Size = 10	Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3428:	// Test clone method...
3429:	Clone stack: Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3430:	// Test equals method...
3431:	Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
==
Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3432:	// Now change the copy
3433:	// Now check again
3434:	Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
!=
Stack top -> [Gordy] <- bottom
3435:	// Re-clone the stack, and output
3436:	Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3437:	// Text the pop method...
3438:	Clone stack:	Empty = false	Size = 10	Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3439:	// Loop through removing values
3440:	Popped -> chasm	Empty = false	Size = 9	Stack top -> [condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3441:	Popped -> condo	Empty = false	Size = 8	Stack top -> [Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3442:	Popped -> Dasie	Empty = false	Size = 7	Stack top -> [addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3443:	Popped -> addle	Empty = false	Size = 6	Stack top -> [sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3444:	Popped -> sered	Empty = false	Size = 5	Stack top -> [Felix,Heall,Nexis,ditty,Rossi] <- bottom
3445:	Popped -> Felix	Empty = false	Size = 4	Stack top -> [Heall,Nexis,ditty,Rossi] <- bottom
3446:	Popped -> Heall	Empty = false	Size = 3	Stack top -> [Nexis,ditty,Rossi] <- bottom
3447:	Popped -> Nexis	Empty = false	Size = 2	Stack top -> [ditty,Rossi] <- bottom
3448:	Popped -> ditty	Empty = false	Size = 1	Stack top -> [Rossi] <- bottom
3449:	Popped -> Rossi	Empty = true	Size = 0	Empty Stack
3450:	Popped -> null	Empty = true	Size = 0	Empty Stack
3451:	// Test peek (top is wrapper no testing needed)...
3452:	Clone Top = null
3453:	Stack Top = chasm
3454:	// Test to array and to linked list...
3455:	Linked List 	[chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi]
3456:	Array   	[chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi]
3457:	// Test our constructors...
3458:	Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3459:	Stack top -> [chasm,condo,Dasie,addle,sered,Felix,Heall,Nexis,ditty,Rossi] <- bottom
3460:	// Test the Queue object...
3461:	// Test toString,size,isEmpty, and enqueue methods...
3462:	Empty = true	Size = 0	Empty Queue
3463:	// Loop through adding random values
3464:	Empty = false	Size = 1	Queue back -> [bungs] <- front
3465:	Empty = false	Size = 2	Queue back -> [Terza,bungs] <- front
3466:	Empty = false	Size = 3	Queue back -> [saggy,Terza,bungs] <- front
3467:	Empty = false	Size = 4	Queue back -> [flier,saggy,Terza,bungs] <- front
3468:	Empty = false	Size = 5	Queue back -> [coped,flier,saggy,Terza,bungs] <- front
3469:	Empty = false	Size = 6	Queue back -> [Mizar,coped,flier,saggy,Terza,bungs] <- front
3470:	Empty = false	Size = 7	Queue back -> [wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3471:	Empty = false	Size = 8	Queue back -> [Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3472:	Empty = false	Size = 9	Queue back -> [toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3473:	Empty = false	Size = 10	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3474:	// Test clone method...
3475:	Clone Queue 			Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3476:	// Test equals method...
3477:	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
==
Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3478:	// Now change the duplicate
3479:	// Now check again
3480:	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
==
Queue back -> [Geoff] <- front
3481:	// Re-clone the queue, and output
3482:	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3483:	// Test the dequeue method...
3484:	Clone queue:	Empty = false	Size = 10	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3485:	// Loop through removing values
3486:	Dequeued -> bungs	Empty = false	Size = 9	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza] <- front
3487:	Dequeued -> Terza	Empty = false	Size = 8	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy] <- front
3488:	Dequeued -> saggy	Empty = false	Size = 7	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier] <- front
3489:	Dequeued -> flier	Empty = false	Size = 6	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped] <- front
3490:	Dequeued -> coped	Empty = false	Size = 5	Queue back -> [lucid,toles,Marni,wacko,Mizar] <- front
3491:	Dequeued -> Mizar	Empty = false	Size = 4	Queue back -> [lucid,toles,Marni,wacko] <- front
3492:	Dequeued -> wacko	Empty = false	Size = 3	Queue back -> [lucid,toles,Marni] <- front
3493:	Dequeued -> Marni	Empty = false	Size = 2	Queue back -> [lucid,toles] <- front
3494:	Dequeued -> toles	Empty = false	Size = 1	Queue back -> [lucid] <- front
3495:	Dequeued -> lucid	Empty = true	Size = 0	Empty Queue
3496:	Dequeued -> null	Empty = true	Size = 0	Empty Queue
3497:	// Test front and back...
3498:	Clone Front = null
3499:	Queue Front = bungs
3500:	Clone Back  = null
3501:	Queue Back  = lucid
3502:	// Test to array and to linked list...
3503:	Linked List 	[lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs]
3504:	Array   	[lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs]
3505:	// Test our constructors...
3506:	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3507:	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3508:	// Constructors from stack to queue (and back)...
3509:	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front	 into 	Stack top -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- bottom
3510:	Stack top -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- bottom	 into 	Queue back -> [lucid,toles,Marni,wacko,Mizar,coped,flier,saggy,Terza,bungs] <- front
3511:	Searching and Sorting Post Secondary Content:..............................................
3512:	// For the I.B. Exam, you only need to know:
3513:	// Search: linear search and binary search
3514:	// Sort: bubble sort and the selection sort
3515:	// Create some constants (edges) for the data
3516:	// Create some random data to search through and sort
3517:	// Including edge cases to test
3518:	// Create data to store the results...
3519:	// The simpliest of searches
3520:	Array [92,100,75,87,40,16,44,90,40,23,77,26,78,81,83,75,69,57,66,86,71,33,95,25,76,25,79,3,27,60,70,56,49,32,98,14,55,63,55,54,82,86,9,90,95,94,68,25,3,85,26,81,58,40,71,38,17,20,44,94,13,22,68,100,10 ... (line shortened) ...
3521:	// Now the linear search on all test data
3522:	Array [92,100,75,87,40,16,44,90,40,23,77,26,78,81,83,75,69,57,66,86,71,33,95,25,76,25,79,3,27,60,70,56,49,32,98,14,55,63,55,54,82,86,9,90,95,94,68,25,3,85,26,81,58,40,71,38,17,20,44,94,13,22,68,100,10 ... (line shortened) ...
3523:	Array [92,100,75,87,40,16,44,90,40,23,77,26,78,81,83,75,69,57,66,86,71,33,95,25,76,25,79,3,27,60,70,56,49,32,98,14,55,63,55,54,82,86,9,90,95,94,68,25,3,85,26,81,58,40,71,38,17,20,44,94,13,22,68,100,10 ... (line shortened) ...
3524:	Array [92,100,75,87,40,16,44,90,40,23,77,26,78,81,83,75,69,57,66,86,71,33,95,25,76,25,79,3,27,60,70,56,49,32,98,14,55,63,55,54,82,86,9,90,95,94,68,25,3,85,26,81,58,40,71,38,17,20,44,94,13,22,68,100,10 ... (line shortened) ...
3525:	Array [92,100,75,87,40,16,44,90,40,23,77,26,78,81,83,75,69,57,66,86,71,33,95,25,76,25,79,3,27,60,70,56,49,32,98,14,55,63,55,54,82,86,9,90,95,94,68,25,3,85,26,81,58,40,71,38,17,20,44,94,13,22,68,100,10 ... (line shortened) ...
3526:	Array [92,100,75,87,40,16,44,90,40,23,77,26,78,81,83,75,69,57,66,86,71,33,95,25,76,25,79,3,27,60,70,56,49,32,98,14,55,63,55,54,82,86,9,90,95,94,68,25,3,85,26,81,58,40,71,38,17,20,44,94,13,22,68,100,10 ... (line shortened) ...
3527:	// Simple sort...
3528:	Sorted Array: 	[3,3,9,10,12,12,12,13,14,16,16,17,17,20,22,23,25,25,25,26,26,26,27,27,28,30,31,32,32,32,33,35,36,36,38,38,39,39,40,40,40,44,44,45,47,49,50,53,54,55,55,56,57,58,59,60,63,66,68,68,68,69,7 ... (line shortened) ...
3529:	// We will re-scramble array for further testing
3530:	Sorted Array: 	[12,58,17,29,49,25,92,74,100,76,47,98,46,97,9,7,7,90,78,67,68,92,56,53,50,2,7,65,52,91,10,73,51,93,85,96,80,62,44,81,54,60,48,12,62,41,78,100,87,22,54,48,93,74,85,28,36,45,21,55,80,79,9 ... (line shortened) ...
3531:	// Now bubble sort (from bubbles rising from water)
3532:	Original Array 	[12,58,17,29,49,25,92,74,100,76,47,98,46,97,9,7,7,90,78,67,68,92,56,53,50,2,7,65,52,91,10,73,51,93,85,96,80,62,44,81,54,60,48,12,62,41,78,100,87,22,54,48,93,74,85,28,36,45,21,55,80,79, ... (line shortened) ...
3533:	// Now selection sort (from selecting the smallest)
3534:	Original Array 	[12,58,17,29,49,25,92,74,100,76,47,98,46,97,9,7,7,90,78,67,68,92,56,53,50,2,7,65,52,91,10,73,51,93,85,96,80,62,44,81,54,60,48,12,62,41,78,100,87,22,54,48,93,74,85,28,36,45,21,55,80,79, ... (line shortened) ...
3535:	// Now binary search (named after two or dividing)
3536:	// NOTE: binary search can only happen on sorted list
3537:	// Redo some of the test data...
3538:	Array [2,4,6,7,7,7,9,10,12,12,14,15,17,21,21,22,25,26,26,27,27,28,28,29,30,30,35,35,36,39,40,41,41,42,44,45,46,47,48,48,48,49,49,50,51,52,53,54,54,54,55,56,58,60,60,61,62,62,64,65,66,66,67,68,69,70,71 ... (line shortened) ...
3539:	Array [2,4,6,7,7,7,9,10,12,12,14,15,17,21,21,22,25,26,26,27,27,28,28,29,30,30,35,35,36,39,40,41,41,42,44,45,46,47,48,48,48,49,49,50,51,52,53,54,54,54,55,56,58,60,60,61,62,62,64,65,66,66,67,68,69,70,71 ... (line shortened) ...
3540:	Array [2,4,6,7,7,7,9,10,12,12,14,15,17,21,21,22,25,26,26,27,27,28,28,29,30,30,35,35,36,39,40,41,41,42,44,45,46,47,48,48,48,49,49,50,51,52,53,54,54,54,55,56,58,60,60,61,62,62,64,65,66,66,67,68,69,70,71 ... (line shortened) ...
3541:	Array [2,4,6,7,7,7,9,10,12,12,14,15,17,21,21,22,25,26,26,27,27,28,28,29,30,30,35,35,36,39,40,41,41,42,44,45,46,47,48,48,48,49,49,50,51,52,53,54,54,54,55,56,58,60,60,61,62,62,64,65,66,66,67,68,69,70,71 ... (line shortened) ...
3542:	Array [2,4,6,7,7,7,9,10,12,12,14,15,17,21,21,22,25,26,26,27,27,28,28,29,30,30,35,35,36,39,40,41,41,42,44,45,46,47,48,48,48,49,49,50,51,52,53,54,54,54,55,56,58,60,60,61,62,62,64,65,66,66,67,68,69,70,71 ... (line shortened) ...
3543:	// Use class for searching and sorting
3544:	// Create random linked list data
3545:	// Create random array data
3546:	// Place all test cases into another linked list
3547:	// Execute the linear search on all list test data...
3548:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3549:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3550:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3551:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3552:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3553:	// Execute the linear search on all array test data...
3554:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3555:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3556:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3557:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3558:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3559:	// Execute all the sorts on all test data...
3560:	// Bubble sort LinkedList data...
3561:	Before: 	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,am ... (line shortened) ...
3562:	// Bubble sort array data...
3563:	Before: 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff, ... (line shortened) ...
3564:	// Selection sort LinkedList data...
3565:	Before: 	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,am ... (line shortened) ...
3566:	// Selection sort array data...
3567:	Before: 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff, ... (line shortened) ...
3568:	// Shell sort LinkedList data...
3569:	Before: 	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,am ... (line shortened) ...
3570:	// Shell sort array data...
3571:	Before: 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff, ... (line shortened) ...
3572:	// Insertion sort LinkedList data...
3573:	Before: 	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,am ... (line shortened) ...
3574:	// Insertion sort array data...
3575:	Before: 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff, ... (line shortened) ...
3576:	// Quick sort LinkedList data...
3577:	Before: 	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,am ... (line shortened) ...
3578:	// Quick sort array data...
3579:	Before: 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff, ... (line shortened) ...
3580:	// Merge sort LinkedList data...
3581:	Before: 	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,am ... (line shortened) ...
3582:	// Merge sort array data...
3583:	Before: 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff, ... (line shortened) ...
3584:	// Heap sort LinkedList data...
3585:	Before: 	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,am ... (line shortened) ...
3586:	// Heap sort array data...
3587:	Before: 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff, ... (line shortened) ...
3588:	// Execute the binary search on all List test data...
3589:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3590:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3591:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3592:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3593:	Linked List 	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,m ... (line shortened) ...
3594:	// Execute the binary search on all Array test data...
3595:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3596:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3597:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3598:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3599:	[bong,peed,hued,hark,Aron,such,show,icon,ryes,full,asst,comm,hems,Rees,yule,crew,Klan,Adan,Pace,site,haft,prov,comm,Piaf,hike,zebu,read,ante,cool,bloc,days,coed,open,terr,ants,amyl,roar,muff,Lani,jeez ... (line shortened) ...
3600:	Binary Trees Post Secondary Content:.......................................................
3601:	// Constants/variables for creating random values...
3602:	// Creating some TreeNode objects...
3603:	// Linking the TreeNodes...
3604:	// Testing TreeNode equals...
3605:	// Testing TreeNode toString...
3606:	45
3607:	93
3608:	57
3609:	// Creating a Tree object...
3610:	// Test the insert method...
3611:	// Insert one more...
3612:	// Test the search of the tree...
3613:	Should be found     = true
3614:	Should NOT be found = false
3615:	// Test toString() and pre, post, in order traversals
3616:	Binary Tree:
Order: Linked List 	[98,41,58,99,89,90]
Pre:   Linked List 	[98,41,58,89,90,99]
Post:  Linked List 	[90,89,58,41,99,98]
In:    Linked List 	[41,58,89,90,98,99]
3617:	// Building second tree (test clone) and test equals
3618:	1st tree -> Linked List 	[41,58,89,90,98,99]
3619:	2nd tree -> Linked List 	[22,48,75,78,81,97]
3620:	1st!=2nd
3621:	// Building a third tree (test clone) and test equals
3622:	1st tree -> Linked List 	[41,58,89,90,98,99]
3623:	3rd tree -> Linked List 	[41,58,89,90,98,99]
3624:	1st==3rd
3625:	// Build all our data structures from each other...
3626:	// Create variable objects...
3627:	// Create array from variables...
3628:	// Create LinkedList from array...
3629:	// Create Stack from LinkedList...
3630:	// Create Queue from Stack...
3631:	// Create Tree from Queue...
3632:	// Output variables,array,list,stack,queue,tree...
3633:	owing
3634:	tapes
3635:	cools
3636:	johns
3637:	staid
3638:	[owing,tapes,cools,johns,staid]
3639:	Linked List 	[owing,tapes,cools,johns,staid]
3640:	Stack top -> [owing,tapes,cools,johns,staid] <- bottom
3641:	Queue back -> [owing,tapes,cools,johns,staid] <- front
3642:	Binary Tree:
Order: Linked List 	[owing,tapes,cools,johns,staid]
Pre:   Linked List 	[owing,cools,johns,tapes,staid]
Post:  Linked List 	[johns,cools,staid,tapes,owing]
In:    Linked List 	[cools,john ... (line shortened) ...
3643:	// Now re-building queue from tree
3644:	// Now re-building stack from queue
3645:	// Now re-building LinkedList from stack...
3646:	// Now re-building array from LinkedList...
3647:	// Output array,list,stack,queue,tree again...
3648:	[cools,johns,owing,staid,tapes]
3649:	Linked List 	[cools,johns,owing,staid,tapes]
3650:	Stack top -> [cools,johns,owing,staid,tapes] <- bottom
3651:	Queue back -> [cools,johns,owing,staid,tapes] <- front
3652:	Binary Tree:
Order: Linked List 	[owing,tapes,cools,johns,staid]
Pre:   Linked List 	[owing,cools,johns,tapes,staid]
Post:  Linked List 	[johns,cools,staid,tapes,owing]
In:    Linked List 	[cools,john ... (line shortened) ...
3653:	AP Student Driven 'fun' Days Learning:.....................................................
