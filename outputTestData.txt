1:	Mr. Wachs' Computer Science Classes........................................................
2:	Computer Science 42SAP Prerequisite Content:...............................................
3:	Computer Science 20S Course:...............................................................
4:	~~~ SIMULATED {GUI Frame} DIALOG: unit2Introduction ~~~ 
5:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables1 ~~~ 
6:	~~~ SIMULATED {GUI Frame} DIALOG: unit3Variables2 ~~~ 
7:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals1 ~~~ 
8:	~~~ SIMULATED {GUI Frame} DIALOG: unit4Conditionals2 ~~~ 
9:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping1 ~~~ 
10:	~~~ SIMULATED {GUI Frame} DIALOG: unit5Looping2 ~~~ 
11:	Computer Science 30S Course:...............................................................
12:	Hello World
13:	I'm in the world
14:	Good-bye world!
15:	Make a quote " 
16:	Make a slash \ 
17:	Make a 	 tab 
18:	Make a new line 
 break 
19:	~~~ SIMULATED {Message} DIALOG: Hi ~~~ 
20:	~~~ SIMULATED {Message} DIALOG: Information icon is i ~~~ { title: Information title },
21:	~~~ SIMULATED {Message} DIALOG: Question icon is i ~~~ { title: Question title },
22:	~~~ SIMULATED {Message} DIALOG: Warning icon is i ~~~ { title: Warning title },
23:	~~~ SIMULATED {Message} DIALOG: Plain icon is i ~~~ { title: Plain title },
24:	~~~ SIMULATED {Input} DIALOG: Enter Something ~~~ 
25:	~~~ SIMULATED {Input} DIALOG: Information icon is i ~~~ 
26:	~~~ SIMULATED {Input} DIALOG: Question icon is i ~~~ 
27:	~~~ SIMULATED {Input} DIALOG: Warning icon is i ~~~ 
28:	~~~ SIMULATED {Input} DIALOG: Plain icon is i ~~~ 
29:	~~~ SIMULATED {Confirm} DIALOG: Confirm ~~~ 
30:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 2 ~~~ { title: Information },{ messageType: 1 },
31:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 3 ~~~ { title: Question },{ optionType: -1 },{ messageType: 3 },
32:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 4 ~~~ { title: Warning },{ optionType: 2 },{ messageType: 2 },
33:	~~~ SIMULATED {Confirm} DIALOG: Confirm Example 5 ~~~ { title: Plain },{ optionType: 1 },{ messageType: -1 },
34:	a = false
35:	b = 1
36:	c = 1.2
37:	d = A
38:	e = apple
39:	x = 10
40:	x = 20
41:	y = 30
42:	y = 30
43:	x = 28
44:	y = 5
45:	z = 3
46:	3.141592658389, 99, Y, true, Wachs
47:	f = 25
48:	g = 25.0
49:	g = 25.999999999999
50:	h = 25
51:	k = 2.99999999
52:	l = 2
53:	m = 2.0
54:	n = A
55:	o = 65
56:	p = F
57:	~~~ SIMULATED {Input} DIALOG: Enter ~~~ 
58:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
59:	~~~ SIMULATED {Input} DIALOG: Enter int ~~~ 
60:	~~~ SIMULATED {Message} DIALOG: -1 ~~~ 
61:	~~~ SIMULATED {Input} DIALOG: Enter double ~~~ 
62:	~~~ SIMULATED {Message} DIALOG: -1.0 ~~~ 
63:	~~~ SIMULATED {Input} DIALOG: Enter char ~~~ 
64:	~~~ SIMULATED {Message} DIALOG: - ~~~ 
65:	Word hippopotomonsprosesquippedaiophobia is length 35
66:	Word hippopotomonsprosesquippedaiophobia in upper case is HIPPOPOTOMONSPROSESQUIPPEDAIOPHOBIA
67:	answer1 = 3.141592653589793
68:	answer2 = 0.8775825618903728
69:	answer3 = 1.0
70:	answer4 = 125.0
71:	answer5 = 3.0
72:	answer6 = -0.6931471805599453
73:	seed = 0.9535769626699279
74:	low    = 1.0
75:	high   = 10.0
76:	number = 10.53576962669928
77:	value = 10
78:	card is 10
79:	equal
80:	The example is less than
81:	!=
82:	W1 kind of == W2
83:	Keep trying
84:	counter = 0
85:	counter = 1
86:	counter = 2
87:	counter = 3
88:	counter = 4
89:	counter = 5
90:	counter = 6
91:	counter = 7
92:	counter = 8
93:	counter = 9
94:	~~~ SIMULATED {Input} DIALOG: Create a password ~~~ 
95:	~~~ SIMULATED {Message} DIALOG: Ok, continue... ~~~ 
96:	~~~ SIMULATED {Input} DIALOG: Enter password ~~~ 
97:	~~~ SIMULATED {Message} DIALOG: You got it ~~~ 
98:	i = 0
99:	i = 1
100:	i = 2
101:	i = 3
102:	i = 4
103:	i = 5
104:	i = 6
105:	i = 7
106:	i = 8
107:	i = 9
108:	counting = 100
109:	counting = 90
110:	counting = 80
111:	counting = 70
112:	counting = 60
113:	counting = 50
114:	counting = 40
115:	counting = 30
116:	counting = 20
117:	counting = 10
118:	counting = 0
119:	i = 99.789
120:	i = 19.007428571428573
121:	~~~ SIMULATED {Message} DIALOG: You are an intern at radio station, C-RAP, The 
disk jockeys announce the current temperature 
in both Fahrenheit and Celsius every half-hour.
They would like an easy w ... (line shortened) ...
122:	~~~ SIMULATED {Input} DIALOG: Enter temperature in Celcius ~~~ 
123:	~~~ SIMULATED {Message} DIALOG: Your temperature in Fahrenheit is 30.2 ~~~ 
124:	~~~ SIMULATED {Message} DIALOG: Thank you! ~~~ 
125:	Starting to Learn methods...
126:	*
127:	*
128:	Phenakistoscope
129:	Volleywood
130:	pancakes
131:	Spider-man
132:	Batman
133:	Dalmations
134:	Dalmations
135:	Dalmations
136:	Dalmations
137:	Dalmations
138:	Dalmations
139:	Dalmations
140:	Dalmations
141:	Dalmations
142:	Dalmations
143:	Dalmations
144:	Dalmations
145:	Dalmations
146:	Dalmations
147:	Dalmations
148:	Dalmations
149:	Dalmations
150:	Dalmations
151:	Dalmations
152:	Dalmations
153:	Dalmations
154:	Dalmations
155:	Dalmations
156:	Dalmations
157:	Dalmations
158:	Dalmations
159:	Dalmations
160:	Dalmations
161:	Dalmations
162:	Dalmations
163:	Dalmations
164:	Dalmations
165:	Dalmations
166:	Dalmations
167:	Dalmations
168:	Dalmations
169:	Dalmations
170:	Dalmations
171:	Dalmations
172:	Dalmations
173:	Dalmations
174:	Dalmations
175:	Dalmations
176:	Dalmations
177:	Dalmations
178:	Dalmations
179:	Dalmations
180:	Dalmations
181:	Dalmations
182:	Dalmations
183:	Dalmations
184:	Dalmations
185:	Dalmations
186:	Dalmations
187:	Dalmations
188:	Dalmations
189:	Dalmations
190:	Dalmations
191:	Dalmations
192:	Dalmations
193:	Dalmations
194:	Dalmations
195:	Dalmations
196:	Dalmations
197:	Dalmations
198:	Dalmations
199:	Dalmations
200:	Dalmations
201:	Dalmations
202:	Dalmations
203:	Dalmations
204:	Dalmations
205:	Dalmations
206:	Dalmations
207:	Dalmations
208:	Dalmations
209:	Dalmations
210:	Dalmations
211:	Dalmations
212:	Dalmations
213:	Dalmations
214:	Dalmations
215:	Dalmations
216:	Dalmations
217:	Dalmations
218:	Dalmations
219:	Dalmations
220:	Dalmations
221:	Dalmations
222:	Dalmations
223:	Dalmations
224:	Dalmations
225:	Dalmations
226:	Dalmations
227:	Dalmations
228:	Dalmations
229:	Dalmations
230:	Dalmations
231:	Dalmations
232:	Dalmations
233:	Dalmations
234:	Problems
235:	Problems
236:	Problems
237:	Problems
238:	Problems
239:	Problems
240:	Problems
241:	Problems
242:	Problems
243:	Problems
244:	Problems
245:	Problems
246:	Problems
247:	Problems
248:	Problems
249:	Problems
250:	Problems
251:	Problems
252:	Problems
253:	Problems
254:	Problems
255:	Problems
256:	Problems
257:	Problems
258:	Problems
259:	Problems
260:	Problems
261:	Problems
262:	Problems
263:	Problems
264:	Problems
265:	Problems
266:	Problems
267:	Problems
268:	Problems
269:	Problems
270:	Problems
271:	Problems
272:	Problems
273:	Problems
274:	Problems
275:	Problems
276:	Problems
277:	Problems
278:	Problems
279:	Problems
280:	Problems
281:	Problems
282:	Problems
283:	Problems
284:	Problems
285:	Problems
286:	Problems
287:	Problems
288:	Problems
289:	Problems
290:	Problems
291:	Problems
292:	Problems
293:	Problems
294:	Problems
295:	Problems
296:	Problems
297:	Problems
298:	Problems
299:	Problems
300:	Problems
301:	Problems
302:	Problems
303:	Problems
304:	Problems
305:	Problems
306:	Problems
307:	Problems
308:	Problems
309:	Problems
310:	Problems
311:	Problems
312:	Problems
313:	Problems
314:	Problems
315:	Problems
316:	Problems
317:	Problems
318:	Problems
319:	Problems
320:	Problems
321:	Problems
322:	Problems
323:	Problems
324:	Problems
325:	Problems
326:	Problems
327:	Problems
328:	Problems
329:	Problems
330:	Problems
331:	Problems
332:	Problems
333:	Number is 10
334:	~~~ SIMULATED {Message} DIALOG: Hello ~~~ 
335:	~~~ SIMULATED {Message} DIALOG: Good-bye ~~~ { title: Learning Methods },
336:	Completed Learning Methods!
337:	Start learning arrays...
338:	333
339:	666
340:	666
341:	0
342:	0
343:	0
344:	0
345:	0
346:	0
347:	0
348:	0
349:	0
350:	0
351:	0
352:	0
353:	0
354:	0
355:	0
356:	0
357:	0
358:	0
359:	0
360:	0
361:	0
362:	0
363:	0
364:	0
365:	0
366:	0
367:	0
368:	0
369:	0
370:	0
371:	0
372:	0
373:	0
374:	0
375:	0
376:	0
377:	0
378:	0
379:	0
380:	0
381:	0
382:	0
383:	0
384:	0
385:	0
386:	0
387:	0
388:	0
389:	0
390:	0
391:	0
392:	0
393:	0
394:	0
395:	0
396:	0
397:	0
398:	0
399:	0
400:	0
401:	0
402:	0
403:	0
404:	0
405:	0
406:	0
407:	0
408:	0
409:	0
410:	0
411:	0
412:	0
413:	0
414:	0
415:	0
416:	0
417:	0
418:	0
419:	0
420:	0
421:	0
422:	0
423:	0
424:	0
425:	0
426:	0
427:	0
428:	0
429:	0
430:	0
431:	0
432:	0
433:	0
434:	0
435:	0
436:	0
437:	0
438:	0
439:	333
440:	0 = 666
441:	1 = 0
442:	2 = 0
443:	3 = 0
444:	4 = 0
445:	5 = 0
446:	6 = 0
447:	7 = 0
448:	8 = 0
449:	9 = 0
450:	10 = 0
451:	11 = 0
452:	12 = 0
453:	13 = 0
454:	14 = 0
455:	15 = 0
456:	16 = 0
457:	17 = 0
458:	18 = 0
459:	19 = 0
460:	20 = 0
461:	21 = 0
462:	22 = 0
463:	23 = 0
464:	24 = 0
465:	25 = 0
466:	26 = 0
467:	27 = 0
468:	28 = 0
469:	29 = 0
470:	30 = 0
471:	31 = 0
472:	32 = 0
473:	33 = 0
474:	34 = 0
475:	35 = 0
476:	36 = 0
477:	37 = 0
478:	38 = 0
479:	39 = 0
480:	40 = 0
481:	41 = 0
482:	42 = 0
483:	43 = 0
484:	44 = 0
485:	45 = 0
486:	46 = 0
487:	47 = 0
488:	48 = 0
489:	49 = 0
490:	50 = 0
491:	51 = 0
492:	52 = 0
493:	53 = 0
494:	54 = 0
495:	55 = 0
496:	56 = 0
497:	57 = 0
498:	58 = 0
499:	59 = 0
500:	60 = 0
501:	61 = 0
502:	62 = 0
503:	63 = 0
504:	64 = 0
505:	65 = 0
506:	66 = 0
507:	67 = 0
508:	68 = 0
509:	69 = 0
510:	70 = 0
511:	71 = 0
512:	72 = 0
513:	73 = 0
514:	74 = 0
515:	75 = 0
516:	76 = 0
517:	77 = 0
518:	78 = 0
519:	79 = 0
520:	80 = 0
521:	81 = 0
522:	82 = 0
523:	83 = 0
524:	84 = 0
525:	85 = 0
526:	86 = 0
527:	87 = 0
528:	88 = 0
529:	89 = 0
530:	90 = 0
531:	91 = 0
532:	92 = 0
533:	93 = 0
534:	94 = 0
535:	95 = 0
536:	96 = 0
537:	97 = 0
538:	98 = 0
539:	99 = 333
540:	~~~ SIMULATED {Message} DIALOG: [25,250,2,-25,0,] ~~~ 
541:	~~~ SIMULATED {Message} DIALOG: [666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ... (line shortened) ...
542:	~~~ SIMULATED {Message} DIALOG: [0,0,0,1,2,] ~~~ 
543:	~~~ SIMULATED {Message} DIALOG: [5,9,10,6,1,1,8,6,1,4,2,6,8,1,4,2,4,10,3,4,6,1,6,10,4,10,1,8,8,3,4,8,3,1,3,6,2,6,4,4,8,4,10,7,7,9,10,4,2,1,] ~~~ 
544:	Random character was x
545:	L / [ w _ A ` @ W b 4 C A " I = + S Q $ H m # % i p ] h T X 
n p Z a [ x e X # e C Z a c F 3 Z L J v & k x S d s I S 1 k 
< L Y f P s d V m ' L A 6 8 O l | Q > x < + 1 I S 0 ? R J M 
@ [ U 7 5 3 8 1 y ... (line shortened) ...
546:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
547:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
548:	X O X 
O X O 
X O X 

549:	~~~ SIMULATED {Message} DIALOG: javax.swing.JTextArea[,0,0,0x0,invalid,layout=javax.swing.plaf.basic.BasicTextUI$UpdateHandler,alignmentX=0.0,alignmentY=0.0,border=javax.swing.plaf.basic.BasicBorders$ ... (line shortened) ...
550:	Completed learning arrays!
551:	Start Learning classes...
552:	Complete Learning classes
553:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics1 ~~~ 
554:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics2 ~~~ 
555:	~~~ SIMULATED {GUI Frame} DIALOG: Graphics3 ~~~ 
556:	Computer Science 40S Course:...............................................................
557:	Recursion test started...
558:	Recursive factorials............................
559:	-1 factorial = 1
560:	0 factorial = 1
561:	1 factorial = 1
562:	2 factorial = 2
563:	3 factorial = 6
564:	4 factorial = 24
565:	5 factorial = 120
566:	6 factorial = 720
567:	7 factorial = 5040
568:	8 factorial = 40320
569:	9 factorial = 362880
570:	10 factorial = 3628800
571:	11 factorial = 39916800
572:	12 factorial = 479001600
573:	13 factorial = 6227020800
574:	14 factorial = 87178291200
575:	15 factorial = 1307674368000
576:	16 factorial = 20922789888000
577:	17 factorial = 355687428096000
578:	18 factorial = 6402373705728000
579:	19 factorial = 121645100408832000
580:	20 factorial = 2432902008176640000
581:	Recursive powers................................
582:	-5 to the exponent -5 = -3.2E-4
583:	-4 to the exponent -5 = -9.765625E-4
584:	-3 to the exponent -5 = -0.00411522633744856
585:	-2 to the exponent -5 = -0.03125
586:	-1 to the exponent -5 = -1.0
587:	0 to the exponent -5 = 4.9E-324
588:	1 to the exponent -5 = 1.0
589:	2 to the exponent -5 = 0.03125
590:	3 to the exponent -5 = 0.00411522633744856
591:	4 to the exponent -5 = 9.765625E-4
592:	5 to the exponent -5 = 3.2E-4
593:	6 to the exponent -5 = 1.286008230452675E-4
594:	7 to the exponent -5 = 5.9499018266198606E-5
595:	8 to the exponent -5 = 3.0517578125E-5
596:	9 to the exponent -5 = 1.6935087808430286E-5
597:	10 to the exponent -5 = 1.0E-5
598:	-5 to the exponent -4 = 0.0016
599:	-4 to the exponent -4 = 0.00390625
600:	-3 to the exponent -4 = 0.012345679012345678
601:	-2 to the exponent -4 = 0.0625
602:	-1 to the exponent -4 = 1.0
603:	0 to the exponent -4 = 4.9E-324
604:	1 to the exponent -4 = 1.0
605:	2 to the exponent -4 = 0.0625
606:	3 to the exponent -4 = 0.012345679012345678
607:	4 to the exponent -4 = 0.00390625
608:	5 to the exponent -4 = 0.0016
609:	6 to the exponent -4 = 7.716049382716049E-4
610:	7 to the exponent -4 = 4.1649312786339027E-4
611:	8 to the exponent -4 = 2.44140625E-4
612:	9 to the exponent -4 = 1.5241579027587258E-4
613:	10 to the exponent -4 = 1.0E-4
614:	-5 to the exponent -3 = -0.008
615:	-4 to the exponent -3 = -0.015625
616:	-3 to the exponent -3 = -0.037037037037037035
617:	-2 to the exponent -3 = -0.125
618:	-1 to the exponent -3 = -1.0
619:	0 to the exponent -3 = 4.9E-324
620:	1 to the exponent -3 = 1.0
621:	2 to the exponent -3 = 0.125
622:	3 to the exponent -3 = 0.037037037037037035
623:	4 to the exponent -3 = 0.015625
624:	5 to the exponent -3 = 0.008
625:	6 to the exponent -3 = 0.004629629629629629
626:	7 to the exponent -3 = 0.0029154518950437317
627:	8 to the exponent -3 = 0.001953125
628:	9 to the exponent -3 = 0.0013717421124828531
629:	10 to the exponent -3 = 0.001
630:	-5 to the exponent -2 = 0.04
631:	-4 to the exponent -2 = 0.0625
632:	-3 to the exponent -2 = 0.1111111111111111
633:	-2 to the exponent -2 = 0.25
634:	-1 to the exponent -2 = 1.0
635:	0 to the exponent -2 = 4.9E-324
636:	1 to the exponent -2 = 1.0
637:	2 to the exponent -2 = 0.25
638:	3 to the exponent -2 = 0.1111111111111111
639:	4 to the exponent -2 = 0.0625
640:	5 to the exponent -2 = 0.04
641:	6 to the exponent -2 = 0.027777777777777776
642:	7 to the exponent -2 = 0.02040816326530612
643:	8 to the exponent -2 = 0.015625
644:	9 to the exponent -2 = 0.012345679012345678
645:	10 to the exponent -2 = 0.01
646:	-5 to the exponent -1 = -0.2
647:	-4 to the exponent -1 = -0.25
648:	-3 to the exponent -1 = -0.3333333333333333
649:	-2 to the exponent -1 = -0.5
650:	-1 to the exponent -1 = -1.0
651:	0 to the exponent -1 = 4.9E-324
652:	1 to the exponent -1 = 1.0
653:	2 to the exponent -1 = 0.5
654:	3 to the exponent -1 = 0.3333333333333333
655:	4 to the exponent -1 = 0.25
656:	5 to the exponent -1 = 0.2
657:	6 to the exponent -1 = 0.16666666666666666
658:	7 to the exponent -1 = 0.14285714285714285
659:	8 to the exponent -1 = 0.125
660:	9 to the exponent -1 = 0.1111111111111111
661:	10 to the exponent -1 = 0.1
662:	-5 to the exponent 0 = 1.0
663:	-4 to the exponent 0 = 1.0
664:	-3 to the exponent 0 = 1.0
665:	-2 to the exponent 0 = 1.0
666:	-1 to the exponent 0 = 1.0
667:	0 to the exponent 0 = 1.0
668:	1 to the exponent 0 = 1.0
669:	2 to the exponent 0 = 1.0
670:	3 to the exponent 0 = 1.0
671:	4 to the exponent 0 = 1.0
672:	5 to the exponent 0 = 1.0
673:	6 to the exponent 0 = 1.0
674:	7 to the exponent 0 = 1.0
675:	8 to the exponent 0 = 1.0
676:	9 to the exponent 0 = 1.0
677:	10 to the exponent 0 = 1.0
678:	-5 to the exponent 1 = -5.0
679:	-4 to the exponent 1 = -4.0
680:	-3 to the exponent 1 = -3.0
681:	-2 to the exponent 1 = -2.0
682:	-1 to the exponent 1 = -1.0
683:	0 to the exponent 1 = 0.0
684:	1 to the exponent 1 = 1.0
685:	2 to the exponent 1 = 2.0
686:	3 to the exponent 1 = 3.0
687:	4 to the exponent 1 = 4.0
688:	5 to the exponent 1 = 5.0
689:	6 to the exponent 1 = 6.0
690:	7 to the exponent 1 = 7.0
691:	8 to the exponent 1 = 8.0
692:	9 to the exponent 1 = 9.0
693:	10 to the exponent 1 = 10.0
694:	-5 to the exponent 2 = 25.0
695:	-4 to the exponent 2 = 16.0
696:	-3 to the exponent 2 = 9.0
697:	-2 to the exponent 2 = 4.0
698:	-1 to the exponent 2 = 1.0
699:	0 to the exponent 2 = 0.0
700:	1 to the exponent 2 = 1.0
701:	2 to the exponent 2 = 4.0
702:	3 to the exponent 2 = 9.0
703:	4 to the exponent 2 = 16.0
704:	5 to the exponent 2 = 25.0
705:	6 to the exponent 2 = 36.0
706:	7 to the exponent 2 = 49.0
707:	8 to the exponent 2 = 64.0
708:	9 to the exponent 2 = 81.0
709:	10 to the exponent 2 = 100.0
710:	-5 to the exponent 3 = -125.0
711:	-4 to the exponent 3 = -64.0
712:	-3 to the exponent 3 = -27.0
713:	-2 to the exponent 3 = -8.0
714:	-1 to the exponent 3 = -1.0
715:	0 to the exponent 3 = 0.0
716:	1 to the exponent 3 = 1.0
717:	2 to the exponent 3 = 8.0
718:	3 to the exponent 3 = 27.0
719:	4 to the exponent 3 = 64.0
720:	5 to the exponent 3 = 125.0
721:	6 to the exponent 3 = 216.0
722:	7 to the exponent 3 = 343.0
723:	8 to the exponent 3 = 512.0
724:	9 to the exponent 3 = 729.0
725:	10 to the exponent 3 = 1000.0
726:	-5 to the exponent 4 = 625.0
727:	-4 to the exponent 4 = 256.0
728:	-3 to the exponent 4 = 81.0
729:	-2 to the exponent 4 = 16.0
730:	-1 to the exponent 4 = 1.0
731:	0 to the exponent 4 = 0.0
732:	1 to the exponent 4 = 1.0
733:	2 to the exponent 4 = 16.0
734:	3 to the exponent 4 = 81.0
735:	4 to the exponent 4 = 256.0
736:	5 to the exponent 4 = 625.0
737:	6 to the exponent 4 = 1296.0
738:	7 to the exponent 4 = 2401.0
739:	8 to the exponent 4 = 4096.0
740:	9 to the exponent 4 = 6561.0
741:	10 to the exponent 4 = 10000.0
742:	-5 to the exponent 5 = -3125.0
743:	-4 to the exponent 5 = -1024.0
744:	-3 to the exponent 5 = -243.0
745:	-2 to the exponent 5 = -32.0
746:	-1 to the exponent 5 = -1.0
747:	0 to the exponent 5 = 0.0
748:	1 to the exponent 5 = 1.0
749:	2 to the exponent 5 = 32.0
750:	3 to the exponent 5 = 243.0
751:	4 to the exponent 5 = 1024.0
752:	5 to the exponent 5 = 3125.0
753:	6 to the exponent 5 = 7776.0
754:	7 to the exponent 5 = 16807.0
755:	8 to the exponent 5 = 32768.0
756:	9 to the exponent 5 = 59049.0
757:	10 to the exponent 5 = 100000.0
758:	-5 to the exponent 6 = 15625.0
759:	-4 to the exponent 6 = 4096.0
760:	-3 to the exponent 6 = 729.0
761:	-2 to the exponent 6 = 64.0
762:	-1 to the exponent 6 = 1.0
763:	0 to the exponent 6 = 0.0
764:	1 to the exponent 6 = 1.0
765:	2 to the exponent 6 = 64.0
766:	3 to the exponent 6 = 729.0
767:	4 to the exponent 6 = 4096.0
768:	5 to the exponent 6 = 15625.0
769:	6 to the exponent 6 = 46656.0
770:	7 to the exponent 6 = 117649.0
771:	8 to the exponent 6 = 262144.0
772:	9 to the exponent 6 = 531441.0
773:	10 to the exponent 6 = 1000000.0
774:	-5 to the exponent 7 = -78125.0
775:	-4 to the exponent 7 = -16384.0
776:	-3 to the exponent 7 = -2187.0
777:	-2 to the exponent 7 = -128.0
778:	-1 to the exponent 7 = -1.0
779:	0 to the exponent 7 = 0.0
780:	1 to the exponent 7 = 1.0
781:	2 to the exponent 7 = 128.0
782:	3 to the exponent 7 = 2187.0
783:	4 to the exponent 7 = 16384.0
784:	5 to the exponent 7 = 78125.0
785:	6 to the exponent 7 = 279936.0
786:	7 to the exponent 7 = 823543.0
787:	8 to the exponent 7 = 2097152.0
788:	9 to the exponent 7 = 4782969.0
789:	10 to the exponent 7 = 1.0E7
790:	-5 to the exponent 8 = 390625.0
791:	-4 to the exponent 8 = 65536.0
792:	-3 to the exponent 8 = 6561.0
793:	-2 to the exponent 8 = 256.0
794:	-1 to the exponent 8 = 1.0
795:	0 to the exponent 8 = 0.0
796:	1 to the exponent 8 = 1.0
797:	2 to the exponent 8 = 256.0
798:	3 to the exponent 8 = 6561.0
799:	4 to the exponent 8 = 65536.0
800:	5 to the exponent 8 = 390625.0
801:	6 to the exponent 8 = 1679616.0
802:	7 to the exponent 8 = 5764801.0
803:	8 to the exponent 8 = 1.6777216E7
804:	9 to the exponent 8 = 4.3046721E7
805:	10 to the exponent 8 = 1.0E8
806:	-5 to the exponent 9 = -1953125.0
807:	-4 to the exponent 9 = -262144.0
808:	-3 to the exponent 9 = -19683.0
809:	-2 to the exponent 9 = -512.0
810:	-1 to the exponent 9 = -1.0
811:	0 to the exponent 9 = 0.0
812:	1 to the exponent 9 = 1.0
813:	2 to the exponent 9 = 512.0
814:	3 to the exponent 9 = 19683.0
815:	4 to the exponent 9 = 262144.0
816:	5 to the exponent 9 = 1953125.0
817:	6 to the exponent 9 = 1.0077696E7
818:	7 to the exponent 9 = 4.0353607E7
819:	8 to the exponent 9 = 1.34217728E8
820:	9 to the exponent 9 = 3.87420489E8
821:	10 to the exponent 9 = 1.0E9
822:	-5 to the exponent 10 = 9765625.0
823:	-4 to the exponent 10 = 1048576.0
824:	-3 to the exponent 10 = 59049.0
825:	-2 to the exponent 10 = 1024.0
826:	-1 to the exponent 10 = 1.0
827:	0 to the exponent 10 = 0.0
828:	1 to the exponent 10 = 1.0
829:	2 to the exponent 10 = 1024.0
830:	3 to the exponent 10 = 59049.0
831:	4 to the exponent 10 = 1048576.0
832:	5 to the exponent 10 = 9765625.0
833:	6 to the exponent 10 = 6.0466176E7
834:	7 to the exponent 10 = 2.82475249E8
835:	8 to the exponent 10 = 1.073741824E9
836:	9 to the exponent 10 = 3.486784401E9
837:	10 to the exponent 10 = 1.0E10
838:	Recursion complete!
839:	Advanced Classes Test started...
840:	unidentified is 0 identifies as unidentified
841:	Per Soney is 0 identifies as unidentified
842:	Per Soney is 1 identifies as unidentified
843:	Booooo!
844:	unidentified is 0 identifies as unidentified
845:	I am a student
846:		 Number: 	1
847:		 GPA:    	0.0
848:	Stu Denty is 0 identifies as unidentified
849:	I am a student
850:		 Number: 	1
851:		 GPA:    	0.0
852:	Stu Denty is 0 identifies as unidentified
853:	I am a student
854:		 Number: 	1
855:		 GPA:    	0.3
856:	Stu Denty is 0 identifies as unidentified
857:	I am a student
858:		 Number: 	1
859:		 GPA:    	0.0
860:	Stu Denty is 0 identifies as unidentified
861:	I am a student
862:		 Number: 	1
863:		 GPA:    	3.0002999999999993
864:	Booooo!
865:	I am a student
866:		 Number: 	1
867:		 GPA:    	3.0002999999999993
868:	Stewie Griffin is 2 identifies as cat
869:	I am a student
870:		 Number: 	1
871:		 GPA:    	0.0
872:	Mr. Teachery is 45 identifies as teacher
873:	Mr. Teachery is 45 identifies as teacher
874:	Mr. Teachery is 45 identifies as teacher
875:	Booooo!
876:	I am a student
877:		 Number: 	1
878:		 GPA:    	3.300299999999999
879:	Stewie Griffin is 2 identifies as cat
880:	I am a student
881:		 Number: 	1
882:		 GPA:    	0.3
883:	O1 = java.lang.Object@7fad8c79
884:	O2 = java.lang.Object@71a794e5
885:	O3 = java.lang.Object@71a794e5
886:	Person  as string = Person
887:	Student as string = Student: Person
888:	Teacher as string = Teacher: Person
889:	String  as string = squirrel
890:	JOptionPane as string = utility.io.JOptionPane@76329302
891:	O2==O3
892:	P1==P2
893:	P2==P3
894:	P1==P3
895:	P2==P3
896:	Person is Person
897:	Clone  is Person
898:	Clone is ==
899:	S1 total = 2
900:	S2 total = 2
901:	S3 total = 4
902:	S4 total = 4
903:	S3 total = 9
904:	S4 total = 9
905:	Boom!!!
906:	Boom!!!
907:	Boom!!!
908:	Boom!!!
909:	Boom!!!
910:	Boom!!!
911:	Doctor: Person
912:	DiskJockey: Person
913:	MrWachs: Teacher: Person
914:	Piper: HighSchool: Student: Person
915:	Husky: HighSchool: Student: Person
916:	Athlete: Husky: HighSchool: Student: Person
917:	Meeting is about to begin...
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	Person
	 Person ->	 Student ->	Student: Person
	 Person ->	 Student ->	Student: Per ... (line shortened) ...
918:	Grill on the BBQ
919:	Mr. Lawrence Wachs is eating Protein it was Savory
920:	unidentified is eating Apple from Do not eat!
921:	Round 1...
922:	Jock has signed the form!
923:	Round 2...
924:	Jock has scored
925:	Jock has scored
926:	St. Pauls has scored
927:	End of period 2 and the score is 2 for the Jock and 1 for the St. Pauls
928:	Jock SLAPS St. Pauls
929:	Round 3...
930:	Jock has scored
931:	Jock has scored
932:	St. Pauls has scored
933:	End of period 3 and the score is 4 for the Jock and 2 for the St. Pauls
934:	Round 4...
935:	Jock has scored
936:	Jock has scored
937:	St. Pauls has scored
938:	End of period 4 and the score is 6 for the Jock and 3 for the St. Pauls
939:	Hard core ironing of clothes!
940:	Jock wins!
941:	Grill on the BBQ
942:	Jock is eating Protein it was Savory
943:	Class name: Boolean, Hash Code: 1231, To String: true
944:	Class name: Integer, Hash Code: 0, To String: 0
945:	Class name: Double, Hash Code: 300063655, To String: 3.14
946:	Class name: Character, Hash Code: 97, To String: a
947:	Class name: String, Hash Code: 3556498, To String: test
948:	Class name: Athlete, Hash Code: 928466577, To String: Athlete: Husky: HighSchool: Student: Person
949:	Class name: JOptionPane, Hash Code: 624271064, To String: utility.io.JOptionPane@25359ed8
950:	Class name: Object, Hash Code: 564742142, To String: java.lang.Object@21a947fe
951:	true
952:	0
953:	3.14
954:	a
955:	test
956:	Athlete: Husky: HighSchool: Student: Person
957:	Class name: Boolean, Hash Code: 1231, To String: true
958:	Class name: Integer, Hash Code: 0, To String: 0
959:	Class name: Double, Hash Code: 300063655, To String: 3.14
960:	Class name: Character, Hash Code: 97, To String: a
961:	Class name: String, Hash Code: 3556498, To String: test
962:	Class name: Athlete, Hash Code: 928466577, To String: Athlete: Husky: HighSchool: Student: Person
963:	Home Owner:
964:	Mr. Lawrence Wachs
965:	And the contents...
966:	testing.prerequisite.cs40s.advancedclasses.Meeting@1445d7f
967:	Mr. Lawrence Wachs is eating Apple from Do not eat!
968:	Grill on the BBQ
969:	Mr. Lawrence Wachs is eating Protein it was Savory
970:	Advanced Classes Test complete!
971:	Collections testing begins...
972:	Testing Node constructors....................
973:	Testing Node toString()......................
974:	Node a = null
975:	Node b = Sass
976:	Node c = Pros
977:	Node d = Joes
978:	Testing Node clone().........................
979:	Node e = null
980:	Node f = Sass
981:	Node g = Pros
982:	Node h = Joes
983:	Testing Node equal().........................
984:	Node a == b? -> false
985:	Node b == c? -> false
986:	Node c == d? -> false
987:	Node d == d? -> true
988:	Node e == a? -> false
989:	Node f == b? -> true
990:	Node g == c? -> true
991:	Node h == d? -> true
992:	Testing Node finalize()......................
993:	Node a = null
994:	Node b = Sass
995:	Node c = Pros
996:	Node d = Joes
997:	Node e = null
998:	Node f = Sass
999:	Node g = Pros
1000:	Node h = Joes
1001:	Node a = null
1002:	Node b = null
1003:	Node c = null
1004:	Node d = null
1005:	Node e = null
1006:	Node f = null
1007:	Node g = null
1008:	Node h = null
1009:	Testing default LinkedList constructor.......
1010:	Testing toString, empty, size methods........
1011:	L1 toString -> Empty LinkedList
1012:	L2 toString -> Empty LinkedList
1013:	L1 empty? -> true
1014:	L2 empty? -> true
1015:	L1 size -> 0
1016:	L2 size -> 0
1017:	Test add (first to the back) of the list.....
1018:	addBack -> true	Linked List 	[51]
1019:	addBack -> true	Linked List 	[51,50]
1020:	addBack -> true	Linked List 	[51,50,-50]
1021:	addBack -> true	Linked List 	[51,50,-50,55]
1022:	addBack -> false	Linked List 	[51,50,-50,55]
1023:	Test add (second to the front) of the list...
1024:	addFront -> true	Linked List 	[80,51,50,-50,55]
1025:	addFront -> true	Linked List 	[81,80,51,50,-50,55]
1026:	addFront -> true	Linked List 	[-80,81,80,51,50,-50,55]
1027:	addFront -> true	Linked List 	[88,-80,81,80,51,50,-50,55]
1028:	addFront -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1029:	Re-testing empty, size methods...............
1030:	L1 empty? -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1031:	L2 empty? -> true	Empty LinkedList
1032:	L1 size -> 8	Linked List 	[88,-80,81,80,51,50,-50,55]
1033:	L2 size -> 0	Empty LinkedList
1034:	Test get method..............................
1035:	Getting -1 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1036:	Getting 0 = 88	Linked List 	[88,-80,81,80,51,50,-50,55]
1037:	Getting 1 = -80	Linked List 	[88,-80,81,80,51,50,-50,55]
1038:	Getting 2 = 81	Linked List 	[88,-80,81,80,51,50,-50,55]
1039:	Getting 3 = 80	Linked List 	[88,-80,81,80,51,50,-50,55]
1040:	Getting 4 = 51	Linked List 	[88,-80,81,80,51,50,-50,55]
1041:	Getting 5 = 50	Linked List 	[88,-80,81,80,51,50,-50,55]
1042:	Getting 6 = -50	Linked List 	[88,-80,81,80,51,50,-50,55]
1043:	Getting 7 = 55	Linked List 	[88,-80,81,80,51,50,-50,55]
1044:	Getting 8 = null	Linked List 	[88,-80,81,80,51,50,-50,55]
1045:	Test set method..............................
1046:	Setting -1 to 9 -> false	Linked List 	[88,-80,81,80,51,50,-50,55]
1047:	Setting 0 to 10 -> true	Linked List 	[10,-80,81,80,51,50,-50,55]
1048:	Setting 1 to 11 -> true	Linked List 	[10,11,81,80,51,50,-50,55]
1049:	Setting 2 to 12 -> true	Linked List 	[10,11,12,80,51,50,-50,55]
1050:	Setting 3 to 13 -> true	Linked List 	[10,11,12,13,51,50,-50,55]
1051:	Setting 4 to 14 -> true	Linked List 	[10,11,12,13,14,50,-50,55]
1052:	Setting 5 to 15 -> true	Linked List 	[10,11,12,13,14,15,-50,55]
1053:	Setting 6 to 16 -> true	Linked List 	[10,11,12,13,14,15,16,55]
1054:	Setting 7 to 17 -> true	Linked List 	[10,11,12,13,14,15,16,17]
1055:	Setting 8 to 18 -> false	Linked List 	[10,11,12,13,14,15,16,17]
1056:	Setting 0 to null -> false	Linked List 	[10,11,12,13,14,15,16,17]
1057:	Test equals method...........................
1058:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1059:	List 2 = Empty LinkedList
1060:	List1 == List2 -> false
1061:	Test clone method............................
1062:	List 1 = Linked List 	[10,11,12,13,14,15,16,17]
1063:	List 2 = Linked List 	[10,11,12,13,14,15,16,17]
1064:	Re-testing equals...
1065:	List1 == List2 -> true
1066:	Test addAfter method.........................
1067:	Adding value 	99	 after index 	-1	 result 	false	Linked List 	[10,11,12,13,14,15,16,17]
1068:	Adding value 	100	 after index 	0	 result 	true	Linked List 	[10,100,11,12,13,14,15,16,17]
1069:	Adding value 	101	 after index 	1	 result 	true	Linked List 	[10,100,101,11,12,13,14,15,16,17]
1070:	Adding value 	102	 after index 	2	 result 	true	Linked List 	[10,100,101,102,11,12,13,14,15,16,17]
1071:	Adding value 	103	 after index 	3	 result 	true	Linked List 	[10,100,101,102,103,11,12,13,14,15,16,17]
1072:	Adding value 	104	 after index 	4	 result 	true	Linked List 	[10,100,101,102,103,104,11,12,13,14,15,16,17]
1073:	Adding value 	105	 after index 	5	 result 	true	Linked List 	[10,100,101,102,103,104,105,11,12,13,14,15,16,17]
1074:	Adding value 	106	 after index 	6	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,11,12,13,14,15,16,17]
1075:	Adding value 	107	 after index 	7	 result 	true	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1076:	Test other edge case
1077:	Adding value 	10	 after index 	17	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1078:	Test addBefore method.........................
1079:	Adding value 	99	 before index 	-1	 result 	false	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1080:	Adding value 	100	 before index 	0	 result 	true	Linked List 	[100,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1081:	Adding value 	101	 before index 	1	 result 	true	Linked List 	[100,101,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1082:	Adding value 	102	 before index 	2	 result 	true	Linked List 	[100,101,102,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1083:	Adding value 	103	 before index 	3	 result 	true	Linked List 	[100,101,102,103,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1084:	Adding value 	104	 before index 	4	 result 	true	Linked List 	[100,101,102,103,104,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1085:	Adding value 	105	 before index 	5	 result 	true	Linked List 	[100,101,102,103,104,105,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1086:	Adding value 	106	 before index 	6	 result 	true	Linked List 	[100,101,102,103,104,105,106,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1087:	Adding value 	107	 before index 	7	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1088:	Adding value 	108	 before index 	8	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1089:	Adding value 	109	 before index 	9	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1090:	Adding value 	110	 before index 	10	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1091:	Adding value 	111	 before index 	11	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1092:	Adding value 	112	 before index 	12	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1093:	Adding value 	113	 before index 	13	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1094:	Adding value 	114	 before index 	14	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1095:	Adding value 	115	 before index 	15	 result 	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1096:	Test other edge case
1097:	Adding value 	10	 before index 	33	 result 	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1098:	Test front and back methods..................
1099:	Front of list 1 = 100	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1100:	Front of list 2 = 10	Linked List 	[10,11,12,13,14,15,16,17]
1101:	Back of list 1 = 17	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1102:	Back of list 2 = 17	Linked List 	[10,11,12,13,14,15,16,17]
1103:	Clear out list 2
1104:	Front of list 2 = null	Empty LinkedList
1105:	Back of list 2 = null	Empty LinkedList
1106:	Cloning list 2 from list 1
1107:	Test removeFront method......................
1108:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1109:	Linked List 	[101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1110:	Linked List 	[102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1111:	Linked List 	[103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1112:	Linked List 	[104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1113:	Linked List 	[105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1114:	Linked List 	[106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1115:	Linked List 	[107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1116:	Linked List 	[108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	108
1117:	Linked List 	[109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	109
1118:	Linked List 	[110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	110
1119:	Linked List 	[111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	111
1120:	Linked List 	[112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	112
1121:	Linked List 	[113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	113
1122:	Linked List 	[114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	114
1123:	Linked List 	[115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	115
1124:	Linked List 	[10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	10
1125:	Linked List 	[100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	100
1126:	Linked List 	[101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	101
1127:	Linked List 	[102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	102
1128:	Linked List 	[103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	103
1129:	Linked List 	[104,105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	104
1130:	Linked List 	[105,106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	105
1131:	Linked List 	[106,107,11,12,13,14,15,16,17]	Removing list 1 front = 	106
1132:	Linked List 	[107,11,12,13,14,15,16,17]	Removing list 1 front = 	107
1133:	Linked List 	[11,12,13,14,15,16,17]	Removing list 1 front = 	11
1134:	Linked List 	[12,13,14,15,16,17]	Removing list 1 front = 	12
1135:	Linked List 	[13,14,15,16,17]	Removing list 1 front = 	13
1136:	Linked List 	[14,15,16,17]	Removing list 1 front = 	14
1137:	Linked List 	[15,16,17]	Removing list 1 front = 	15
1138:	Linked List 	[16,17]	Removing list 1 front = 	16
1139:	Linked List 	[17]	Removing list 1 front = 	17
1140:	Empty LinkedList	Removing list 1 front = 	null
1141:	Cloning list 1 from list 2
1142:	Test removeBack method.......................
1143:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing list 2 back = 	17
1144:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing list 2 back = 	16
1145:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing list 2 back = 	15
1146:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing list 2 back = 	14
1147:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing list 2 back = 	13
1148:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing list 2 back = 	12
1149:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing list 2 back = 	11
1150:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1151:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing list 2 back = 	106
1152:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing list 2 back = 	105
1153:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing list 2 back = 	104
1154:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing list 2 back = 	103
1155:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing list 2 back = 	102
1156:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing list 2 back = 	101
1157:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing list 2 back = 	100
1158:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing list 2 back = 	10
1159:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing list 2 back = 	115
1160:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing list 2 back = 	114
1161:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing list 2 back = 	113
1162:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing list 2 back = 	112
1163:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing list 2 back = 	111
1164:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing list 2 back = 	110
1165:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing list 2 back = 	109
1166:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing list 2 back = 	108
1167:	Linked List 	[100,101,102,103,104,105,106,107]	Removing list 2 back = 	107
1168:	Linked List 	[100,101,102,103,104,105,106]	Removing list 2 back = 	106
1169:	Linked List 	[100,101,102,103,104,105]	Removing list 2 back = 	105
1170:	Linked List 	[100,101,102,103,104]	Removing list 2 back = 	104
1171:	Linked List 	[100,101,102,103]	Removing list 2 back = 	103
1172:	Linked List 	[100,101,102]	Removing list 2 back = 	102
1173:	Linked List 	[100,101]	Removing list 2 back = 	101
1174:	Linked List 	[100]	Removing list 2 back = 	100
1175:	Empty LinkedList	Removing list 2 back = 	null
1176:	Cloning list 2 from list 1
1177:	Test remove method...........................
1178:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	33	 removed: 	null
1179:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	32	 removed: 	null
1180:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]	Removing from list 1 from index: 	31	 removed: 	17
1181:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16]	Removing from list 1 from index: 	30	 removed: 	16
1182:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15]	Removing from list 1 from index: 	29	 removed: 	15
1183:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14]	Removing from list 1 from index: 	28	 removed: 	14
1184:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13]	Removing from list 1 from index: 	27	 removed: 	13
1185:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12]	Removing from list 1 from index: 	26	 removed: 	12
1186:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11]	Removing from list 1 from index: 	25	 removed: 	11
1187:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	24	 removed: 	107
1188:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106]	Removing from list 1 from index: 	23	 removed: 	106
1189:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105]	Removing from list 1 from index: 	22	 removed: 	105
1190:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104]	Removing from list 1 from index: 	21	 removed: 	104
1191:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103]	Removing from list 1 from index: 	20	 removed: 	103
1192:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102]	Removing from list 1 from index: 	19	 removed: 	102
1193:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101]	Removing from list 1 from index: 	18	 removed: 	101
1194:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100]	Removing from list 1 from index: 	17	 removed: 	100
1195:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10]	Removing from list 1 from index: 	16	 removed: 	10
1196:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115]	Removing from list 1 from index: 	15	 removed: 	115
1197:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]	Removing from list 1 from index: 	14	 removed: 	114
1198:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113]	Removing from list 1 from index: 	13	 removed: 	113
1199:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112]	Removing from list 1 from index: 	12	 removed: 	112
1200:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111]	Removing from list 1 from index: 	11	 removed: 	111
1201:	Linked List 	[100,101,102,103,104,105,106,107,108,109,110]	Removing from list 1 from index: 	10	 removed: 	110
1202:	Linked List 	[100,101,102,103,104,105,106,107,108,109]	Removing from list 1 from index: 	9	 removed: 	109
1203:	Linked List 	[100,101,102,103,104,105,106,107,108]	Removing from list 1 from index: 	8	 removed: 	108
1204:	Linked List 	[100,101,102,103,104,105,106,107]	Removing from list 1 from index: 	7	 removed: 	107
1205:	Linked List 	[100,101,102,103,104,105,106]	Removing from list 1 from index: 	6	 removed: 	106
1206:	Linked List 	[100,101,102,103,104,105]	Removing from list 1 from index: 	5	 removed: 	105
1207:	Linked List 	[100,101,102,103,104]	Removing from list 1 from index: 	4	 removed: 	104
1208:	Linked List 	[100,101,102,103]	Removing from list 1 from index: 	3	 removed: 	103
1209:	Linked List 	[100,101,102]	Removing from list 1 from index: 	2	 removed: 	102
1210:	Linked List 	[100,101]	Removing from list 1 from index: 	1	 removed: 	101
1211:	Linked List 	[100]	Removing from list 1 from index: 	0	 removed: 	100
1212:	Empty LinkedList	Removing from list 1 from index: 	-1	 removed: 	null
1213:	Test contains method.........................
1214:	List 1 (empty) contains 10 = false	Empty LinkedList
1215:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1216:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1217:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1218:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1219:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1220:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1221:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1222:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1223:	List 2 contains 	108	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1224:	List 2 contains 	109	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1225:	List 2 contains 	110	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1226:	List 2 contains 	111	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1227:	List 2 contains 	112	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1228:	List 2 contains 	113	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1229:	List 2 contains 	114	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1230:	List 2 contains 	115	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1231:	List 2 contains 	10	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1232:	List 2 contains 	100	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1233:	List 2 contains 	101	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1234:	List 2 contains 	102	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1235:	List 2 contains 	103	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1236:	List 2 contains 	104	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1237:	List 2 contains 	105	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1238:	List 2 contains 	106	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1239:	List 2 contains 	107	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1240:	List 2 contains 	11	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1241:	List 2 contains 	12	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1242:	List 2 contains 	13	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1243:	List 2 contains 	14	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1244:	List 2 contains 	15	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1245:	List 2 contains 	16	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1246:	List 2 contains 	17	true	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1247:	List 2 contains 	1000	false	Linked List 	[100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,10,100,101,102,103,104,105,106,107,11,12,13,14,15,16,17]
1248:	Resetting list 1 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1249:	Test firstIndexOf and lastIndexOf methods....
1250:	First index of 5: 	0
1251:	Last  index of 5: 	7
1252:	First index of 7: 	2
1253:	Last  index of 7: 	9
1254:	First index of 8: 	3
1255:	Last  index of 8: 	3
1256:	First index of 9: 	-1
1257:	Last  index of 9: 	-1
1258:	Test numberOf method.........................
1259:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1260:	Number of 5: 	3
1261:	Number of 8: 	1
1262:	Number of 9: 	0
1263:	Test allIndices method.......................
1264:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1265:	Array -> indices 5: 	[0, 4, 7]
1266:	Array -> indices 8: 	[3]
1267:	Array -> indices 9: 	null
1268:	Cloning list 2 from list 1
1269:	Test remove method...........................
1270:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1271:	Removing 5: 	true	Linked List 	[6,7,8,5,6,7,5,6,7]
1272:	Removing 8: 	true	Linked List 	[6,7,5,6,7,5,6,7]
1273:	Removing 9: 	false	Linked List 	[6,7,5,6,7,5,6,7]
1274:	Test removeLast method.......................
1275:	Linked List 	[6,7,5,6,7,5,6,7]
1276:	Removing 5: 	true	Linked List 	[6,7,5,6,7,6,7]
1277:	Removing 8: 	false	Linked List 	[6,7,5,6,7,6,7]
1278:	Removing 9: 	false	Linked List 	[6,7,5,6,7,6,7]
1279:	Test removeAll method........................
1280:	Linked List 	[6,7,5,6,7,6,7]
1281:	Removing all 5: 	true	Linked List 	[6,7,6,7,6,7]
1282:	Removing all 6: 	true	Linked List 	[7,7,7]
1283:	Removing all 9: 	false	Linked List 	[7,7,7]
1284:	Cloning list 1 from list 2
1285:	Test removeAll array method..................
1286:	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1287:	Array: 	[5, 6, 9]
1288:	Removing all from array: Linked List 	[7,8,7,7]
1289:	Test removeAll list method..................
1290:	List 1 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1291:	List 2 	Linked List 	[7,8,7,7]
1292:	Removing all list 2 from list 1...
1293:	List 1 	Linked List 	[5,6,5,6,5,6]
1294:	List 2 	Linked List 	[7,8,7,7]
1295:	Resetting list 1 and 2 to: Linked List 	[5,6,7,8,5,6,7,5,6,7]
1296:	Test containsAll array method................
1297:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 9]	 is false
1298:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains array: 	[5, 6, 7, 8]	 is true
1299:	Test containsAll list method.................
1300:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 is true
1301:	Alter list 2...
1302:	List: 	Linked List 	[5,6,7,8,5,6,7,5,6,7] contains list: 	Linked List 	[6,7,8,6,7,5,6,45]	 is false
1303:	Test addAll array method.....................
1304:	Linked List 	[6,7,8,6,7,5,6,45]
1305:	Adding array: 	[5, 6, 7, 8]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1306:	Test addAll list method......................
1307:	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8]
1308:	Adding list: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]	 now list 	Linked List 	[6,7,8,6,7,5,6,45,5,6,7,8,5,6,7,8,5,6,7,5,6,7]
1309:	Test subList method..........................
1310:	List 1 = 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1311:	Pulling out sub-list from 3 to 6: 	Linked List 	[8,5,6,7]
1312:	Pulling out sub-list from 1 to 1: 	Linked List 	[6]
1313:	Pulling out sub-list from 2 to 10: 	null
1314:	Pulling out sub-list from 0 to 9: 	Linked List 	[5,6,7,8,5,6,7,5,6,7]
1315:	Test fromArray method........................
1316:	Array is 	[5, 6, 7, 8]
1317:	List is 	Linked List 	[5,6,7,8]
1318:	Test fromLinkedList method...................
1319:	1st List is 	Linked List 	[5,6,7,8]
1320:	2nd List is 	Linked List 	[5,6,7,8]
1321:	Test toArray method..........................
1322:	List 	Linked List 	[5,6,7,8]	 into array 	[5, 6, 7, 8]
1323:	Testing the imported util LinkedList.........
1324:	Imported constructor...
1325:	Imported add:	[0.0]
1326:	Imported add:	[0.0, 1.23]
1327:	Imported addFirst:	[4.56, 0.0, 1.23]
1328:	Imported addLast:	[4.56, 0.0, 1.23, 7.89]
1329:	Imported size:	4
1330:	Imported isEmpty:	false
1331:	Imported get:	0.0
1332:	Imported set:	4.56
1333:	Imported clone:	[0.01, 0.0, 1.23, 7.89]
1334:	Imported equals:	true
1335:	Imported getFirst:	0.01
1336:	Imported getLast:	7.89
1337:	Imported contains:	true
1338:	Imported removeFirst:	0.01
1339:	Imported removeLast:	7.89
1340:	Imported remove:	1.23
1341:	Imported remove:	false
1342:	Testing the imported util ArrayList.........
1343:	Imported ArrayList:	[a, b, c, d, e]
1344:	Using the enhanced for loop with this object...
1345:	a b c d e Using an iterator object...
1346:	a b c d e Collections testing complete!
1347:	Computer Science 42SAP Course:.............................................................
1348:	Computer Science 42SAP curriculum content..................................................
1349:	AP curriculum - Part 1.....................................................................
1350:	Unit 1 - Primitive Types ..................................................................
1351:	1.1 - Why Programming? Why Java?...........................................................
1352:	   1.1.1 - Call System class methods to generate output to the console
1353:	      1.1.1.1 - System.out.print and System.out.println display information on the 
1354:	                 computer monitor 
1355:	      1.1.1.2 - System.out.println moves the cursor to a new line after  the information 
1356:	                 has been displayed, while System.out.print does not     
1357:	   1.1.2 - Create string literals
1358:	      1.1.2.1 - A string literal is enclosed in double quotes     
1359:	Add your own example(s) here...
1360:	1.2 - Variables and Data Types.............................................................
1361:	   1.2.1 - Identify the most appropriate data type category for a particular specification
1362:	      1.2.1.1 - A type is a set of values (a domain) and a set of operations on 
1363:	                 them 
1364:	      1.2.1.2 - Data types can be categorized as either primitive or reference 
1365:	      1.2.1.3 - The primitive data types used in this course define the set of operations 
1366:	                 for numbers and Boolean values 
1367:	   1.2.1 - Declare variables of the correct types to represent primitive data
1368:	      1.2.1.1 - The three primitive data types used in this course are int, double, 
1369:	                 and boolean 
1370:	      1.2.1.2 - Each variable has associated memory that is used to hold its value 
1371:	      1.2.1.3 - The memory associated with a variable of a primitive type holds 
1372:	                 an actual primitive value 
1373:	      1.2.1.4 - When a variable is declared final, its value cannot be changed once 
1374:	                 it is initialized 
1375:	Add your own example(s) here...
1376:	1.3 - Expressions and Assignment Statements................................................
1377:	   1.3.1 - Evaluate arithmetic expressions in a program code
1378:	      1.3.1.1 - A literal is the source code representation of a fixed value
1379:	      1.3.1.2 - Arithmetic expressions include expressions of type int and double 
1380:	      1.3.1.3 - The arithmetic operators consist of +, −, *, /, and % 
1381:	      1.3.1.4 - An arithmetic operation that uses two int values will evaluate to 
1382:	                 an int value 
1383:	      1.3.1.5 - An arithmetic operation that uses a double value will evaluate to 
1384:	                 a double value 
1385:	      1.3.1.6 - Operators can be used to construct compound expressions 
1386:	      1.3.1.7 - During evaluation, operands are associated with operators according 
1387:	                 to operator precedence to determine how they are grouped 
1388:	      1.3.1.8 - An attempt to divide an integer by zero will result in an ArithmeticException 
1389:	                 to occur 
1390:	   1.3.2 - Evaluate what is stored in a variable as a result of an expression with 
1391:	              an assignment statement
1392:	      1.3.2.1 - The assignment operator (=) allows a program to initialize or change 
1393:	                 the value stored in a variable. The value of the expression on the right is 
1394:	                 stored in the variable on the left 
1395:	      1.3.2.2 - During execution, expressions are evaluated to produce a single 
1396:	                 value 
1397:	      1.3.2.3 - The value of an expression has a type based on the evaluation of 
1398:	                 the expression 
1399:	Add your own example(s) here...
1400:	1.4 - Compound Assignment Operators........................................................
1401:	   1.4.1 - Evaluate what is stored in a variable as a result of an expression with 
1402:	              an assignment statement
1403:	      1.4.1.1 - Compound assignment operators (+=, −=, *=, /=, %=) can be used in 
1404:	                 place of the assignment operator 
1405:	      1.4.1.2 - The increment operator (++) and decrement operator (−−) are used 
1406:	                 to add 1 or subtract 1 from the stored value of a variable or an array element. 
1407:	                 The new value is assigned to the variable or array element
1408:	Add your own example(s) here...
1409:	1.5 - Casting and Ranges of Variables......................................................
1410:	   1.5.1 - Evaluate arithmetic expressions that use casting
1411:	      1.5.1.1 - The casting operators (int) and (double) can be used to create a 
1412:	                 temporary value converted to a different data type
1413:	      1.5.1.2 - Casting a double value to an int causes the digits to the right 
1414:	                 of the decimal point to be truncated
1415:	      1.5.1.3 - Some programming code causes int values to be automatically cast 
1416:	                 (widened) to double values
1417:	      1.5.1.4 - Values of type double can be rounded to the nearest integer by (int)(x 
1418:	                 + 0.5) or (int)(x – 0.5) for negative numbers 
1419:	      1.5.1.5 - Integer values in Java are represented by values of type int, which 
1420:	                 are stored using a finite amount (4 bytes) of memory. Therefore, an int value 
1421:	                 must be in the range from Integer.MIN_VALUE to Integer.MAX_VALUE inclusive
1422:	      1.5.1.6 - If an expression would evaluate to an int value outside of the allowed 
1423:	                 range, an integer overflow occurs. This could result in an incorrect value 
1424:	                 within the allowed range 
1425:	Add your own example(s) here...
1426:	Unit 3 - Boolean Expressions And If Statements            .................................
1427:	3.1 - Boolean Expressions  ................................................................
1428:	   3.1.1 - Evaluate Boolean expressions that use relational operators in program 
1429:	              code
1430:	      3.1.1.1 - Primitive values and reference values can be compared using relational 
1431:	                 operators (i.e., == and !=) 
1432:	      3.1.1.2 - Arithmetic expression values can be compared using relational operators 
1433:	                 (i.e., <, >, <=, >=) 
1434:	      3.1.1.3 - An expression involving relational operators evaluates to a Boolean 
1435:	                 value 
1436:	Add your own example(s) here...
1437:	3.2 - if Statements and Control Flow  .....................................................
1438:	   3.2.1 - Represent branching logical processes by using conditional Statements
1439:	      3.2.1.1 -  Conditional statements interrupt the sequential execution of statements 
1440:	      3.2.1.2 -  if statements affect the flow of control by executing different 
1441:	                 statements based on the value of a Boolean Expression 
1442:	      3.2.1.3 -  A one-way selection (if statement) is written when there is a set 
1443:	                 of statements to execute under a certain condition. In this case, the body 
1444:	                 is executed only when the Boolean condition is true 
1445:	Add your own example(s) here...
1446:	3.3 - if-else Statements  .................................................................
1447:	   3.3.1 -  Represent branching logical processes by using conditional Statements
1448:	      3.3.1.1 -  A two-way selection is written when there are two sets of statements— 
1449:	                 one to be executed when the Boolean condition is true, and another set for 
1450:	                 when the Boolean condition is false. In this case, the body of the "if" is 
1451:	                 executed when the Boolean condition is true, and the body of the "else" is 
1452:	                 executed when the Boolean condition is false 
1453:	Add your own example(s) here...
1454:	3.4 - else if Statements  .................................................................
1455:	   3.4.1 -  Represent branching logical processes by using conditional Statements
1456:	      3.4.1.1 -  A multi-way selection is written when there are a series of conditions 
1457:	                 with different statements for each condition. Multi-way selection is performed 
1458:	                 using if-else-if statements such that exactly one section of code is executed 
1459:	                 based on the first condition that evaluates to true
1460:	Add your own example(s) here...
1461:	3.5 - Compound Boolean Expressions  .......................................................
1462:	   3.5.1 -  Represent branching logical processes by using nested conditional statements
1463:	      3.5.1.1 -  Nested if statements consist of if statements within if statements 
1464:	   3.5.2 -  Evaluate compound Boolean expressions in program code
1465:	      3.5.2.1 -  Logical operators !(not), &&(and), and ||(or) are used with Boolean 
1466:	                 values. This represents the order these operators will be evaluated 
1467:	      3.5.2.2 -  An expression involving logical operators evaluates to a Boolean 
1468:	                 value 
1469:	      3.5.2.3 -  When the result of a logical expression using && or || can be determined 
1470:	                 by evaluating only the first Boolean operand, the second is not evaluated. 
1471:	                 This is known as short-circuited evaluation 
1472:	Add your own example(s) here...
1473:	3.6 - Equivalent Boolean Expressions  .....................................................
1474:	   3.6.1 -  Compare and contrast equivalent Boolean expressions
1475:	      3.6.1.1 - De Morgan’s Laws can be applied to Boolean expressions 
1476:	      3.6.1.2 - Truth tables can be used to prove Boolean identities 
1477:	      3.6.1.3 -  Equivalent Boolean expressions will evaluate to the same value 
1478:	                 in all cases 
1479:	Add your own example(s) here...
1480:	3.7 - Comparing Objects  ..................................................................
1481:	   3.7.1 -  Compare object references using Boolean expressions in program code
1482:	      3.7.1.1 -  Two object references are considered aliases when they both reference 
1483:	                 the same object 
1484:	      3.7.1.2 -  Object reference values can be compared, using == and !=, to identify 
1485:	                 aliases 
1486:	      3.7.1.3 -  A reference value can be compared with null, using == or !=, to 
1487:	                 determine if the reference actually references an object 
1488:	      3.7.1.4 -  Often classes have their own equals method, which can be used to 
1489:	                 determine whether two objects of the class are equivalent 
1490:	Add your own example(s) here...
1491:	Unit 4 - Iteration.........................................................................
1492:	4.1 - while Loops  ........................................................................
1493:	   4.1.1 - Represent iterative processes using a while loop
1494:	      4.1.1.1 - Iteration statements change the flow of control by repeating a set 
1495:	                 of statements zero or more times until a condition is met 
1496:	      4.1.1.2 - In loops, the Boolean expression is evaluated before each iteration 
1497:	                 of the loop body, including the first. When the expression evaluates to true, 
1498:	                 the loop body is executed. This continues until the expression evaluates to 
1499:	                 false, whereupon the iteration ceases 4.1.1.3 - A loop is an infinite loop 
1500:	                 when the Boolean expression always evaluates to true 
1501:	      4.1.1.4 - If the Boolean expression evaluates to false initially, the loop 
1502:	                 body is not executed at all
1503:	      4.1.1.5 - Executing a return statement inside an iteration statement will 
1504:	                 halt the loop and exit the method or constructor
1505:	   4.1.2 - For algorithms in the context of a particular specification that does 
1506:	              not require the use of traversals: (A) Identify standard algorithms, (B) Modify 
1507:	              standard algorithms, (C) Develop an algorithm 
1508:	      4.1.2.1 - There are standard algorithms to: (A) Identify if an integer is 
1509:	                 or is not evenly divisible by another integer, (B) Identify the individual 
1510:	                 digits in an integer, (C) Determine the frequency with which a specific criterion 
1511:	                 is met 
1512:	      4.1.2.2 - There are standard algorithms to: (A) Determine a minimum or maximum 
1513:	                 value, (B) Compute a sum, average, or mode
1514:	Add your own example(s) here...
1515:	4.2 - for Loops  ..........................................................................
1516:	   4.2.1 - Represent iterative processes using a for loop
1517:	      4.2.1.1 - There are three parts in a for loop header: the initialization, 
1518:	                 the Boolean expression, and the increment. The increment statement can also 
1519:	                 be a decrement statement 
1520:	      4.2.1.2 - In a for loop, the initialization statement is only executed once 
1521:	                 before the first Boolean expression evaluation. The variable being initialized 
1522:	                 is referred to as a loop control variable 
1523:	      4.2.1.3 - In each iteration of a for loop, the increment statement is executed 
1524:	                 after the entire loop body is executed and before the Boolean expression is 
1525:	                 evaluated again 
1526:	      4.2.1.4 - A for loop can be rewritten into an equivalent while loop and vice 
1527:	                 versa 
1528:	      4.2.1.5 - “Off by one” errors occur when the iteration statement loops one 
1529:	                 time too many or one time too few 
1530:	Add your own example(s) here...
1531:	4.3 - Developing Algorithms Using Strings  ................................................
1532:	   4.3.1 - For algorithms in the context of a particular specification that involves 
1533:	              String objects: (A) Identify standard algorithms, (B) Modify standard algorithms, 
1534:	              (C) Develop an Algorithm
1535:	      4.3.1.1 - There are standard algorithms that utilize String traversals to: 
1536:	                 (A) Find if one or more substrings has a particular property, (B) Determine 
1537:	                 the number of substrings that meet specific criteria, (C) Create a new string 
1538:	                 with the characters reversed 
1539:	Add your own example(s) here...
1540:	4.4 - Nested Iteration  ...................................................................
1541:	   4.4.1 - Represent nested iterative processes
1542:	      4.4.1.1 - Nested iteration statements are iteration statements that appear 
1543:	                 in the body of another iteration statement 
1544:	      4.4.1.2 - When a loop is nested inside another loop, the inner loop must complete 
1545:	                 all its iterations before the outer loop can continue 
1546:	Add your own example(s) here...
1547:	4.5 - Informal Code Analysis  .............................................................
1548:	   4.5.1 - Compute statement execution counts and informal run-time comparison of 
1549:	              iterative statements
1550:	      4.5.1.1 - A statement execution count indicates the number of times a statement 
1551:	                 is executed by the program 
1552:	Add your own example(s) here...
1553:	AP curriculum - Part 2.....................................................................
1554:	Unit 2 - Using Objects.....................................................................
1555:	2.1 - Objects: Instances of Classes........................................................
1556:	   2.1.1 - Explain the relationship between a class and an object
1557:	      2.1.1.1 - An object is a specific instance of a class with defined attributes 
1558:	      2.1.1.2 - A class is the formal implementation, or blueprint, of the attributes 
1559:	                 and behaviors of an object 
1560:	Add your own example(s) here...
1561:	2.2 - Creating and Storing Objects (Instantiation).........................................
1562:	   2.2.1 - Identify, using its signature, the correct constructor being called
1563:	      2.2.1.1 - A signature consists of the constructor name and the parameter list 
1564:	      2.2.1.2 - The parameter list, in the header of a constructor, lists the types 
1565:	                 of the values that are passed and their variable names. These are often referred 
1566:	                 to as formal parameters 
1567:	      2.2.1.3 - A parameter is a value that is passed into a constructor. These 
1568:	                 are often referred to as actual parameters 
1569:	      2.2.1.4 - Constructors are said to be overloaded when there are multiple constructors 
1570:	                 with the same name but a different signature 
1571:	      2.2.1.5 - The actual parameters passed to a constructor must be compatible 
1572:	                 with the types identified in the formal parameter list 
1573:	      2.2.1.6 - Parameters are passed using call by value. Call by  value initializes 
1574:	                 the formal parameters with copies of the actual parameters 
1575:	   2.2.2 - For creating objects: a. Create objects by calling constructors without 
1576:	              parameters. b. Create objects by calling constructors with parameters
1577:	      2.2.2.1 - Every object is created using the keyword new followed by a call 
1578:	                 to one of the class’s constructors 
1579:	      2.2.2.2 - A class contains constructors that are invoked to create objects. 
1580:	                 They have the same name as the class 
1581:	      2.2.2.3 - Existing classes and class libraries can be utilized as appropriate 
1582:	                 to create objects 
1583:	      2.2.2.4 - Parameters allow values to be passed to the constructor to establish 
1584:	                 the initial state of the object 
1585:	   2.2.3 - Define variables of the correct types to represent reference data
1586:	      2.2.3.1 - The keyword null is a special value used to indicate that a reference 
1587:	                 is not associated with any object 
1588:	      2.2.3.2 - The memory associated with a variable of a reference type holds 
1589:	                 an object reference value or, if there is no object, null. This value is the 
1590:	                 memory address of the referenced object                
1591:	Add your own example(s) here...
1592:	2.3 - Calling a Void Method................................................................
1593:	   2.3.1 - Call non-static void methods without parameters
1594:	      2.3.1.1 - An object’s behavior refers to what the object can do (or what can 
1595:	                 be done to it) and is defined by methods 
1596:	      2.3.1.2 -  Procedural abstraction allows a programmer to use a method by knowing 
1597:	                 what the method does even if they do not know how the method was written 
1598:	      2.3.1.3 -  A method signature for a method without parameters consists of 
1599:	                 the method name and an empty parameter list
1600:	      2.3.1.4 -  A method or constructor call interrupts the sequential execution 
1601:	                 of statements, causing the program to first execute the statements in the 
1602:	                 method or constructor before continuing. Once the last statement in the method 
1603:	                 or constructor has executed or a return statement is executed, flow of control 
1604:	                 is returned to the point immediately following where the method or constructor 
1605:	                 was called 
1606:	      2.3.1.5 -  Non-static methods are called through objects of the Class 
1607:	      2.3.1.6 -  The dot operator is used along with the object name to call non-static 
1608:	                 methods 
1609:	      2.3.1.7 -  Void methods do not have return values and are therefore not called 
1610:	                 as part of an expression 
1611:	      2.3.1.8 -  Using a null reference to call a method or access an instance variable 
1612:	                 causes a NullPointerException to be thrown 
1613:	Add your own example(s) here...
1614:	2.4 - Calling a Void Method with Parameters ...............................................
1615:	   2.4.1 -  Call non-static void methods with parameters
1616:	      2.4.1.1 -  A method signature for a method with parameters consists of the 
1617:	                 method name and the ordered list of parameter types 
1618:	      2.4.1.2 -  Values provided in the parameter list need to correspond to the 
1619:	                 order and type in the method Signature 
1620:	      2.4.1.3 -  Methods are said to be overloaded when there are multiple methods 
1621:	                 with the same name but a different Signature 
1622:	Add your own example(s) here...
1623:	2.5 - Calling a Non-void Method  ..........................................................
1624:	   2.5.1 -  Call non-static non-void methods with or without parameters
1625:	      2.5.1.1 -  Non-void methods return a value that is the same type as the return 
1626:	                 type in the signature. To use the return value when calling a non-void method, 
1627:	                 it must be stored in a variable or used as part of an expression 
1628:	Add your own example(s) here...
1629:	2.6 - String Objects: Concatenation, Literals, and More  ..................................
1630:	   2.6.1 -  For String class: a. Create String objects. b. Call String Methods
1631:	      2.6.1.1 -  String objects can be created by using string literals or by calling 
1632:	                 the String class constructor 
1633:	      2.6.1.2 -  String objects are immutable, meaning that String methods do not 
1634:	                 change the String object 
1635:	      2.6.1.3 -  String objects can be concatenated using the + or += operator, 
1636:	                 resulting in a new String object 
1637:	      2.6.1.4 -  Primitive values can be concatenated with a String object. This 
1638:	                 causes implicit conversion of the values to String objects 
1639:	      2.6.1.5 -  Escape sequences start with a \ and have a special meaning in Java. 
1640:	                 Escape sequences used in this course include \", \\, and \n 
1641:	Add your own example(s) here...
1642:	2.7 - String Methods.......................................................................
1643:	   2.7.1 -  For String class: a. Create String objects. b. Call String methods
1644:	      2.7.1.1 -  Application program interfaces (APIs) and libraries simplify complex 
1645:	                 programming tasks 
1646:	      2.7.1.2 -  Documentation for APIs and libraries are essential to understanding 
1647:	                 the attributes and behaviors of an object of a class 
1648:	      2.7.1.3 -  Classes in the APIs and libraries are grouped into Packages 
1649:	      2.7.1.4 -  The String class is part of the java.lang package. Classes in the 
1650:	                 java.lang package are available by Default 
1651:	      2.7.1.5 -  A String object has index values from 0 to length – 1. Attempting 
1652:	                 to access indices outside this range will result in an IndexOutOfBoundsException 
1653:	      2.7.1.6 -  A String object can be concatenated with an object reference, which 
1654:	                 implicitly calls the referenced object's toString method 
1655:	      2.7.1.7 -  The following String methods and constructors—including what they 
1656:	                 do and when they are used—are part of the Java Quick Reference: (A) String(String 
1657:	                 str) — Constructs a new String object that represents the same sequence of 
1658:	                 characters as str (B) int length() — Returns the number of characters in a 
1659:	                 String object (C) String substring(int from) — Returns substring(from, length()) 
1660:	                 (D) int indexOf(String str) — Returns the index of the first occurrence of 
1661:	                 str; returns -1 if not found (E) boolean equals(String other) — Returns true 
1662:	                 if this is equal to other; returns false otherwise (F) int compareTo(String 
1663:	                 other) — Returns a value < 0 if this is less than other; returns zero if this 
1664:	                 is equal to other; returns a value > 0 if this is greater than other  
1665:	      2.7.1.8 -  A string identical to the single element substring at position 
1666:	                 index can be created by calling substring(index, index + 1) 
1667:	Add your own example(s) here...
1668:	2.8 - Wrapper Classes: Integer and Double  ................................................
1669:	   2.8.1 -  For wrapper classes: a. Create Integer objects, b. Call Integer methods, 
1670:	              c. Create Double objects, d. Call Double Methods
1671:	      2.8.1.1 -  The Integer class and Double class are part of the java.lang package 
1672:	      2.8.1.2 -  The following Integer methods and constructors — including what 
1673:	                 they do and when they are used—are part of the Java Quick Reference: (A) Integer(int 
1674:	                 value) — Constructs a new Integer object that represents the specified int 
1675:	                 value (B) Integer.MIN_VALUE — The minimum value represented by an int or Integer 
1676:	                 (C) Integer.MAX_VALUE — The maximum value represented by an int or Integer 
1677:	                 (D) int intValue() — Returns the value of this Integer as an Int 
1678:	      2.8.1.3 -  The following Double methods and constructors— including what they 
1679:	                 do and when they are used—are part of the Java Quick Reference: (A) double 
1680:	                 doubleValue() — Returns the value of this Double as a double 
1681:	      2.8.1.4 -  Autoboxing is the automatic conversion that the Java compiler makes 
1682:	                 between primitive types and their corresponding object wrapper classes. This 
1683:	                 includes converting an int to an Integer and a double to a Double 
1684:	      2.8.1.5 -  The Java compiler applies autoboxing when a primitive value is: 
1685:	                 (A) Passed as a parameter to a method that expects an object of the corresponding 
1686:	                 wrapper class. (B) Assigned to a variable of the corresponding wrapper class 
1687:	      2.8.1.6 -  Unboxing is the automatic conversion that the Java compiler makes 
1688:	                 from the wrapper class to the primitive type. This includes converting an 
1689:	                 Integer to an int and a Double to a double 
1690:	      2.8.1.7 -  The Java compiler applies unboxing when a wrapper class object 
1691:	                 is: (A) Passed as a parameter to a method that expects a value of the corresponding 
1692:	                 primitive type (B) Assigned to a variable of the corresponding primitive type 
1693:	Add your own example(s) here...
1694:	2.9 - Using the Math Class  ...............................................................
1695:	   2.9.1 -  Call static methods
1696:	      2.9.1.1 - Static methods are called using the dot operator along with the 
1697:	                 class name unless they are defined in the enclosing class 
1698:	   2.9.2 -  Evaluate expressions that use the Math class methods
1699:	      2.9.2.1 -  The Math class is part of the java.lang package 
1700:	      2.9.2.2 -  The Math class contains only static methods 
1701:	      2.9.2.3 -  The following static Math methods—including what they do and when 
1702:	                 they are used—are part of the Java Quick Reference: (A) int abs(int x) — Returns 
1703:	                 the absolute value of an int value (B) double abs(double x) — Returns the 
1704:	                 absolute value of a double value (C) double pow(double base, double exponent) 
1705:	                 — Returns the value of the first parameter raised to the power of the second 
1706:	                 parameter (D) double sqrt(double x) — Returns the positive square root of 
1707:	                 a double value (E) double random() — Returns a double value greater than or 
1708:	                 equal to 0.0 and less than 1.0 
1709:	      2.9.2.4 -  The values returned from Math.random can be manipulated to produce 
1710:	                 a random int or double in a defined range 
1711:	Add your own example(s) here...
1712:	Unit 5 - Writing Classes...................................................................
1713:	5.1 - Anatomy of a Class  .................................................................
1714:	   5.1.1 - Designate access and visibility constraints to classes, data, constructors, 
1715:	              and methods
1716:	      5.1.1.1 - The keywords public and private affect the access of  classes, data, 
1717:	                  constructors, and methods 
1718:	      5.1.1.2 - The keyword private restricts access to the declaring class, while 
1719:	                 the keyword public allows access from classes outside the declaring class 
1720:	      5.1.1.3 - Classes are designated public 
1721:	      5.1.1.4 - Access to attributes should be kept internal to the class. Therefore, 
1722:	                 instance variables are designated  as private 
1723:	      5.1.1.5 - Constructors are designated public 
1724:	      5.1.1.6 - Access to behaviors can be internal or external to the class. Therefore, 
1725:	                 methods can be designated as either public or private 
1726:	   5.1.2 - Designate private visibility of instance variables to encapsulate the 
1727:	              attributes of an object
1728:	      5.1.2.1 - Data encapsulation is a technique in which the implementation details 
1729:	                 of a class are kept hidden from the user 
1730:	      5.1.2.2 - When designing a class, programmers make decisions about what data 
1731:	                 to make accessible and modifiable from an external class. Data can be either 
1732:	                 accessible or modifiable, or it can be both or neither 
1733:	      5.1.2.3 - Instance variables are encapsulated by using the private access 
1734:	                 modifier 
1735:	      5.1.2.4 - The provided accessor and mutator methods in a class allow client 
1736:	                 code to use and modify data 
1737:	Add your own example(s) here...
1738:	5.2 - Constructors  .......................................................................
1739:	   5.2.1 - Define instance variables for the attributes to be initialized through 
1740:	              the constructors of a class
1741:	      5.2.1.1 - An object’s state refers to its attributes and their values at a 
1742:	                 given time and is defined by instance variables belonging to the object. This 
1743:	                 creates a  "has-a" relationship between the object and its instance variables 
1744:	      5.2.1.2 - Constructors are used to set the initial state of an object, which 
1745:	                 should include initial values for all instance variables 
1746:	      5.2.1.3 - Constructor parameters are local variables to the constructor and 
1747:	                 provide data to initialize instance variables 
1748:	      5.2.1.4 - When a mutable object is a constructor parameter, the instance variable 
1749:	                 should be initialized with a copy of the referenced object. In this way, the 
1750:	                 instance variable is not an alias of the original object, and methods are 
1751:	                 prevented from modifying the state of the original object 
1752:	      5.2.1.5 - When no constructor is written, Java provides a no-argument constructor, 
1753:	                 and the instance variables are set to default values 
1754:	Add your own example(s) here...
1755:	5.3 - Documentation with Comments  ........................................................
1756:	   5.3.1 - Describe the functionality and use of program code through comments
1757:	      5.3.1.1 - Comments are ignored by the compiler and are not executed when the 
1758:	                 program is run 
1759:	      5.3.1.2 - Three types of comments in Java include /* */, which generates a 
1760:	                 block of comments, //, which generates a comment on one line, and /** */, 
1761:	                 which are Javadoc comments and are used to create API documentation 
1762:	      5.3.1.3 - A precondition is a condition that must be true just prior to the 
1763:	                 execution of a section of program code in order for the method to behave as 
1764:	                 expected. There is no expectation that the method will check to ensure preconditions 
1765:	                 are satisfied 
1766:	      5.3.1.4 - A postcondition is a condition that must always be true after the 
1767:	                 execution of a section of program code. Postconditions describe the outcome 
1768:	                 of the execution in terms of what is being returned or the state of an object 
1769:	      5.3.1.5 - Programmers write method code to satisfy the postconditions when 
1770:	                 preconditions are met 
1771:	Add your own example(s) here...
1772:	5.4 - Accessor Methods  ...................................................................
1773:	   5.4.1 - Define behaviors of an object through non-void methods without parameters 
1774:	              written in a class
1775:	      5.4.1.1 - An accessor method allows other objects to obtain the  value of 
1776:	                 instance variables or static variables 
1777:	      5.4.1.2 - A non-void method returns a single value. Its header includes the 
1778:	                 return type in place of the keyword void 
1779:	      5.4.1.3 - In non-void methods, a return expression compatible with the return 
1780:	                 type is evaluated, and a copy of that value is returned. This is referred 
1781:	                 to as "return by  value."  
1782:	      5.4.1.4 - When the return expression is a reference to an object, a copy of 
1783:	                 that reference is returned, not a copy of the object 
1784:	      5.4.1.5 - The return keyword is used to return the flow of control to the 
1785:	                 point immediately following where the method or constructor was called 
1786:	      5.4.1.6 - The toString method is an overridden method that is included in 
1787:	                 classes to provide a description of a specific object. It generally includes 
1788:	                 what values are stored in the instance data of the object 
1789:	      5.4.1.7 - If System.out.print or System.out.println is passed an object, that 
1790:	                 object’s toString method is called, and the returned string is printed 
1791:	Add your own example(s) here...
1792:	5.5 - Mutator Methods  ....................................................................
1793:	   5.5.1 - Define behaviors of an object through void methods with or without parameters 
1794:	              written in a class
1795:	      5.5.1.1 - A void method does not return a value. Its header contains the keyword 
1796:	                 void before the method name 
1797:	      5.5.1.2 - A mutator (modifier) method is often a void method that changes 
1798:	                 the values of instance variables or static variables 
1799:	Add your own example(s) here...
1800:	5.6 - Writing Methods  ....................................................................
1801:	   5.6.1 - Define behaviors of an object through non-void methods with parameters 
1802:	              written in a class
1803:	      5.6.1.1 - Methods can only access the private data and methods of a parameter 
1804:	                 that is a reference to an object when the parameter is the same type as the 
1805:	                 method’s enclosing class 
1806:	      5.6.1.2 - Non-void methods with parameters receive values through parameters, 
1807:	                 use those values, and return a computed value of the specified type 
1808:	      5.6.1.3 - It is good programming practice to not modify mutable objects that 
1809:	                 are passed as parameters unless required in the specification 
1810:	      5.6.1.4 - When an actual parameter is a primitive value, the formal parameter 
1811:	                 is initialized with a copy of that value. Changes to the formal parameter 
1812:	                 have no effect on the corresponding actual parameter 
1813:	      5.6.1.5 - When an actual parameter is a reference to an object, the formal 
1814:	                 parameter is initialized with a copy of that reference, not a copy of the 
1815:	                 object. If the reference is to a mutable object, the method or constructor 
1816:	                 can use this reference to alter the state of the object 
1817:	      5.6.1.6 - Passing a reference parameter results in the formal parameter and 
1818:	                 the actual parameter being aliases. They both refer to the same object 
1819:	Add your own example(s) here...
1820:	5.7 - Static Variables and Methods  .......................................................
1821:	   5.7.1 - Define behaviors of a class through static methods
1822:	      5.7.1.1 - Static methods are associated with the class, not objects of the 
1823:	                 class 
1824:	      5.7.1.2 - Static methods include the keyword static in the header before the 
1825:	                 method name 
1826:	      5.7.1.3 - Static methods cannot access or change the values of instance variables 
1827:	      5.7.1.4 - Static methods can access or change the values of static variables 
1828:	      5.7.1.5 - Static methods do not have a this reference and are unable to use 
1829:	                 the class’s instance variables or call non-static methods 
1830:	   5.7.2 - Define the static variables that belong to the class 
1831:	      5.7.2.1 - Static variables belong to the class, with all objects of a class 
1832:	                 sharing a single static variable 
1833:	      5.7.2.2 - Static variables can be designated as either public or private and 
1834:	                 are designated with the static keyword before the variable type 
1835:	      5.7.2.3 - Static variables are used with the class name and the dot operator, 
1836:	                 since they are associated with a class, not objects of a class 
1837:	Add your own example(s) here...
1838:	5.8 - Scope and Access  ...................................................................
1839:	   5.8.1 - Explain where variables can be used in the program code
1840:	      5.8.1.1 - Local variables can be declared in the body of constructors and 
1841:	                 methods. These variables may only be used within the constructor or method 
1842:	                 and cannot be declared to be public or private 
1843:	      5.8.1.2 - When there is a local variable with the same name as an instance 
1844:	                 variable, the variable name will refer to the local variable instead of the 
1845:	                 instance variable 
1846:	      5.8.1.3 - Formal parameters and variables declared in a method or constructor 
1847:	                 can only be used within that method or constructor 
1848:	      5.8.1.4 - Through method decomposition, a programmer breaks down a large problem 
1849:	                 into smaller subproblems by creating methods to solve each individual subproblem 
1850:	Add your own example(s) here...
1851:	5.9 - this Keyword  .......................................................................
1852:	   5.9.1 - Evaluate object reference expressions that use the keyword this
1853:	      5.9.1.1 - Within a non-static method or a constructor, the keyword this is 
1854:	                 a reference to the current object the object whose method or constructor is 
1855:	                 being called 
1856:	      5.9.1.2 - The keyword this can be used to pass the current object as an actual 
1857:	                 parameter in a method call 
1858:	Add your own example(s) here...
1859:	5.10 - Ethical and Social Implications of Computing Systems  ..............................
1860:	   5.10.1 - Explain the ethical and social implications of computing systems
1861:	      5.10.1.1 - System reliability is limited. Programmers should make an effort 
1862:	                 to maximize system reliability 
1863:	      5.10.1.2 - Legal issues and intellectual property concerns arise when creating 
1864:	                 programs 
1865:	      5.10.1.3 - The creation of programs has impacts on society, economies, and 
1866:	                 culture. These impacts can be beneficial and/or harmful 
1867:	Add your own example(s) here...
1868:	Unit 9 - Inheritance           ............................................................
1869:	9.1 - Creating Superclasses and Subclasses  ...............................................
1870:	   9.1.1 -  Create an inheritance relationship from a subclass to the superclass
1871:	      9.1.1.1 - A class hierarchy can be developed by putting common attributes 
1872:	                 and behaviors of related classes into a single class called a superclass 
1873:	      9.1.1.2 - Classes that extend a superclass, called subclasses, can draw upon 
1874:	                 the existing attributes and behaviors  of the superclass without repeating 
1875:	                 these in the code 
1876:	      9.1.1.3 - Extending a subclass from a superclass creates an "is-a" relationship 
1877:	                 from the subclass to the superclass 
1878:	      9.1.1.4 - The keyword extends is used to establish an inheritance relationship 
1879:	                 between a subclass and a superclass. A class can extend only one superclass 
1880:	Add your own example(s) here...
1881:	9.2 - Writing Constructors for Subclasses..................................................
1882:	   9.2.1- Create an inheritance relationship from a subclass to the Superclass
1883:	      9.2.1.1 - Constructors are not inherited 
1884:	      9.2.1.2 - The superclass constructor can be called from the first line of 
1885:	                 a subclass constructor by using the keyword super and passing appropriate 
1886:	                 parameters 
1887:	      9.2.1.3 - The actual parameters passed in the call to the superclass constructor 
1888:	                 provide values that the constructor can use to initialize the object’s instance 
1889:	                 variables 
1890:	      9.2.1.4 - When a subclass’s constructor does not explicitly call a superclass’s 
1891:	                 constructor using super, Java inserts a call to the superclass’s no-argument 
1892:	                 constructor
1893:	      9.2.1.5 - Regardless of whether the superclass constructor is called implicitly 
1894:	                 or explicitly, the process of calling superclass constructors continues until 
1895:	                 the Object constructor is called. At this  point, all of the constructors 
1896:	                 within the hierarchy execute beginning with the Object constructor 
1897:	Add your own example(s) here...
1898:	9.3 - Overriding Methods  .................................................................
1899:	   9.3.1 - Create an inheritance relationship from a subclass to the Superclass
1900:	      9.3.1.1 - Method overriding occurs when a public method in a subclass has 
1901:	                 the same method signature as a public method in the superclass 
1902:	      9.3.1.2 - Any method that is called must be defined within its own class or 
1903:	                 its superclass 
1904:	      9.3.1.3 - A subclass is usually designed to have modified (overridden) or 
1905:	                 additional methods or instance Variables 
1906:	      9.3.1.4 - A subclass will inherit all public methods from the superclass; 
1907:	                 these methods remain public in the subclass 
1908:	Add your own example(s) here...
1909:	9.4 - super Keyword  ......................................................................
1910:	   9.4.1 - Create an inheritance relationship from a subclass to the superclass
1911:	      9.4.1.1 - The keyword super can be used to call a superclass's constructors 
1912:	                 and methods 
1913:	      9.4.1.2 - The superclass method can be called in a subclass by using the keyword 
1914:	                 super with the method name and passing appropriate parameters 
1915:	Add your own example(s) here...
1916:	9.5 - Creating References Using Inheritance Hierarchies  ..................................
1917:	   9.5.1 - Define reference variables of a superclass to be assigned to an object 
1918:	              of a subclass in the same hierarchy
1919:	      9.5.1.1 - When a class S “is-a” class T, T is referred to as a superclass, 
1920:	                 and S is referred to as a subclass 
1921:	      9.5.1.2 - If S is a subclass of T, then assigning an object of type S to a 
1922:	                 reference of type T facilitates Polymorphism 
1923:	      9.5.1.3 - If S is a subclass of T, then a reference of type T can be used 
1924:	                 to refer to an object of type T or S 
1925:	      9.5.1.4 - Declaring references of type T, when S is a subclass of T, is useful 
1926:	                 in the following declarations: (a) Formal method parameters, (b) arrays — 
1927:	                 T[] var ArrayList<T> var 
1928:	Add your own example(s) here...
1929:	9.6 - Polymorphism  .......................................................................
1930:	   9.6.1 - Call methods in an inheritance relationship
1931:	      9.6.1.1 - Utilize the Object class through inheritance
1932:	      9.6.1.2 - At compile time, methods in or inherited by the declared type determine 
1933:	                 the correctness of a non-static method call 
1934:	      9.6.1.3 - At run-time, the method in the actual object type is executed for 
1935:	                 a non-static method call 
1936:	Add your own example(s) here...
1937:	9.7 - Object Superclass  ..................................................................
1938:	   9.7.1 - Call Object class methods through inheritance
1939:	      9.7.1.1 - The Object class is the superclass of all other classes in Java 
1940:	      9.7.1.2 - The Object class is part of the java.lang package 
1941:	      9.7.1.3 - The following Object class methods and constructors—including what 
1942:	                 they do and when they are used—are part of the Java Quick Reference: (a) boolean 
1943:	                 equals(Object other), (b) String toString() 
1944:	      9.7.1.4 - Subclasses of Object often override the equals and toString methods 
1945:	                 with class specific implementations 
1946:	Add your own example(s) here...
1947:	AP curriculum - Part 3.....................................................................
1948:	Unit 6 - Arrays............................................................................
1949:	6.1 - Array Creation and Access  ..........................................................
1950:	   6.1.1 - Represent collections of related primitive or object reference data using 
1951:	              one dimensional (1D - array objects)
1952:	      6.1.1.1 - The use of array objects allows multiple related items to be represented 
1953:	                 using a single variable 
1954:	      6.1.1.2 - The size of an array is established at the time of creation and 
1955:	                 cannot be changed 
1956:	      6.1.1.3 - Arrays can store either primitive data or object reference data 
1957:	      6.1.1.4 - When an array is created using the keyword new, all of its elements 
1958:	                 are initialized with a specific value based on the type of  elements: (a) 
1959:	                 Elements of type int are initialized to 0, (b) Elements of type double are 
1960:	                 initialized to 0.0, (c) Elements of type boolean are initialized to false, 
1961:	                 (d) Elements of a reference type are initialized to the reference value null. 
1962:	                 No objects are automatically created 
1963:	      6.1.1.5 - Initializer lists can be used to create and initialize arrays 
1964:	      6.1.1.6 - Square brackets [ ] are used to access and modify an element in 
1965:	                 a 1D array using an index 
1966:	      6.1.1.7 - The valid index values for an array are 0 through one less than 
1967:	                 the number of elements in the array, inclusive. Using an index value outside 
1968:	                 of this range will result in an ArrayIndexOutOfBoundsException being thrown 
1969:	Add your own example(s) here...
1970:	6.2 - Traversing Arrays  ..................................................................
1971:	   6.2.1 - Traverse the elements in a 1D array
1972:	      6.2.1.1 - Iteration statements can be used to access all the elements in an 
1973:	                 array. This is called traversing the array 
1974:	      6.2.1.2 - Traversing an array with an indexed for loop or while loop requires 
1975:	                 elements to be accessed using their indices 
1976:	      6.2.1.3 - Since the indices for an array start at 0 and end at the number 
1977:	                 of elements − 1, “off by one” errors are easy to make when traversing an array, 
1978:	                 resulting in an ArrayIndexOutOfBoundsException being thrown 
1979:	Add your own example(s) here...
1980:	6.3 - Enhanced for Loop for Arrays  .......................................................
1981:	   6.3.1 - Traverse the elements in a 1D array object using an enhanced for loop
1982:	      6.3.1.1 - An enhanced for loop header includes a variable, referred to as 
1983:	                 the enhanced for loop variable 
1984:	      6.3.1.2 - For each iteration of the enhanced for loop, the enhanced for loop 
1985:	                 variable is assigned a copy of an element without using its index 
1986:	      6.3.1.3 - Assigning a new value to the enhanced for loop variable does not 
1987:	                 change the value stored in the array 
1988:	      6.3.1.4 - Program code written using an enhanced for loop to traverse and 
1989:	                 access elements in an array can be rewritten using an indexed for loop or 
1990:	                 a while loop 
1991:	Add your own example(s) here...
1992:	6.4 - Developing Algorithms Using Arrays  .................................................
1993:	   6.4.1 - For algorithms in the context of a particular specification that requires 
1994:	              the use of array traversals: (a) Identify standard algorithms, (b) Modify standard 
1995:	              algorithms, (c) Develop an algorithm
1996:	      6.4.1.1 - There are standard algorithms that utilize array traversals to: 
1997:	                 (a) Determine a minimum or maximum value, (b) Compute a sum, average, or mode, 
1998:	                 (c) Determine if at least one element has a particular property, (d) Determine 
1999:	                 if all elements have a particular property, (e) Access all consecutive pairs 
2000:	                 of elements, (f) Determine the presence or absence of  duplicate elements, 
2001:	                 (g) Determine the number of elements meeting specific criteria 
2002:	      6.4.1.2 - There are standard array algorithms that utilize traversals to: 
2003:	                 (a) Shift or rotate elements left or right, (b) Reverse the order of the elements 
2004:	Add your own example(s) here...
2005:	Unit 8 - 2D Arrays       ..................................................................
2006:	8.1 - 2D Arrays  ..........................................................................
2007:	   8.1.1 - Represent collections of related primitive or object reference data using 
2008:	              two-dimensional (2D) array objects
2009:	      8.1.1.1 - 2D arrays are stored as arrays of arrays. Therefore, the way 2D 
2010:	                 arrays are created and indexed is similar to 1D array objects 
2011:	      8.1.1.2 - For the purposes of the exam, when accessing the element at arr[first][second], 
2012:	                 the first index is used for rows, the second index is used for columns 
2013:	      8.1.1.3 - The initializer list used to create and initialize a 2D array consists 
2014:	                 of initializer lists that represent 1D arrays 
2015:	      8.1.1.4 - The square brackets [row][col] are used to access and modify an 
2016:	                 element in a 2D array 
2017:	      8.1.1.5 - “Row-major order” refers to an ordering of 2D array elements where 
2018:	                 traversal occurs across each row, while “column-major order” traversal occurs 
2019:	                 down each column 
2020:	Add your own example(s) here...
2021:	8.2 - Traversing 2D Arrays  ...............................................................
2022:	   8.2.1 - For 2D array objects: (a) Traverse using nested for loops, (b) Traverse 
2023:	              using nested enhanced for loops
2024:	      8.2.1.1 - Nested iteration statements can be written to traverse the 2D array 
2025:	                 in “row-major order” or “column-major Order.” 
2026:	      8.2.1.2 - The outer loop of a nested enhanced for loop used to traverse a 
2027:	                 2D array traverses the rows. Therefore, the enhanced for loop variable must 
2028:	                 be the type of each row, which is a 1D array. The inner loop traverses a single 
2029:	                 row.  Therefore, the inner enhanced for loop variable must be the same type 
2030:	                 as the elements stored in the 1D array       
2031:	Add your own example(s) here...
2032:	AP curriculum - Part 4.....................................................................
2033:	Unit 7 - Array List........................................................................
2034:	7.1 - Introduction to ArrayList  ..........................................................
2035:	   7.1.1 - Represent collections of related object reference data using ArrayList 
2036:	              objects
2037:	      7.1.1.1 - An ArrayList object is mutable and contains object references
2038:	      7.1.1.2 - The ArrayList constructor ArrayList() constructs an empty list 
2039:	      7.1.1.3 - Java allows the generic type ArrayList<E>, where the generic type 
2040:	                 E specifies the type of the elements 
2041:	      7.1.1.4 - When ArrayList<E> is specified, the types of the reference parameters 
2042:	                 and return type when using the methods are type E 
2043:	      7.1.1.5 - ArrayList<E> is preferred over ArrayList because it allows the compiler 
2044:	                 to find errors that would otherwise be found at run-time 
2045:	Add your own example(s) here...
2046:	7.2 - ArrayList Methods  ..................................................................
2047:	   7.2.1 - Represent collections of related object reference data using ArrayList 
2048:	              objects
2049:	      7.2.1.1 - The ArrayList class is part of the java.util package.  An import 
2050:	                 statement can be used to make this class available for use in the program 
2051:	      7.2.1.2 - The following ArrayList methods—including what they do and when 
2052:	                 they are used—are part of the Java Quick Reference: (a) int size() - Returns 
2053:	                 the number of elements in the list, (b) boolean add(E obj) - Appends obj to 
2054:	                 end of list; returns true, (c) void add(int index, E obj) - Inserts obj at 
2055:	                 position index (0 <= index <= size), moving elements at position index and 
2056:	                 higher to the right (adds 1 to their indices) and adds 1 to size, (d) E get(int 
2057:	                 index) - Returns the element at position index in the list, (e) E set(int 
2058:	                 index, E obj) — Replaces the element at position index with obj; returns the 
2059:	                 element formerly at position index E remove(int index) — Removes element from 
2060:	                 position index, moving elements at position index + 1 and higher to the left 
2061:	                 (subtracts 1 from their indices) and subtracts 1 from  size;  returns the 
2062:	                 element formerly at position index 
2063:	Add your own example(s) here...
2064:	7.3 - Traversing ArrayLists  ..............................................................
2065:	   7.3.1 - For ArrayList objects: (a) Traverse using a for or while loop, (b) Traverse 
2066:	              using an enhanced for loop
2067:	      7.3.1.1 - Iteration statements can be used to access all the elements in an 
2068:	                 ArrayList. This is called traversing the ArrayList 
2069:	      7.3.1.2 - Deleting elements during a traversal of an ArrayList requires using 
2070:	                 special techniques to avoid skipping elements 
2071:	      7.3.1.3 - Since the indices for an ArrayList start at 0 and end at the number 
2072:	                 of elements − 1, accessing an index value outside of this range will result 
2073:	                 in an ArrayIndexOutOfBoundsException being thrown 
2074:	      7.3.1.4 - Changing the size of an ArrayList while traversing it using an enhanced 
2075:	                 for loop can result in a ConcurrentModificationException being thrown. Therefore, 
2076:	                 when using an enhanced for loop to traverse an ArrayList, you should not add 
2077:	                 or remove elements 
2078:	Add your own example(s) here...
2079:	7.4 - Developing Algorithms Using ArrayLists  .............................................
2080:	   7.4.1 - For algorithms in the context of a particular specification that requires 
2081:	              the use of ArrayList traversals: (a) Identify standard algorithms, (b) Modify 
2082:	              standard algorithms, (c) Develop an algorithm
2083:	      7.4.1.1 - There are standard ArrayList algorithms that utilize traversals 
2084:	                 to: (a) Insert elements, (b) Delete elements, (c) Apply the same standard 
2085:	                 algorithms that are used with 1D arrays 
2086:	      7.4.1.2 - Some algorithms require multiple String, array, or ArrayList objects 
2087:	                 to be traversed simultaneously
2088:	Add your own example(s) here...
2089:	7.5 - Searching  ..........................................................................
2090:	   7.5.1 - Apply sequential/linear search algorithms to search for specific information 
2091:	              in array or ArrayList objects
2092:	      7.5.1.1 - There are standard algorithms for searching 
2093:	      7.5.1.2 - Sequential/linear search algorithms check each element in order 
2094:	                 until the desired value is found or all elements in the array or ArrayList 
2095:	                 have been checked 
2096:	Add your own example(s) here...
2097:	7.6 - Sorting  ............................................................................
2098:	   7.6.1 - Apply selection sort and insertion sort algorithms to sort the elements 
2099:	              of array or ArrayList objects
2100:	      7.6.1.1 - Selection sort and insertion sort are iterative sorting algorithms 
2101:	                 that can be used to sort elements in an array or ArrayList 
2102:	   7.6.2 - Compute statement execution counts and informal run-time comparison of 
2103:	              sorting algorithms
2104:	      7.6.2.1 - Informal run-time comparisons of program code segments  can be made 
2105:	                 using statement execution counts 
2106:	Add your own example(s) here...
2107:	7.7 - Ethical Issues Around Data Collection  ..............................................
2108:	   7.7.1 - Explain the risks to privacy from collecting and storing personal data 
2109:	              on computer systems
2110:	      7.7.1.1 - When using the computer, personal privacy is at risk.  Programmers 
2111:	                 should attempt to safeguard personal privacy 
2112:	      7.7.1.2 - Computer use and the creation of programs have an impact on personal 
2113:	                 security. These impacts can be beneficial and/or harmful 
2114:	Add your own example(s) here...
2115:	Unit 10 - Recursion........................................................................
2116:	10.1 - Recursion  .........................................................................
2117:	   10.1.1 - Determine the result of executing recursive methods
2118:	      10.1.1.1 - A recursive method is a method that calls itself 
2119:	      10.1.1.2 - Recursive methods contain at least one base case, which halts the 
2120:	                 recursion, and at least one recursive call 
2121:	      10.1.1.3 - Each recursive call has its own set of local variables, including 
2122:	                 the formal parameters 
2123:	      10.1.1.4 - Parameter values capture the progress of a recursive process, much 
2124:	                 like loop control variable values capture the progress of a loop 
2125:	      10.1.1.5 - Any recursive solution can be replicated through the use of an 
2126:	                 iterative approach 
2127:	      10.1.1.6 - Recursion can be used to traverse String, array, and ArrayList 
2128:	                 objects 
2129:	Add your own example(s) here...
2130:	10.2 - Recursive Searching and Sorting  ...................................................
2131:	   10.2.1 - Apply recursive search algorithms to information in String, 1D array, 
2132:	              or ArrayList objects
2133:	      10.2.1.1 - Data must be in sorted order to use the binary search algorithm 
2134:	      10.2.1.2 - The binary search algorithm starts at the middle of a sorted array 
2135:	                 or ArrayList and eliminates half of the array or ArrayList in each iteration 
2136:	                 until the desired value is found or all elements have been eliminated 
2137:	      10.2.1.3 - Binary search can be more efficient than sequential/linear search 
2138:	      10.2.1.4 - The binary search algorithm can be written either iteratively or 
2139:	                 recursively 
2140:	   10.2.2 - Apply recursive algorithms to sort elements of array or ArrayList objects
2141:	      10.2.2.1 - Merge sort is a recursive sorting algorithm that can be used to 
2142:	                 sort elements in an array or ArrayList  
2143:	Add your own example(s) here...
2144:	Computer Science 42SAP practice tests......................................................
2145:	AP Practice Test 1.........................................................................
2146:	// Question 1...
2147:	Consider the following code segment.
2148:	int a = 5;
2149:	int b = 2;
2150:	double c = 3.0;
2151:	System.out.println(5 + a / b * c - 1);
2152:	What is printed when the code segment is executed?
2153:	(A) 0.666666666666667
2154:	(B) 9.0
2155:	(C) 10.0
2156:	(D) 11.5
2157:	(E) 14.0
2158:	// Answer 1...
2159:	C
2160:	// Question 2...
2161:	Which of the following statements assigns a random
2162:	integer between 25 and 60, inclusive to rn?
2163:	(A) int rnA = (int)(Math.random() * 25) + 36;
2164:	(B) int rnB = (int)(Math.random() * 25) + 60;
2165:	(C) int rnC = (int)(Math.random() * 26) + 60;
2166:	(D) int rnD = (int)(Math.random() * 36) + 25;
2167:	(E) int rnE = (int)(Math.random() * 60) + 25;
2168:	// Answer 2...
2169:	A
2170:	D
2171:	// Question 3...
2172:	Which of the following best describes the value
2173:	of the Boolean expression shown below?
2174:	a && !(b || a)
2175:	(A) The value is always true
2176:	(B) The value is always false
2177:	(C) The value is true when a has the value 
    false, and is false otherwise
2178:	(D) The value is true when b has the value 
    false, and is false otherwise
2179:	(E) The value is true when either a or b has 
    the value true, and is false otherwise
2180:	// Answer 3...
2181:	B
2182:	// Question 4...
2183:	Consider the following code segment
2184:	int val = 48;
2185:	int div = 6;
2186:	while((val % 2 == 0) && div > 0) {
2187:	    if (val % div == 0) {
2188:	        System.out.print(val + " ");
2189:	    }
2190:	    val /= 2;
2191:	    div--;
2192:	}
2193:	What is printed when the code segment is executed?
2194:	(A) 48 12 6
2195:	(B) 48 12 6 3
2196:	(C) 48 12 6 3 1
2197:	(D) 48 24 12 6
2198:	(E) 48 24 12 6 3
2199:	// Answer 4...
2200:	A
2201:	// Question 5...
2202:	Which of the following code segments is equivalent to the code below
2203:	if (x >= 1) x = x * 3;
2204:	if (x > 3) x = 0;
2205:	(A) x = 0
2206:	(B) if (x > 1) x = 0;
2207:	(C) if (x > 3) x = 0;
2208:	(D) if (x >= 1) x = 0;
2209:	(E) none of the above
2210:	// Answer 5...
2211:	B
2212:	// Question 6...
2213:	When is the following Boolean expression true
2214:	(a and b are integers)?
2215:	(a < b) && !(b > a)
2216:	(A) Always true
2217:	(B) Never true
2218:	(C) a = b
2219:	(D) a < b
2220:	(E) a > b
2221:	// Answer 6...
2222:	B
2223:	// Question 7...
2224:	Consider the following code segment
2225:	int i = a random number such that 1 <= i <= n;
2226:	for (int a = 2; a <= i; a++)
2227:	    for (int b = 1; b < i; b++)
2228:	        System.out.println("*");
2229:	(A) 0
2230:	(B) 1
2231:	(C) 2
2232:	(D) n - 1
2233:	(E) n - 2
2234:	// Answer 7...
2235:	B
2236:	// Question 8...
2237:	Consider the following code segment
2238:	int p = 5;
2239:	int q = 2;
2240:	int sum = 0;
2241:	while (p <= 8) {
2242:	    sum += p % q;
2243:	    p++;
2244:	    q++;
2245:	}
2246:	(A) 1
2247:	(B) 0
2248:	(C) 13
2249:	(D) 7
2250:	(E) 4
2251:	// Answer 8...
2252:	D
2253:	// Question 9...
2254:	Consider the following code segment
2255:	for (int i = 0; i <= 3; i++) {
2256:	    for (int j = 1; j <= 5; j+=2) {
2257:	        System.out.println("*");
2258:	    }
2259:	}
2260:	(A) 3
2261:	(B) 6
2262:	(C) 9
2263:	(D) 12
2264:	(E) 15
2265:	// Answer 9...
2266:	D
2267:	// Question 10...
2268:	What are the values of a and b after the for loop
2269:	finishes?
2270:	int a = 10;
2271:	int b = 3;
2272:	int t = 0;
2273:	for (int i = 1; i < 4; i++) {
2274:	    t = a;
2275:	    a = i + b;
2276:	    b = t - i;
2277:	}
2278:	(A) a = 5 and b = -2
2279:	(B) a = 6 and b = 7
2280:	(C) a = 6 and b = 3
2281:	(D) a = 12 and b = 1
2282:	(E) a = 5 and b = 8
2283:	// Answer 10...
2284:	E
2285:	AP Practice Test 2.........................................................................
2286:	// Question 1...
2287:	Consider the following class definition
2288:	public class Example
2289:	{
2290:	     private int x;
2291:	     // constructor not shown
2292:	}
2293:	Which of the following is a correct header for a
2294:	method that would return the value of the private
2295:	instance variable x so that it can be used in a
2296:	class other than Example?
2297:	(A) private int getX()
2298:	(B) private void getX()
2299:	(C) public int getX()
2300:	(D) public void getX()
2301:	(E) public void getX(int x)
2302:	// Answer 1...
2303:	C
2304:	// Question 2...
2305:	Consider the following class definitions
2306:	public class Thing1 {
2307:	     public void calc(int n) {
2308:	          n *= 3;
2309:	          System.out.print(n);
2310:	     }
2311:	}
2312:	public class Thing2 extends Thing1 {
2313:	     public void calc(int n) {
2314:	          n += 2;
2315:	          super.calc(n);
2316:	          System.out.print(n);
2317:	     }
2318:	}
2319:	The following code seqment appears in a class
2320:	other than Thing1 or Thing2
2321:	Thing1 t = new Thing2();
2322:	t.calc(2);
2323:	What is printed as a result of executing the
2324:	code segment?
2325:	(A) 4
2326:	(B) 6
2327:	(C) 68
2328:	(D) 124
2329:	(E) 1212
2330:	// Answer 2...
2331:	D
2332:	// Question 3...
2333:	Consider the following class definitions.
2334:	public class Student {
2335:	    public String getFood() {
2336:	        return "Pizza";
2337:	    }
2338:	    public String getInfo() {
2339:	        return "Studying";
2340:	    }
2341:	}
2342:	public class GradStudent extends Student {
2343:	    public String getFood() {
2344:	        return "Taco";
2345:	    }
2346:	    public String getInfo() {
2347:	        super.getInfo();
2348:	        return "Eating";
2349:	    }
2350:	}
2351:	What is printed when the following code is
2352:	executed?
2353:	Student s = new GradStudent();
2354:	System.out.println(s.getInfo());
2355:	(A) Pizza
2356:	(B) Taco
2357:	(C) Studying
2358:	(D) Eating
2359:	(E) Studying
2360:	    Eating
2361:	// Answer 3...
2362:	D
2363:	// Question 4...
2364:	Given the following class declarations:
2365:	public class Car {
2366:	    private String make;
2367:	    public Car(String theMake) {
2368:	        make = theMake;
2369:	    }
2370:	    public String getMake() {
2371:	        return make;
2372:	    }
2373:	}
2374:	public class ElectricCar extends Car {
2375:	    public ElectricCar() {
2376:	        super("Ford");
2377:	    }
2378:	    public ElectricCar(String theMake) {
2379:	        super(theMake);
2380:	    } 
2381:	}
2382:	Which of the following will cause a compile
2383:	time error?
2384:	(A) Car myCar = new Car();
2385:	(B) Car myCar1 = new ElectricCar();
2386:	(C) ElectricCar myCar2 = new ElectricCar("Ford");
2387:	(D) Car myCar3 = new Car("Ford");
2388:	(E) Car myCar4 = new ElectricCar("Ford");
2389:	// Answer 4...
2390:	A
2391:	// Question 5...
2392:	Given the following declarations.
2393:	public class Vehicle {
2394:	    public void test(Car x, SportsCar y) { }
2395:	}
2396:	public class Car extends Vehicle {
2397:	}
2398:	public class SportsCar extends Car {
2399:	}
2400:	Also consider the following code that appears
2401:	in a different class.
2402:	Vehicle v = new Vehicle();
2403:	Car c = new Car();
2404:	SportsCar sporty = new SportsCar();
2405:	Which of the following is a correct call to test ?
2406:	(A) v.test(sporty, v);
2407:	(B) sporty.test(c, c);
2408:	(C) v.test(sporty, c);
2409:	(D) sporty.test(sporty, v);
2410:	(E) c.test(sporty, sporty);
2411:	// Answer 5...
2412:	E
2413:	// Question 6...
2414:	Class C extends class B, which extends class A. 
2415:	Also, all of the three classes implement a public
2416:	method test(). How can a method in an object of
2417:	class C invoke the test() method defined in class
2418:	A (without creating a new instance of class A)?
2419:	(A) test();
2420:	(B) super.super.test();
2421:	(C) super.test();
2422:	(D) this.test();
2423:	(E) There is no way to call a method in a 
2424:	    grandparent class from a grandchild class
2425:	// Answer 6...
2426:	E
2427:	// Question 7...
2428:	Given the following class declarations. Assume
2429:	that Parent p = new Child(); appears in a client
2430:	program. What is the result of the call p.m1();
2431:	public class Parent {
2432:	    public void m1() {
2433:	        System.out.print("pm1");
2434:	        m2();
2435:	    }
2436:	    public void m2() {
2437:	        System.out.print("pm2");
2438:	    }
2439:	}
2440:	public class Child extends Parent {
2441:	    public void m1() {
2442:	        super.m1();
2443:	        System.out.print("cm1");
2444:	    }
2445:	    public void m2() {
2446:	        super.m2();
2447:	        System.out.print("cm2");
2448:	    }
2449:	}
2450:	(A) pm1pm2cm2cm1
2451:	(B) pm1pm2
2452:	(C) pm1pm2cm1cm2
2453:	(D) pm1cm1
2454:	(E) pm1
2455:	// Answer 7...
2456:	pm1pm2cm2cm1// Question 8...
2457:	Given the following class declarations.
2458:	public class Animal {
2459:	    public void eat() {
2460:	        System.out.println("AE");
2461:	    }
2462:	}
2463:	public class Bear extends Animal {
2464:	    public void growl() {
2465:	        System.out.println("BG");
2466:	    }
2467:	}
2468:	Assume the following declaration is in a 
2469:	different class.
2470:	Animal b = new Bear();
2471:	Which of the following will compile without error?
2472:	I.   b.eat();
2473:	II.  b.growl();
2474:	III. ((Bear)b).growl();
2475:	(A) I only
2476:	(B) II only
2477:	(C) III only
2478:	(D) I and III only
2479:	(E) I, II, and III
2480:	// Answer 8...
2481:	B
2482:	// Question 9...
2483:	Consider the following partial class definitions.
2484:	public class C1 {
2485:	    private int num;
2486:	    private String name;
2487:	    public C1(int theNum) {
2488:	        num = theNum
2489:	    } 
2490:	    public C1(String theName) {
2491:	        name = theName;
2492:	    }
2493:	}
2494:	public class C2 extends C1 {
2495:	    // methods not shown
2496:	}
2497:	Which of the following constructors are valid for
2498:	C2?
2499:	I. public C2() { }
2500:	II. public C2(int quan) { super(quan); }
2501:	III. public C2(String label) { super(label); }
2502:	(A) All three are valid
2503:	(B) II only
2504:	(C) III only
2505:	(D) II and III
2506:	(E) None are valid
2507:	// Answer 9...
2508:	D
2509:	// Question 10...
2510:	Given the following class definition. What are 
2511:	the values of x, y, and z just before method2
2512:	returns?
2513:	public class Class1 {
2514:	    public int method1(int a, int b) {
2515:	        int temp = a;
2516:	        a = b;
2517:	        b = temp;
2518:	        return b;
2519:	    }  
2520:	    public void method2() {
2521:	        int x = 3;
2522:	        int y = 5;
2523:	        int z = method1(x, y);
2524:	    }
2525:	}
2526:	(A) x=3,y=3,z=3
2527:	(B) x=3,y=5,z=3
2528:	(C) x=5,y=3,z=5
2529:	(D) x=5,y=3,z=3
2530:	(E) x=3,y=5,z=5
2531:	// Answer 10...
2532:	B
2533:	AP Practice Test 3.........................................................................
2534:	// Section 1...
2535:	For the next two Free response questions, 
2536:	refer to the description below...
2537:	A travel agency maintains a list of information 
2538:	about airline flights. Flight information 
2539:	includes a departure time and an arrival time.
2540:	You may assume that the two times occur on the 
2541:	same day. These times are represented by 
2542:	objects of the Time class. The declaration for
2543:	the Time class is shown below. It includes a 
2544:	method which returns the difference (in minutes)
2545:	between the current Time object and another Time
2546:	object. 
2547:	public class Time {
2548:	     /** 
2549:	      * @return difference, in minutes, between this
2550:	      * time and other; difference is negative
2551:	      * if other is earlier than this time
2552:	      */
2553:	     public int minutesUntil(Time other) {
2554:	          /* implementation not shown */
2555:	     }
2556:	     // There may be instance variables, constructors,
2557:	     // and methods that are not shown.
2558:	}
2559:	For example, assume that t1 and t2 are Time 
2560:	objects where t1 represents 1:00 p.m. and t2 
2561:	represents 2:15 p.m. The call t1.minutesUntil(t2) 
2562:	will return 75 and the call t2.minutesUntil(t1) 
2563:	will return -75. The declaration for the Flight class 
2564:	is shown below. It has methods to access the 
2565:	departure time and the arrival time of a flight. 
2566:	You may assume that the departure time of a 
2567:	flight is earlier than its arrival time.
2568:	public class Flight {
2569:	      /** @return time at which the flight departs */
2570:	      public Time getDepartureTime() {
2571:	           /* implementation not shown */ 
2572:	      }
2573:	      /** @return time at which the flight arrives */
2574:	      public Time getArrivalTime() {
2575:	           /* implementation not shown */ 
2576:	      }
2577:	      // There may be instance variables, constructors, 
2578:	      // and methods that are not shown.
2579:	}
2580:	A trip consists of a sequence of flights and is 
2581:	represented by the Trip class. The Trip class 
2582:	contains a List of Flight objects that are stored 
2583:	in chronological order. You may assume that for 
2584:	each flight after the first flight in the list, 
2585:	the departure time of the flight is later than 
2586:	the arrival time of the preceding flight in the 
2587:	list. A partial declaration of the Trip class is 
2588:	shown below. You will write two methods for the 
2589:	Trip class.
2590:	public class Trip {
2591:	     /** 
2592:	       * The list of flights (if any) that make up 
2593:	       * this trip, stored in chronological order
2594:	       */
2595:	     private List<Flight> flights;
2596:	     /** 
2597:	       * @return the number of minutes from the 
2598:	       * departure of the first flight to the arrival 
2599:	       * of the last flight if there are one or more 
2600:	       * flights in the trip; 0, if there are no 
2601:	       * flights in the trip
2602:	       */
2603:	     public int getDuration() {
2604:	          /* to be implemented in part (a) */ 
2605:	     }
2606:	     /** 
2607:	       * Precondition: the departure time for each 
2608:	       * flight is later than the arrival time of its 
2609:	       * preceding flight
2610:	       * @return the smallest number of minutes 
2611:	       * between the arrival of a flight and the 
2612:	       * departure of the flight immediately after it, 
2613:	       * if there are two or more flights in the 
2614:	       * trip; -1, if there are fewer than two flights 
2615:	       * in the trip
2616:	       */
2617:	     public int getShortestLayover() {
2618:	          /* to be implemented in part (b) */
2619:	     }
2620:	       // There may be instance variables, constructors,
2621:	       // and methods that are not shown
2622:	}
2623:	// Question 1...
2624:	Complete method getDuration below.  
2625:	// An answer could be...
2626:	public int getDuration() {
2627:	    int totalDuration = 0;
2628:	    for (Flight flight : flights) {
2629:	        Time departure = flight.getDepartureTime();
2630:	        Time arrival   = flight.getArrivalTime();
2631:	        int  duration  = departure.minutesUntil(arrival);
2632:	        totalDuration  = totalDuration + duration;
2633:	    }
2634:	    return totalDuration;
2635:	}
2636:	// Question 2...
2637:	Write the Trip method getShortestLayover. A 
2638:	layover is the number of minutes from the arrival 
2639:	of one flight in a trip to the departure of the 
2640:	flight immediately after it. If there are two or 
2641:	more flights in the trip, the method should return 
2642:	the shortest layover of the trip; otherwise, it 
2643:	should return -1. For example, assume that the 
2644:	instance variable flights of a Trip object vacation 
2645:	contains the following flight information.
2646:	          Departure   Arrival   Layover
2647:	            Time      Time     (minutes)
2648:	         +---------+----------+
2649:	Flight 0 | 11:30am |  12:15pm |
2650:	         +---------+----------+ }  60
2651:	Flight 1 |  1:15pm |   3:45pm |
2652:	         +---------+----------+ }  15
2653:	Flight 2 |  4:00pm |   6:45pm |
2654:	         +---------+----------+ }  210
2655:	Flight 3 | 10:15pm |  11:00pm |
2656:	         +---------+----------+
2657:	The call vacation.getShortestLayover() should 
2658:	return 15. Complete method getShortestLayover() 
2659:	below.
2660:	public int getShortestLayover()
2661:	// An answer could be...
2662:	public int getShortestLayover() {
2663:	    if (flights.isEmpty()) return -1;
2664:	    int shortestLayover = Integer.MAX_VALUE;
2665:	    int i = 0;
2666:	    while (i < flights.size()) {
2667:	        Flight currentFlight = flights.get(i);
2668:	        i++;
2669:	        Flight nextFlight    = flights.get(i);
2670:	        Time arrival         = currentFlight.getArrivalTime();
2671:	        Time departure       = nextFlight.getDepartureTime();
2672:	        int layover = Math.abs(arrival.minutesUntil(departure));
2673:	        if (layover < shortestLayover) {
2674:	            shortestLayover = layover;
2675:	        }
2676:	        i++;
2677:	    }
2678:	    return shortestLayover;
2679:	}
2680:	// Section 1...
2681:	For the next three Free response questions, refer 
2682:	to the description below...
2683:	Consider the hierarchy of classes shown in the 
2684:	following diagram
2685:	         +----------+ 
2686:	         |    Pet   |
2687:	         +----------+
2688:	            /    \
2689:	 +----------+    +----------+
2690:	 |    Cat   |    |    Dog   |
2691:	 +----------+    +----------+
2692:	                       \
2693:	                       +----------+
2694:	                       | Loud Dog |
2695:	                       +----------+
2696:	Note that a Cat 'is-a' Pet, a Dog 'is-a' Pet, and 
2697:	a LoudDog 'is-a' Dog. The class Pet is specified 
2698:	as an abstract class as shown in the following 
2699:	declaration. Each Pet has a name that is 
2700:	specified when it is constructed.
2701:	public abstract class Pet {
2702:	    private String name;
2703:	    public Pet(String petName) {
2704:	        name = petName;
2705:	    }
2706:	    public String getName() {
2707:	        return name;
2708:	    }
2709:	    public abstract String speak();
2710:	}
2711:	The subclass Dog has the partial class 
2712:	declaration shown below.
2713:	public class Dog extends Pet {
2714:	    public Dog(String petName) {
2715:	        /* implementation not shown */
2716:	    }
2717:	    public String speak() {
2718:	        /* implementation not shown */
2719:	    }
2720:	}
2721:	// Question 3...
2722:	Given the class hierarchy shown above, write a 
2723:	complete class declaration for the class Cat, 
2724:	including implementations of its constructor 
2725:	and method(s). The Cat method speak returns 
2726:	'meow' when it is invoked.
2727:	// An answer could be...
2728:	public class Cat extends Pet {
2729:	    public Cat(String petName) {
2730:	        super(petName);
2731:	    }
2732:	    public String speak() {
2733:	        return "meow";
2734:	    }
2735:	}
2736:	// Question 4...
2737:	Assume that class Dog has been declared as shown 
2738:	at the beginning of the question. If the String 
2739:	dog-sound is returned by the Dog method speak, 
2740:	then the LoudDog method method speak returns a 
2741:	String containing dog-sound repeated two times. 
2742:	Given the class hierarchy shown previously, 
2743:	write a complete class declaration for the class 
2744:	LoudDog including implementations of its 
2745:	constructor and method(s).
2746:	// An answer could be...
2747:	public class LoudDog extends Dog {
2748:	    public LoudDog(String petName) {
2749:	        super(petName);
2750:	    }
2751:	    public String speak() {
2752:	        return super.speak() + super.speak();
2753:	    }
2754:	}
2755:	// Question 5...
2756:	Consider the following partial declaration of 
2757:	class Kennel
2758:	public class Kennel {
2759:	    private ArrayList<Pet> petList;
2760:	     /**
2761:	      * For every Pet in the kennel, prints the name 
2762:	      * followed by the result of a call to its speak 
2763:	      * method, one line per Pet
2764:	      */
2765:	     public void allSpeak() {
2766:	        /* to be implemented */
2767:	     }
2768:	     // There may be instance variables, constructors, 
2769:	     // and methods that are not shown
2770:	}
2771:	Write the Kennel method allSpeak For each Pet in 
2772:	the kennel, allSpeak prints a line with the name 
2773:	of the Pet followed by the result of a call to 
2774:	its speak method. In writing allSpeak you may use 
2775:	any of the methods defined for any of the classes 
2776:	specified for this problem. Assume that these 
2777:	methods work as specified, regardless of what 
2778:	you wrote in previous questions. Complete method
2779:	allSpeak below
2780:	public void allSpeak()
2781:	// An answer could be...
2782:	public void allSpeak() {
2783:	    for (Pet pet : petList) {
2784:	        System.out.println(pet.getName() + pet.speak());
2785:	    }
2786:	}
2787:	AP Practice Test 4.........................................................................
2788:	// Question 1...
2789:	(A) 
2790:	(B) 
2791:	(C) 
2792:	(D) 
2793:	(E) 
2794:	// Answer 1...
2795:	// Question 2...
2796:	(A) 
2797:	(B) 
2798:	(C) 
2799:	(D) 
2800:	(E) 
2801:	// Answer 2...
2802:	// Question 3...
2803:	(A) 
2804:	(B) 
2805:	(C) 
2806:	(D) 
2807:	(E) 
2808:	// Answer 3...
2809:	// Question 4...
2810:	(A) 
2811:	(B) 
2812:	(C) 
2813:	(D) 
2814:	(E) 
2815:	// Answer 4...
2816:	// Question 5...
2817:	(A) 
2818:	(B) 
2819:	(C) 
2820:	(D) 
2821:	(E) 
2822:	// Answer 5...
2823:	// Question 6...
2824:	(A) 
2825:	(B) 
2826:	(C) 
2827:	(D) 
2828:	(E) 
2829:	// Answer 6...
2830:	// Question 7...
2831:	(A) 
2832:	(B) 
2833:	(C) 
2834:	(D) 
2835:	(E) 
2836:	// Answer 7...
2837:	// Question 8...
2838:	(A) 
2839:	(B) 
2840:	(C) 
2841:	(D) 
2842:	(E) 
2843:	// Answer 8...
2844:	// Question 9...
2845:	(A) 
2846:	(B) 
2847:	(C) 
2848:	(D) 
2849:	(E) 
2850:	// Answer 9...
2851:	// Question 10...
2852:	(A) 
2853:	(B) 
2854:	(C) 
2855:	(D) 
2856:	(E) 
2857:	// Answer 10...
2858:	Computer Science 42SAP Post Secondary Content:.............................................
2859:	Fun Friday (and Thursday) Content:.........................................................
2860:	More post secondary content:...............................................................
2861:	Permanent Storage Post Secondary Content:..................................................
2862:	// Learn about 'error traps'
2863:	Divide by zero -> java.lang.ArithmeticException: / by zero
2864:	// Create sample data to use
2865:	// Save ONE piece of data to that permanent file
2866:	File write error
2867:	// Now involve the user to get a file name
2868:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2869:	File already exists!
2870:	// Open file with one line (no user involvment)
2871:	// Open file with multiple lines (user picks file)
2872:	~~~ SIMULATED {File Chooser} DIALOG: null ~~~ 
2873:	This line read was �� sr utility.collections.LinkedList�̉-�� I 	NOT_FOUNDI lengthI longestWordL headt Lutility/collections/Node;L tailq ~ xp����   d   +sr utility.collections.Node5�����2 ... (line shortened) ...
2874:	This line read was opponentScoreL opponentNamet Ljava/lang/String;xp           t  sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~ 	sq ~ sq ~            q ~  ... (line shortened) ...
2875:	This line read was q ~ pq ~ �
2876:	// Class to save/open one line (no user)
2877:	File save: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2878:	File open: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2879:	Before: Defenestration
2880:	After : null
2881:	// Class to save/open multiple lines (with user)
2882:	Before: [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2883:	After:  [I look at my watch for the hour,But I find it has run out of power,I yell out Oh No!,I have got to go!,For I fear that the milk has gone sour]
2884:	// Now save/open on a complex data type
2885:	File open: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2886:	File open: java.io.FileNotFoundException: C:\temp\data.txt (The system cannot find the path specified)
2887:	Before: Athlete: Husky: HighSchool: Student: Person
2888:	Before: Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2889:	After:  Linked List 	[Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,Athlete: Husky: HighSchool: Student: Person,At ... (line shortened) ...
2890:	Stacks and Queues Post Secondary Content:..................................................
2891:	// Create objects for testing...
2892:	// Create and Test a stack object...
2893:	// Test toString, size, isEmpty, and push methods...
2894:	Empty = true	Size = 0	Empty Stack
2895:	// Loop through adding random values
2896:	Empty = false	Size = 1	Stack top -> [where] <- bottom
2897:	Empty = false	Size = 2	Stack top -> [peeps,where] <- bottom
2898:	Empty = false	Size = 3	Stack top -> [Mordy,peeps,where] <- bottom
2899:	Empty = false	Size = 4	Stack top -> [nixed,Mordy,peeps,where] <- bottom
2900:	Empty = false	Size = 5	Stack top -> [Kaleb,nixed,Mordy,peeps,where] <- bottom
2901:	Empty = false	Size = 6	Stack top -> [Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2902:	Empty = false	Size = 7	Stack top -> [loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2903:	Empty = false	Size = 8	Stack top -> [Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2904:	Empty = false	Size = 9	Stack top -> [bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2905:	Empty = false	Size = 10	Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2906:	// Test clone method...
2907:	Clone stack: Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2908:	// Test equals method...
2909:	Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
==
Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2910:	// Now change the copy
2911:	// Now check again
2912:	Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
!=
Stack top -> [Towny] <- bottom
2913:	// Re-clone the stack, and output
2914:	Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2915:	// Text the pop method...
2916:	Clone stack:	Empty = false	Size = 10	Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2917:	// Loop through removing values
2918:	Popped -> Paten	Empty = false	Size = 9	Stack top -> [bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2919:	Popped -> bairn	Empty = false	Size = 8	Stack top -> [Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2920:	Popped -> Abbie	Empty = false	Size = 7	Stack top -> [loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2921:	Popped -> loins	Empty = false	Size = 6	Stack top -> [Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2922:	Popped -> Emmet	Empty = false	Size = 5	Stack top -> [Kaleb,nixed,Mordy,peeps,where] <- bottom
2923:	Popped -> Kaleb	Empty = false	Size = 4	Stack top -> [nixed,Mordy,peeps,where] <- bottom
2924:	Popped -> nixed	Empty = false	Size = 3	Stack top -> [Mordy,peeps,where] <- bottom
2925:	Popped -> Mordy	Empty = false	Size = 2	Stack top -> [peeps,where] <- bottom
2926:	Popped -> peeps	Empty = false	Size = 1	Stack top -> [where] <- bottom
2927:	Popped -> where	Empty = true	Size = 0	Empty Stack
2928:	Popped -> null	Empty = true	Size = 0	Empty Stack
2929:	// Test peek (top is wrapper no testing needed)...
2930:	Clone Top = null
2931:	Stack Top = Paten
2932:	// Test to array and to linked list...
2933:	Linked List 	[Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where]
2934:	Array   	[Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where]
2935:	// Test our constructors...
2936:	Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2937:	Stack top -> [Paten,bairn,Abbie,loins,Emmet,Kaleb,nixed,Mordy,peeps,where] <- bottom
2938:	// Test the Queue object...
2939:	// Test toString,size,isEmpty, and enqueue methods...
2940:	Empty = true	Size = 0	Empty Queue
2941:	// Loop through adding random values
2942:	Empty = false	Size = 1	Queue back -> [unify] <- front
2943:	Empty = false	Size = 2	Queue back -> [dumpy,unify] <- front
2944:	Empty = false	Size = 3	Queue back -> [Aruba,dumpy,unify] <- front
2945:	Empty = false	Size = 4	Queue back -> [skull,Aruba,dumpy,unify] <- front
2946:	Empty = false	Size = 5	Queue back -> [olden,skull,Aruba,dumpy,unify] <- front
2947:	Empty = false	Size = 6	Queue back -> [Kevan,olden,skull,Aruba,dumpy,unify] <- front
2948:	Empty = false	Size = 7	Queue back -> [Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2949:	Empty = false	Size = 8	Queue back -> [glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2950:	Empty = false	Size = 9	Queue back -> [Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2951:	Empty = false	Size = 10	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2952:	// Test clone method...
2953:	Clone Queue 			Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2954:	// Test equals method...
2955:	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
==
Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2956:	// Now change the duplicate
2957:	// Now check again
2958:	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
==
Queue back -> [grief] <- front
2959:	// Re-clone the queue, and output
2960:	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2961:	// Test the dequeue method...
2962:	Clone queue:	Empty = false	Size = 10	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2963:	// Loop through removing values
2964:	Dequeued -> unify	Empty = false	Size = 9	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy] <- front
2965:	Dequeued -> dumpy	Empty = false	Size = 8	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba] <- front
2966:	Dequeued -> Aruba	Empty = false	Size = 7	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull] <- front
2967:	Dequeued -> skull	Empty = false	Size = 6	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden] <- front
2968:	Dequeued -> olden	Empty = false	Size = 5	Queue back -> [beaus,Lynna,glops,Sheba,Kevan] <- front
2969:	Dequeued -> Kevan	Empty = false	Size = 4	Queue back -> [beaus,Lynna,glops,Sheba] <- front
2970:	Dequeued -> Sheba	Empty = false	Size = 3	Queue back -> [beaus,Lynna,glops] <- front
2971:	Dequeued -> glops	Empty = false	Size = 2	Queue back -> [beaus,Lynna] <- front
2972:	Dequeued -> Lynna	Empty = false	Size = 1	Queue back -> [beaus] <- front
2973:	Dequeued -> beaus	Empty = true	Size = 0	Empty Queue
2974:	Dequeued -> null	Empty = true	Size = 0	Empty Queue
2975:	// Test front and back...
2976:	Clone Front = null
2977:	Queue Front = unify
2978:	Clone Back  = null
2979:	Queue Back  = beaus
2980:	// Test to array and to linked list...
2981:	Linked List 	[beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify]
2982:	Array   	[beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify]
2983:	// Test our constructors...
2984:	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2985:	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2986:	// Constructors from stack to queue (and back)...
2987:	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front	 into 	Stack top -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- bottom
2988:	Stack top -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- bottom	 into 	Queue back -> [beaus,Lynna,glops,Sheba,Kevan,olden,skull,Aruba,dumpy,unify] <- front
2989:	Searching and Sorting Post Secondary Content:..............................................
2990:	// For the I.B. Exam, you only need to know:
2991:	// Search: linear search and binary search
2992:	// Sort: bubble sort and the selection sort
2993:	// Create some constants (edges) for the data
2994:	// Create some random data to search through and sort
2995:	// Including edge cases to test
2996:	// Create data to store the results...
2997:	// The simpliest of searches
2998:	Array [59,80,64,86,71,29,58,17,60,14,16,12,28,62,11,3,2,15,32,61,56,0,51,5,91,93,78,15,38,7,2,58,70,63,75,92,57,97,68,23,19,87,12,77,88,7,9,22,14,94,72,27,32,18,66,68,85,79,76,94,54,93,51,58,98,20,28, ... (line shortened) ...
2999:	// Now the linear search on all test data
3000:	Array [59,80,64,86,71,29,58,17,60,14,16,12,28,62,11,3,2,15,32,61,56,0,51,5,91,93,78,15,38,7,2,58,70,63,75,92,57,97,68,23,19,87,12,77,88,7,9,22,14,94,72,27,32,18,66,68,85,79,76,94,54,93,51,58,98,20,28, ... (line shortened) ...
3001:	Array [59,80,64,86,71,29,58,17,60,14,16,12,28,62,11,3,2,15,32,61,56,0,51,5,91,93,78,15,38,7,2,58,70,63,75,92,57,97,68,23,19,87,12,77,88,7,9,22,14,94,72,27,32,18,66,68,85,79,76,94,54,93,51,58,98,20,28, ... (line shortened) ...
3002:	Array [59,80,64,86,71,29,58,17,60,14,16,12,28,62,11,3,2,15,32,61,56,0,51,5,91,93,78,15,38,7,2,58,70,63,75,92,57,97,68,23,19,87,12,77,88,7,9,22,14,94,72,27,32,18,66,68,85,79,76,94,54,93,51,58,98,20,28, ... (line shortened) ...
3003:	Array [59,80,64,86,71,29,58,17,60,14,16,12,28,62,11,3,2,15,32,61,56,0,51,5,91,93,78,15,38,7,2,58,70,63,75,92,57,97,68,23,19,87,12,77,88,7,9,22,14,94,72,27,32,18,66,68,85,79,76,94,54,93,51,58,98,20,28, ... (line shortened) ...
3004:	Array [59,80,64,86,71,29,58,17,60,14,16,12,28,62,11,3,2,15,32,61,56,0,51,5,91,93,78,15,38,7,2,58,70,63,75,92,57,97,68,23,19,87,12,77,88,7,9,22,14,94,72,27,32,18,66,68,85,79,76,94,54,93,51,58,98,20,28, ... (line shortened) ...
3005:	// Simple sort...
3006:	Sorted Array: 	[0,2,2,3,3,3,5,6,6,7,7,9,11,12,12,13,14,14,15,15,16,17,18,19,20,22,23,27,28,28,29,32,32,33,33,35,38,39,39,42,43,43,45,47,51,51,53,54,56,57,57,58,58,58,59,60,60,60,61,62,63,64,64,66,68,6 ... (line shortened) ...
3007:	// We will re-scramble array for further testing
3008:	Sorted Array: 	[55,19,39,90,87,34,10,89,85,75,56,23,16,38,90,78,20,58,63,18,4,19,32,13,45,44,32,17,51,97,76,76,26,76,12,95,74,82,89,6,79,66,96,64,35,99,66,7,68,85,57,27,36,73,44,85,99,96,5,12,63,88,88 ... (line shortened) ...
3009:	// Now bubble sort (from bubbles rising from water)
3010:	Original Array 	[55,19,39,90,87,34,10,89,85,75,56,23,16,38,90,78,20,58,63,18,4,19,32,13,45,44,32,17,51,97,76,76,26,76,12,95,74,82,89,6,79,66,96,64,35,99,66,7,68,85,57,27,36,73,44,85,99,96,5,12,63,88,8 ... (line shortened) ...
3011:	// Now selection sort (from selecting the smallest)
3012:	Original Array 	[55,19,39,90,87,34,10,89,85,75,56,23,16,38,90,78,20,58,63,18,4,19,32,13,45,44,32,17,51,97,76,76,26,76,12,95,74,82,89,6,79,66,96,64,35,99,66,7,68,85,57,27,36,73,44,85,99,96,5,12,63,88,8 ... (line shortened) ...
3013:	// Now binary search (named after two or dividing)
3014:	// NOTE: binary search can only happen on sorted list
3015:	// Redo some of the test data...
3016:	Array [0,1,2,2,4,5,6,7,10,12,12,12,12,12,13,13,13,16,17,18,18,19,19,20,20,20,21,22,23,26,27,28,30,31,32,32,32,32,34,35,36,38,38,39,40,44,44,45,47,47,49,49,51,55,56,56,57,57,58,61,62,63,63,64,66,66,66, ... (line shortened) ...
3017:	Array [0,1,2,2,4,5,6,7,10,12,12,12,12,12,13,13,13,16,17,18,18,19,19,20,20,20,21,22,23,26,27,28,30,31,32,32,32,32,34,35,36,38,38,39,40,44,44,45,47,47,49,49,51,55,56,56,57,57,58,61,62,63,63,64,66,66,66, ... (line shortened) ...
3018:	Array [0,1,2,2,4,5,6,7,10,12,12,12,12,12,13,13,13,16,17,18,18,19,19,20,20,20,21,22,23,26,27,28,30,31,32,32,32,32,34,35,36,38,38,39,40,44,44,45,47,47,49,49,51,55,56,56,57,57,58,61,62,63,63,64,66,66,66, ... (line shortened) ...
3019:	Array [0,1,2,2,4,5,6,7,10,12,12,12,12,12,13,13,13,16,17,18,18,19,19,20,20,20,21,22,23,26,27,28,30,31,32,32,32,32,34,35,36,38,38,39,40,44,44,45,47,47,49,49,51,55,56,56,57,57,58,61,62,63,63,64,66,66,66, ... (line shortened) ...
3020:	Array [0,1,2,2,4,5,6,7,10,12,12,12,12,12,13,13,13,16,17,18,18,19,19,20,20,20,21,22,23,26,27,28,30,31,32,32,32,32,34,35,36,38,38,39,40,44,44,45,47,47,49,49,51,55,56,56,57,57,58,61,62,63,63,64,66,66,66, ... (line shortened) ...
3021:	// Use class for searching and sorting
3022:	// Create random linked list data
3023:	// Create random array data
3024:	// Place all test cases into another linked list
3025:	// Execute the linear search on all list test data...
3026:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3027:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3028:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3029:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3030:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3031:	// Execute the linear search on all array test data...
3032:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3033:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3034:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3035:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3036:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3037:	// Execute all the sorts on all test data...
3038:	// Bubble sort LinkedList data...
3039:	Before: 	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pr ... (line shortened) ...
3040:	// Bubble sort array data...
3041:	Before: 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast, ... (line shortened) ...
3042:	// Selection sort LinkedList data...
3043:	Before: 	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pr ... (line shortened) ...
3044:	// Selection sort array data...
3045:	Before: 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast, ... (line shortened) ...
3046:	// Shell sort LinkedList data...
3047:	Before: 	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pr ... (line shortened) ...
3048:	// Shell sort array data...
3049:	Before: 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast, ... (line shortened) ...
3050:	// Insertion sort LinkedList data...
3051:	Before: 	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pr ... (line shortened) ...
3052:	// Insertion sort array data...
3053:	Before: 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast, ... (line shortened) ...
3054:	// Quick sort LinkedList data...
3055:	Before: 	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pr ... (line shortened) ...
3056:	// Quick sort array data...
3057:	Before: 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast, ... (line shortened) ...
3058:	// Merge sort LinkedList data...
3059:	Before: 	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pr ... (line shortened) ...
3060:	// Merge sort array data...
3061:	Before: 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast, ... (line shortened) ...
3062:	// Heap sort LinkedList data...
3063:	Before: 	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pr ... (line shortened) ...
3064:	// Heap sort array data...
3065:	Before: 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast, ... (line shortened) ...
3066:	// Execute the binary search on all List test data...
3067:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3068:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3069:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3070:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3071:	Linked List 	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,v ... (line shortened) ...
3072:	// Execute the binary search on all Array test data...
3073:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3074:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3075:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3076:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3077:	[figs,snip,pink,sous,Rudy,Raff,gyve,Ajax,Pugh,rang,Jena,wino,Inga,advt,Wacs,flop,gold,negs,dual,ttys,Rosa,Celt,prim,busk,view,pans,smut,Rios,Lomb,Lulu,Theo,Fred,butt,buoy,Olia,pros,Amos,vast,pica,Wehr ... (line shortened) ...
3078:	Binary Trees Post Secondary Content:.......................................................
3079:	// Constants/variables for creating random values...
3080:	// Creating some TreeNode objects...
3081:	// Linking the TreeNodes...
3082:	// Testing TreeNode equals...
3083:	// Testing TreeNode toString...
3084:	15
3085:	56
3086:	88
3087:	// Creating a Tree object...
3088:	// Test the insert method...
3089:	// Insert one more...
3090:	// Test the search of the tree...
3091:	Should be found     = true
3092:	Should NOT be found = false
3093:	// Test toString() and pre, post, in order traversals
3094:	Binary Tree:
Order: Linked List 	[81,98,76,28,10,84]
Pre:   Linked List 	[81,76,28,10,98,84]
Post:  Linked List 	[10,28,76,84,98,81]
In:    Linked List 	[10,28,76,81,84,98]
3095:	// Building second tree (test clone) and test equals
3096:	1st tree -> Linked List 	[10,28,76,81,84,98]
3097:	2nd tree -> Linked List 	[17,41,48,59,80,92]
3098:	1st!=2nd
3099:	// Building a third tree (test clone) and test equals
3100:	1st tree -> Linked List 	[10,28,76,81,84,98]
3101:	3rd tree -> Linked List 	[10,28,76,81,84,98]
3102:	1st==3rd
3103:	// Build all our data structures from each other...
3104:	// Create variable objects...
3105:	// Create array from variables...
3106:	// Create LinkedList from array...
3107:	// Create Stack from LinkedList...
3108:	// Create Queue from Stack...
3109:	// Create Tree from Queue...
3110:	// Output variables,array,list,stack,queue,tree...
3111:	mynas
3112:	yeahs
3113:	outré
3114:	saxes
3115:	emili
3116:	[mynas,yeahs,outré,saxes,emili]
3117:	Linked List 	[mynas,yeahs,outré,saxes,emili]
3118:	Stack top -> [mynas,yeahs,outré,saxes,emili] <- bottom
3119:	Queue back -> [mynas,yeahs,outré,saxes,emili] <- front
3120:	Binary Tree:
Order: Linked List 	[mynas,yeahs,outré,saxes,emili]
Pre:   Linked List 	[mynas,emili,yeahs,outré,saxes]
Post:  Linked List 	[emili,saxes,outré,yeahs,mynas]
In:    Linked List 	[emili,myna ... (line shortened) ...
3121:	// Now re-building queue from tree
3122:	// Now re-building stack from queue
3123:	// Now re-building LinkedList from stack...
3124:	// Now re-building array from LinkedList...
3125:	// Output array,list,stack,queue,tree again...
3126:	[emili,mynas,outré,saxes,yeahs]
3127:	Linked List 	[emili,mynas,outré,saxes,yeahs]
3128:	Stack top -> [emili,mynas,outré,saxes,yeahs] <- bottom
3129:	Queue back -> [emili,mynas,outré,saxes,yeahs] <- front
3130:	Binary Tree:
Order: Linked List 	[mynas,yeahs,outré,saxes,emili]
Pre:   Linked List 	[mynas,emili,yeahs,outré,saxes]
Post:  Linked List 	[emili,saxes,outré,yeahs,mynas]
In:    Linked List 	[emili,myna ... (line shortened) ...
