1:	Mr. Wachs' Computer Science Classes........................................................
2:	Computer Science 42SAP Prerequisite content not running....................................
3:	Computer Science 42SAP Course:.............................................................
4:	Computer Science 42SAP curriculum content..................................................
5:	AP curriculum - Part 1.....................................................................
6:	AP: Unit 1 (Primitive Types)...............................................................
7:	1.1 Why Programming? Why Java?.............................................................
8:	...
9:	1.2 Variables and Data Types...............................................................
10:	...
11:	1.3 Expressions and Assignment Statements..................................................
12:	...
13:	1.4 Compound Assignment Operators..........................................................
14:	...
15:	1.5 Casting and Ranges of Variables........................................................
16:	...
17:	AP: Unit 3 (Boolean Expressions And If Statements).........................................
18:	3.1 Boolean Expressions....................................................................
19:	...
20:	3.2 if Statements and Control Flow.........................................................
21:	...
22:	3.3 if-else Statements.....................................................................
23:	...
24:	3.4 else if Statements.....................................................................
25:	...
26:	3.5 Compound Boolean Expressions...........................................................
27:	...
28:	3.6 Equivalent Boolean Expressions.........................................................
29:	...
30:	3.7 Comparing Objects......................................................................
31:	...
32:	AP: Unit 4 (Iteration).....................................................................
33:	4.1 while Loops............................................................................
34:	...
35:	4.2 for Loops..............................................................................
36:	...
37:	4.3 Developing Algorithms Using Strings....................................................
38:	...
39:	4.4 Nested Iteration.......................................................................
40:	...
41:	4.5 Informal Code Analysis.................................................................
42:	...
43:	AP curriculum - Part 2.....................................................................
44:	AP: Unit 2 (Using Objects).................................................................
45:	2.1 Objects: Instances of Classes..........................................................
46:	...
47:	2.2 Creating and Storing Objects (Instantiation)...........................................
48:	...
49:	2.3 Calling a Void Method..................................................................
50:	...
51:	2.4 Calling a Void Method with Parameters..................................................
52:	...
53:	2.5 Calling a Non-void Method..............................................................
54:	...
55:	2.6 String Objects: Concatenation, Literals, and More......................................
56:	...
57:	2.7 String Methods.........................................................................
58:	...
59:	2.8 Wrapper Classes: Integer and Double....................................................
60:	...
61:	2.9 Using the Math Class...................................................................
62:	...
63:	AP: Unit 5 (Writing Classes)...............................................................
64:	5.1 Anatomy of a Class.....................................................................
65:	...
66:	5.2 Constructors...........................................................................
67:	...
68:	5.2 Documentation with Comments............................................................
69:	...
70:	5.4 Accessor Methods.......................................................................
71:	...
72:	5.5 Mutator Methods........................................................................
73:	...
74:	5.6 Writing Methods........................................................................
75:	...
76:	5.7 Static Variables and Methods...........................................................
77:	...
78:	5.8 Scope and Access.......................................................................
79:	...
80:	5.9 this Keyword...........................................................................
81:	...
82:	5.10 Ethical and Social Implications of Computing Systems..................................
83:	...
84:	AP: Unit 9 (Inheritance)...................................................................
85:	9.1 Creating Superclasses and Subclasses...................................................
86:	...
87:	9.2 Writing Constructors for Subclasses....................................................
88:	...
89:	9.3 Overriding Methods.....................................................................
90:	...
91:	9.4 super Keyword..........................................................................
92:	...
93:	9.5 Creating References Using Inheritance Hierarchies......................................
94:	...
95:	9.6 Polymorphism...........................................................................
96:	...
97:	9.7 Object Superclass......................................................................
98:	...
99:	AP curriculum - Part 3.....................................................................
100:	AP: Unit 6 (Arrays)........................................................................
101:	6.1 Array Creation and Access..............................................................
102:	...
103:	6.2 Traversing Arrays......................................................................
104:	...
105:	6.3 Enhanced for Loop for Arrays...........................................................
106:	...
107:	6.4 Developing Algorithms Using Arrays.....................................................
108:	...
109:	AP: Unit 8 (2D Arrays).....................................................................
110:	8.1 2D Arrays..............................................................................
111:	...
112:	8.2 Traversing 2D Arrays...................................................................
113:	...
114:	AP curriculum - Part 4.....................................................................
115:	AP: Unit 7 (Array List)....................................................................
116:	7.1 Introduction to ArrayList..............................................................
117:	...
118:	7.2 ArrayList Methods......................................................................
119:	...
120:	7.3 Traversing ArrayLists..................................................................
121:	...
122:	7.4 Developing Algorithms Using ArrayLists.................................................
123:	...
124:	7.5 Searching..............................................................................
125:	...
126:	7.6 Sorting................................................................................
127:	...
128:	7.7 Ethical Issues Around Data Collection..................................................
129:	...
130:	AP: Unit 10 (Recursion)....................................................................
131:	10.1 Recursion.............................................................................
132:	...
133:	10.2 Recursive Searching and Sorting.......................................................
134:	...
135:	Computer Science 42SAP practice tests......................................................
136:	AP Practice Test 1.........................................................................
137:	// Question 1...
138:	Consider the following code segment.
139:	int a = 5;
140:	int b = 2;
141:	double c = 3.0;
142:	System.out.println(5 + a / b * c - 1);
143:	What is printed when the code segment is executed?
144:	(A) 0.666666666666667
145:	(B) 9.0
146:	(C) 10.0
147:	(D) 11.5
148:	(E) 14.0
149:	// Answer 1...
150:	C
151:	// Question 2...
152:	Which of the following statements assigns a random
153:	integer between 25 and 60, inclusive to rn?
154:	(A) int rnA = (int)(Math.random() * 25) + 36;
155:	(B) int rnB = (int)(Math.random() * 25) + 60;
156:	(C) int rnC = (int)(Math.random() * 26) + 60;
157:	(D) int rnD = (int)(Math.random() * 36) + 25;
158:	(E) int rnE = (int)(Math.random() * 60) + 25;
159:	// Answer 2...
160:	A
161:	D
162:	// Question 3...
163:	Which of the following best describes the value
164:	of the Boolean expression shown below?
165:	a && !(b || a)
166:	(A) The value is always true
167:	(B) The value is always false
168:	(C) The value is true when a has the value 
    false, and is false otherwise
169:	(D) The value is true when b has the value 
    false, and is false otherwise
170:	(E) The value is true when either a or b has 
    the value true, and is false otherwise
171:	// Answer 3...
172:	B
173:	// Question 4...
174:	Consider the following code segment
175:	int val = 48;
176:	int div = 6;
177:	while((val % 2 == 0) && div > 0) {
178:	    if (val % div == 0) {
179:	        System.out.print(val + " ");
180:	    }
181:	    val /= 2;
182:	    div--;
183:	}
184:	What is printed when the code segment is executed?
185:	(A) 48 12 6
186:	(B) 48 12 6 3
187:	(C) 48 12 6 3 1
188:	(D) 48 24 12 6
189:	(E) 48 24 12 6 3
190:	// Answer 4...
191:	A
192:	// Question 5...
193:	Which of the following code segments is equivalent to the code below
194:	if (x >= 1) x = x * 3;
195:	if (x > 3) x = 0;
196:	(A) x = 0
197:	(B) if (x > 1) x = 0;
198:	(C) if (x > 3) x = 0;
199:	(D) if (x >= 1) x = 0;
200:	(E) none of the above
201:	// Answer 5...
202:	B
203:	// Question 6...
204:	When is the following Boolean expression true
205:	(a and b are integers)?
206:	(a < b) && !(b > a)
207:	(A) Always true
208:	(B) Never true
209:	(C) a = b
210:	(D) a < b
211:	(E) a > b
212:	// Answer 6...
213:	B
214:	// Question 7...
215:	Consider the following code segment
216:	int i = a random number such that 1 <= i <= n;
217:	for (int a = 2; a <= i; a++)
218:	    for (int b = 1; b < i; b++)
219:	        System.out.println("*");
220:	(A) 0
221:	(B) 1
222:	(C) 2
223:	(D) n - 1
224:	(E) n - 2
225:	// Answer 7...
226:	B
227:	// Question 8...
228:	Consider the following code segment
229:	int p = 5;
230:	int q = 2;
231:	int sum = 0;
232:	while (p <= 8) {
233:	    sum += p % q;
234:	    p++;
235:	    q++;
236:	}
237:	(A) 1
238:	(B) 0
239:	(C) 13
240:	(D) 7
241:	(E) 4
242:	// Answer 8...
243:	D
244:	// Question 9...
245:	Consider the following code segment
246:	for (int i = 0; i <= 3; i++) {
247:	    for (int j = 1; j <= 5; j+=2) {
248:	        System.out.println("*");
249:	    }
250:	}
251:	(A) 3
252:	(B) 6
253:	(C) 9
254:	(D) 12
255:	(E) 15
256:	// Answer 9...
257:	D
258:	// Question 10...
259:	What are the values of a and b after the for loop
260:	finishes?
261:	int a = 10;
262:	int b = 3;
263:	int t = 0;
264:	for (int i = 1; i < 4; i++) {
265:	    t = a;
266:	    a = i + b;
267:	    b = t - i;
268:	}
269:	(A) a = 5 and b = -2
270:	(B) a = 6 and b = 7
271:	(C) a = 6 and b = 3
272:	(D) a = 12 and b = 1
273:	(E) a = 5 and b = 8
274:	// Answer 10...
275:	E
276:	AP Practice Test 2.........................................................................
277:	// Question 1...
278:	Consider the following class definition
279:	public class Example
280:	{
281:	     private int x;
282:	     // constructor not shown
283:	}
284:	Which of the following is a correct header for a
285:	method that would return the value of the private
286:	instance variable x so that it can be used in a
287:	class other than Example?
288:	(A) private int getX()
289:	(B) private void getX()
290:	(C) public int getX()
291:	(D) public void getX()
292:	(E) public void getX(int x)
293:	// Answer 1...
294:	C
295:	// Question 2...
296:	Consider the following class definitions
297:	public class Thing1 {
298:	     public void calc(int n) {
299:	          n *= 3;
300:	          System.out.print(n);
301:	     }
302:	}
303:	public class Thing2 extends Thing1 {
304:	     public void calc(int n) {
305:	          n += 2;
306:	          super.calc(n);
307:	          System.out.print(n);
308:	     }
309:	}
310:	The following code seqment appears in a class
311:	other than Thing1 or Thing2
312:	Thing1 t = new Thing2();
313:	t.calc(2);
314:	What is printed as a result of executing the
315:	code segment?
316:	(A) 4
317:	(B) 6
318:	(C) 68
319:	(D) 124
320:	(E) 1212
321:	// Answer 2...
322:	D
323:	// Question 3...
324:	Consider the following class definitions.
325:	public class Student {
326:	    public String getFood() {
327:	        return "Pizza";
328:	    }
329:	    public String getInfo() {
330:	        return "Studying";
331:	    }
332:	}
333:	public class GradStudent extends Student {
334:	    public String getFood() {
335:	        return "Taco";
336:	    }
337:	    public String getInfo() {
338:	        super.getInfo();
339:	        return "Eating";
340:	    }
341:	}
342:	What is printed when the following code is
343:	executed?
344:	Student s = new GradStudent();
345:	System.out.println(s.getInfo());
346:	(A) Pizza
347:	(B) Taco
348:	(C) Studying
349:	(D) Eating
350:	(E) Studying
351:	    Eating
352:	// Answer 3...
353:	D
354:	// Question 4...
355:	Given the following class declarations:
356:	public class Car {
357:	    private String make;
358:	    public Car(String theMake) {
359:	        make = theMake;
360:	    }
361:	    public String getMake() {
362:	        return make;
363:	    }
364:	}
365:	public class ElectricCar extends Car {
366:	    public ElectricCar() {
367:	        super("Ford");
368:	    }
369:	    public ElectricCar(String theMake) {
370:	        super(theMake);
371:	    } 
372:	}
373:	Which of the following will cause a compile
374:	time error?
375:	(A) Car myCar = new Car();
376:	(B) Car myCar1 = new ElectricCar();
377:	(C) ElectricCar myCar2 = new ElectricCar("Ford");
378:	(D) Car myCar3 = new Car("Ford");
379:	(E) Car myCar4 = new ElectricCar("Ford");
380:	// Answer 4...
381:	A
382:	// Question 5...
383:	Given the following declarations.
384:	public class Vehicle {
385:	    public void test(Car x, SportsCar y) { }
386:	}
387:	public class Car extends Vehicle {
388:	}
389:	public class SportsCar extends Car {
390:	}
391:	Also consider the following code that appears
392:	in a different class.
393:	Vehicle v = new Vehicle();
394:	Car c = new Car();
395:	SportsCar sporty = new SportsCar();
396:	Which of the following is a correct call to test ?
397:	(A) v.test(sporty, v);
398:	(B) sporty.test(c, c);
399:	(C) v.test(sporty, c);
400:	(D) sporty.test(sporty, v);
401:	(E) c.test(sporty, sporty);
402:	// Answer 5...
403:	E
404:	// Question 6...
405:	Class C extends class B, which extends class A. 
406:	Also, all of the three classes implement a public
407:	method test(). How can a method in an object of
408:	class C invoke the test() method defined in class
409:	A (without creating a new instance of class A)?
410:	(A) test();
411:	(B) super.super.test();
412:	(C) super.test();
413:	(D) this.test();
414:	(E) There is no way to call a method in a 
415:	    grandparent class from a grandchild class
416:	// Answer 6...
417:	E
418:	// Question 7...
419:	Given the following class declarations. Assume
420:	that Parent p = new Child(); appears in a client
421:	program. What is the result of the call p.m1();
422:	public class Parent {
423:	    public void m1() {
424:	        System.out.print("pm1");
425:	        m2();
426:	    }
427:	    public void m2() {
428:	        System.out.print("pm2");
429:	    }
430:	}
431:	public class Child extends Parent {
432:	    public void m1() {
433:	        super.m1();
434:	        System.out.print("cm1");
435:	    }
436:	    public void m2() {
437:	        super.m2();
438:	        System.out.print("cm2");
439:	    }
440:	}
441:	(A) pm1pm2cm2cm1
442:	(B) pm1pm2
443:	(C) pm1pm2cm1cm2
444:	(D) pm1cm1
445:	(E) pm1
446:	// Answer 7...
447:	pm1pm2cm2cm1// Question 8...
448:	Given the following class declarations.
449:	public class Animal {
450:	    public void eat() {
451:	        System.out.println("AE");
452:	    }
453:	}
454:	public class Bear extends Animal {
455:	    public void growl() {
456:	        System.out.println("BG");
457:	    }
458:	}
459:	Assume the following declaration is in a 
460:	different class.
461:	Animal b = new Bear();
462:	Which of the following will compile without error?
463:	I.   b.eat();
464:	II.  b.growl();
465:	III. ((Bear)b).growl();
466:	(A) I only
467:	(B) II only
468:	(C) III only
469:	(D) I and III only
470:	(E) I, II, and III
471:	// Answer 8...
472:	B
473:	// Question 9...
474:	Consider the following partial class definitions.
475:	public class C1 {
476:	    private int num;
477:	    private String name;
478:	    public C1(int theNum) {
479:	        num = theNum
480:	    } 
481:	    public C1(String theName) {
482:	        name = theName;
483:	    }
484:	}
485:	public class C2 extends C1 {
486:	    // methods not shown
487:	}
488:	Which of the following constructors are valid for
489:	C2?
490:	I. public C2() { }
491:	II. public C2(int quan) { super(quan); }
492:	III. public C2(String label) { super(label); }
493:	(A) All three are valid
494:	(B) II only
495:	(C) III only
496:	(D) II and III
497:	(E) None are valid
498:	// Answer 9...
499:	D
500:	// Question 10...
501:	Given the following class definition. What are 
502:	the values of x, y, and z just before method2
503:	returns?
504:	public class Class1 {
505:	    public int method1(int a, int b) {
506:	        int temp = a;
507:	        a = b;
508:	        b = temp;
509:	        return b;
510:	    }  
511:	    public void method2() {
512:	        int x = 3;
513:	        int y = 5;
514:	        int z = method1(x, y);
515:	    }
516:	}
517:	(A) x=3,y=3,z=3
518:	(B) x=3,y=5,z=3
519:	(C) x=5,y=3,z=5
520:	(D) x=5,y=3,z=3
521:	(E) x=3,y=5,z=5
522:	// Answer 10...
523:	B
524:	AP Practice Test 3.........................................................................
525:	// Section 1...
526:	For the next two Free response questions, 
527:	refer to the description below...
528:	A travel agency maintains a list of information 
529:	about airline flights. Flight information 
530:	includes a departure time and an arrival time.
531:	You may assume that the two times occur on the 
532:	same day. These times are represented by 
533:	objects of the Time class. The declaration for
534:	the Time class is shown below. It includes a 
535:	method which returns the difference (in minutes)
536:	between the current Time object and another Time
537:	object. 
538:	public class Time {
539:	     /** 
540:	      * @return difference, in minutes, between this
541:	      * time and other; difference is negative
542:	      * if other is earlier than this time
543:	      */
544:	     public int minutesUntil(Time other) {
545:	          /* implementation not shown */
546:	     }
547:	     // There may be instance variables, constructors,
548:	     // and methods that are not shown.
549:	}
550:	For example, assume that t1 and t2 are Time 
551:	objects where t1 represents 1:00 p.m. and t2 
552:	represents 2:15 p.m. The call t1.minutesUntil(t2) 
553:	will return 75 and the call t2.minutesUntil(t1) 
554:	will return -75. The declaration for the Flight class 
555:	is shown below. It has methods to access the 
556:	departure time and the arrival time of a flight. 
557:	You may assume that the departure time of a 
558:	flight is earlier than its arrival time.
559:	public class Flight {
560:	      /** @return time at which the flight departs */
561:	      public Time getDepartureTime() {
562:	           /* implementation not shown */ 
563:	      }
564:	      /** @return time at which the flight arrives */
565:	      public Time getArrivalTime() {
566:	           /* implementation not shown */ 
567:	      }
568:	      // There may be instance variables, constructors, 
569:	      // and methods that are not shown.
570:	}
571:	A trip consists of a sequence of flights and is 
572:	represented by the Trip class. The Trip class 
573:	contains a List of Flight objects that are stored 
574:	in chronological order. You may assume that for 
575:	each flight after the first flight in the list, 
576:	the departure time of the flight is later than 
577:	the arrival time of the preceding flight in the 
578:	list. A partial declaration of the Trip class is 
579:	shown below. You will write two methods for the 
580:	Trip class.
581:	public class Trip {
582:	     /** 
583:	       * The list of flights (if any) that make up 
584:	       * this trip, stored in chronological order
585:	       */
586:	     private List<Flight> flights;
587:	     /** 
588:	       * @return the number of minutes from the 
589:	       * departure of the first flight to the arrival 
590:	       * of the last flight if there are one or more 
591:	       * flights in the trip; 0, if there are no 
592:	       * flights in the trip
593:	       */
594:	     public int getDuration() {
595:	          /* to be implemented in part (a) */ 
596:	     }
597:	     /** 
598:	       * Precondition: the departure time for each 
599:	       * flight is later than the arrival time of its 
600:	       * preceding flight
601:	       * @return the smallest number of minutes 
602:	       * between the arrival of a flight and the 
603:	       * departure of the flight immediately after it, 
604:	       * if there are two or more flights in the 
605:	       * trip; -1, if there are fewer than two flights 
606:	       * in the trip
607:	       */
608:	     public int getShortestLayover() {
609:	          /* to be implemented in part (b) */
610:	     }
611:	       // There may be instance variables, constructors,
612:	       // and methods that are not shown
613:	}
614:	// Question 1...
615:	Complete method getDuration below.  
616:	// An answer could be...
617:	public int getDuration() {
618:	    int totalDuration = 0;
619:	    for (Flight flight : flights) {
620:	        Time departure = flight.getDepartureTime();
621:	        Time arrival   = flight.getArrivalTime();
622:	        int  duration  = departure.minutesUntil(arrival);
623:	        totalDuration  = totalDuration + duration;
624:	    }
625:	    return totalDuration;
626:	}
627:	// Question 2...
628:	Write the Trip method getShortestLayover. A 
629:	layover is the number of minutes from the arrival 
630:	of one flight in a trip to the departure of the 
631:	flight immediately after it. If there are two or 
632:	more flights in the trip, the method should return 
633:	the shortest layover of the trip; otherwise, it 
634:	should return -1. For example, assume that the 
635:	instance variable flights of a Trip object vacation 
636:	contains the following flight information.
637:	          Departure   Arrival   Layover
638:	            Time      Time     (minutes)
639:	         +---------+----------+
640:	Flight 0 | 11:30am |  12:15pm |
641:	         +---------+----------+ }  60
642:	Flight 1 |  1:15pm |   3:45pm |
643:	         +---------+----------+ }  15
644:	Flight 2 |  4:00pm |   6:45pm |
645:	         +---------+----------+ }  210
646:	Flight 3 | 10:15pm |  11:00pm |
647:	         +---------+----------+
648:	The call vacation.getShortestLayover() should 
649:	return 15. Complete method getShortestLayover() 
650:	below.
651:	public int getShortestLayover()
652:	// An answer could be...
653:	public int getShortestLayover() {
654:	    if (flights.isEmpty()) return -1;
655:	    int shortestLayover = Integer.MAX_VALUE;
656:	    int i = 0;
657:	    while (i < flights.size()) {
658:	        Flight currentFlight = flights.get(i);
659:	        i++;
660:	        Flight nextFlight    = flights.get(i);
661:	        Time arrival         = currentFlight.getArrivalTime();
662:	        Time departure       = nextFlight.getDepartureTime();
663:	        int layover = Math.abs(arrival.minutesUntil(departure));
664:	        if (layover < shortestLayover) {
665:	            shortestLayover = layover;
666:	        }
667:	        i++;
668:	    }
669:	    return shortestLayover;
670:	}
671:	// Section 1...
672:	For the next three Free response questions, refer 
673:	to the description below...
674:	Consider the hierarchy of classes shown in the 
675:	following diagram
676:	         +----------+ 
677:	         |    Pet   |
678:	         +----------+
679:	            /    \
680:	 +----------+    +----------+
681:	 |    Cat   |    |    Dog   |
682:	 +----------+    +----------+
683:	                       \
684:	                       +----------+
685:	                       | Loud Dog |
686:	                       +----------+
687:	Note that a Cat 'is-a' Pet, a Dog 'is-a' Pet, and 
688:	a LoudDog 'is-a' Dog. The class Pet is specified 
689:	as an abstract class as shown in the following 
690:	declaration. Each Pet has a name that is 
691:	specified when it is constructed.
692:	public abstract class Pet {
693:	    private String name;
694:	    public Pet(String petName) {
695:	        name = petName;
696:	    }
697:	    public String getName() {
698:	        return name;
699:	    }
700:	    public abstract String speak();
701:	}
702:	The subclass Dog has the partial class 
703:	declaration shown below.
704:	public class Dog extends Pet {
705:	    public Dog(String petName) {
706:	        /* implementation not shown */
707:	    }
708:	    public String speak() {
709:	        /* implementation not shown */
710:	    }
711:	}
712:	// Question 3...
713:	Given the class hierarchy shown above, write a 
714:	complete class declaration for the class Cat, 
715:	including implementations of its constructor 
716:	and method(s). The Cat method speak returns 
717:	'meow' when it is invoked.
718:	// An answer could be...
719:	public class Cat extends Pet {
720:	    public Cat(String petName) {
721:	        super(petName);
722:	    }
723:	    public String speak() {
724:	        return "meow";
725:	    }
726:	}
727:	// Question 4...
728:	Assume that class Dog has been declared as shown 
729:	at the beginning of the question. If the String 
730:	dog-sound is returned by the Dog method speak, 
731:	then the LoudDog method method speak returns a 
732:	String containing dog-sound repeated two times. 
733:	Given the class hierarchy shown previously, 
734:	write a complete class declaration for the class 
735:	LoudDog including implementations of its 
736:	constructor and method(s).
737:	// An answer could be...
738:	public class LoudDog extends Dog {
739:	    public LoudDog(String petName) {
740:	        super(petName);
741:	    }
742:	    public String speak() {
743:	        return super.speak() + super.speak();
744:	    }
745:	}
746:	// Question 5...
747:	Consider the following partial declaration of 
748:	class Kennel
749:	public class Kennel {
750:	    private ArrayList<Pet> petList;
751:	     /**
752:	      * For every Pet in the kennel, prints the name 
753:	      * followed by the result of a call to its speak 
754:	      * method, one line per Pet
755:	      */
756:	     public void allSpeak() {
757:	        /* to be implemented */
758:	     }
759:	     // There may be instance variables, constructors, 
760:	     // and methods that are not shown
761:	}
762:	Write the Kennel method allSpeak For each Pet in 
763:	the kennel, allSpeak prints a line with the name 
764:	of the Pet followed by the result of a call to 
765:	its speak method. In writing allSpeak you may use 
766:	any of the methods defined for any of the classes 
767:	specified for this problem. Assume that these 
768:	methods work as specified, regardless of what 
769:	you wrote in previous questions. Complete method
770:	allSpeak below
771:	public void allSpeak()
772:	// An answer could be...
773:	public void allSpeak() {
774:	    for (Pet pet : petList) {
775:	        System.out.println(pet.getName() + pet.speak());
776:	    }
777:	}
778:	AP Practice Test 4 not running.............................................................
779:	Computer Science 42SAP Post Secondary content not running..................................
