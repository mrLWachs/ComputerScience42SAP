
/** Required package class namespace */
package testing.prerequisite.cs30s;


/**
 * Graphics1.java - this is a form (or frame, or 'container', or user interface)
 * built using the NetBeans WYSIWYG ("what you see is what you get") UI 
 * designer. To make this type of JFrame, you go to "File -> New File" and  
 * select "JFrame Form" and the UI editor will appear. To switch between code  
 * and the designer, use the buttons under the "Graphics2.java" tab named 
 * "Source" and "Design". We will be using the editor's "Palette" and 
 * "Properties" windows to build and change the design and then adding code as 
 * needed. We will examine this frame and Graphics1 to compare doing the same 
 * things using a designer vs. writing all the code ourselves. 
 * 
 * NOTE: For those students who took the introductory Computer Science 20S 
 * course and used Visual Studio and the C# programming language, an editor 
 * like this should seem familiar to you. That IDE allows programmers to use
 * the WYSIWYG editor without having to write all the code. Editors just write 
 * code for you (both Visual Studio and this NetBeans editor) and "hide" that 
 * code (either in a collapsed method in NetBeans, or in another class in 
 * Visual studio). You can find a Visual Studio C# version of this example
 * here: https://bit.ly/4k5ccfN with the specific code page here:
 * https://bit.ly/3SzFK9n
 * 
 * NOTE: If you remember having to "name" all the objects in Visual
 * Studio, you can also do this in NetBeans (although in this course that is not 
 * required) by right clicking on each object and selecting "Change Variable
 * Name..." and then typing in a new name. 
 *
 * @author Mr. Wachs
 * @since May 2025
 */
public class Graphics1 extends javax.swing.JFrame 
{

    /** 
     * Constructor method, creates new frame/form Graphics1 
     */
    public Graphics1() {
        initComponents();
        
        // Add code after the call to the method in the line above (which do 
        // not erase that line - which is a method call) - now add code to   
        // make the form (frame, container, window, etc.) appear to the user
        // and other methods we can call to make visual changes...
            
        // Some properties could be coded and others can be set using the
        // properties window in the designer
        
        // When designing, another option that could be done is to "right click"
        // on the frame (the "container") and select "Set Layout" and then 
        // select "null" - this give you more control over where items can be 
        // placed but requires you to use code to set the size of the frame
        // before it is shown...
        
        this.setSize(450, 580);             // The width and height
        this.setLocationRelativeTo(null);   // This centers the frame on screen
        this.setVisible(true);              // Display the frame
    }
    
    
    ////////////////////////////////////////////////////////////////////////////
    // NOTE: the NetBeans visual designer adds the code below which can NOT be
    // edited, it also adds other code like the constructor above which you can 
    // edit, add to, delete etc. The "Generated code" below can be seen by 
    // clicking the "plus sign +" to expand the code
    ////////////////////////////////////////////////////////////////////////////
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graphics 1");
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setText("Hello World");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
        });
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 20, 370, 16);

        jButton1.setText("ENTER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(26, 52, 380, 40);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });
        getContentPane().add(jTextField1);
        jTextField1.setBounds(26, 110, 380, 22);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/testing/prerequisite/cs30s/spidey.gif"))); // NOI18N
        jLabel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel2MouseMoved(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 150, 400, 400);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        // Double clicking a button in the design mode, immediately jumps to 
        // code written for you connected to that button - to add in your 
        // code to execute (just like in Visual Studio). Parts of this code
        // is also not editable (that is why is appears in grey) but you can 
        // add the code for the "action" for this event
        
        System.out.println("Clicked a button");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // When I double click the Textbox (Textfield) it gives me this
        // "event" but it might not be the exact event I want to use...
        
        System.out.println("Textbox (Textfield) default action");
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // For other actions, like this, right click on the object in the 
        // WYSIWYG ("What You See Is What You Get") designer and go to the
        // menu -> Events -> then the action you wish to add 
        
        jLabel1.setText("Textbox Key pressed was " + evt.getKeyCode());     
    }//GEN-LAST:event_jTextField1KeyPressed

    private void jLabel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseMoved
        // Several different mouse events are accessible like this event 
        // of the mouse moving over the object (the label image) and you can
        // use the "evt" parameter to access events from the mouse like the 
        // (x, y) cooordinate of it as it relates to the label
        
        jLabel1.setText("Mouse over Image at: " + evt.getX() + "," + evt.getY());
    }//GEN-LAST:event_jLabel2MouseMoved

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        // The event "mouseEntered" and "mouseExited" are like "hover" effects
        // of the mouse being "over" (or entering the space) of this object and
        // then exiting (or leaving the space) of this label object
        
        jTextField1.setVisible(false);
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        jTextField1.setVisible(true);
    }//GEN-LAST:event_jLabel1MouseExited

    
    
    ////////////////////////////////////////////////////////////////////////////
    // NOTE: the NetBeans WYSIWYG visual designer also adds a version of the 
    // "main" method to this class of code (each JFrame form when added also 
    // adds a main method below for each JFrame form seen below - just like the 
    // original class file when you build a project). You can certainly delete
    // that original project class file, and then the project will use this 
    // version of main when the project runs (when you click the green tirangle 
    // above on the NetBeans toolbar) or you can delete the main method below 
    // and have other code call this class's constructor to show this form. You 
    // can also change the project properties so that it "picks" which version 
    // of main to run (see Mr. Wachs for instructions on how to do this). I  
    // have removed the main method for this class (by commenting it out below)
    ////////////////////////////////////////////////////////////////////////////     
    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Graphics1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Graphics1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Graphics1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Graphics1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Graphics1().setVisible(true);
//            }
//        });
//    }
    
    
    ////////////////////////////////////////////////////////////////////////////
    // NOTE: the NetBeans visual designer adds the code below for each 
    // component (control, widget, property, global variable) which also 
    // cannot be edited
    ////////////////////////////////////////////////////////////////////////////
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
